환경 
CentOS 7 사용 
mysql 8.0.21 
 
mysql 설치 
yum으로 설치 (root로 진행)
yum repository 설치용 rpm 다운로드 ( dev.mysql.com/downloads/repo/yum )
mysql에 올리고 rpm -Uvh mysql80-community-release-el7-3.noarch.rpm

설치 가능한 mysql 소프트웨어 목록 yum search mysql-community 

설치가능한 버전 yum –showduplicates list mysql-community-server

실제 설치 yum install mysql-community-server-8.0.21

시작 systemctl start mysqld / 종료 systemctl stop mysqld

접속 /var/log/mysqld.log에 임시로 저장된 비밀번호 
mysql -u root -p  password : 

비밀번호 변경 (편의상 LOW로 변경)
기본 정책 : Medium / 8자리 이상 대문자 1자, 숫자 1자, 특수문자 1자 이상(validate_password%)
LOW – 비밀번호 길이만 검증
MEDIUM – 길이, 숫자, 대소문자, 특수문자 배합 검증
STRONG – MEDIUM + 금칙어 포함 여부 검증

alter user root@localhost identified by ‘test123’;
create user root@’%’ identified by ‘test123’;
grant all privileges on *.* to root@'%';  (계정생성과 권한을 따로 줘야한다)

toad 접속 시 - Unable to load authentication plugin 'caching_sha2_password'
vi /etc/my.cnf 추가 - default_authentication_plugin=mysql_native_password 

mysql -u root -p --host=localhost (socket을 통해 IPC 통신)
mysql -u root -p –host=127.0.0.1 (루프백 IP - TCP/IP 통신)

인플레이스 업그레이드 제약 사항
1)	동일 메이저 버전에서 마이너 버전 간 업그레이드할 경우 ex) 8.0.16 -> 8.0.21 
대부분 데이터 파일의 변경 없이 진행
2)	메이저 버전 간 업그레이드 일 경우 5.5 -> 5.6 가능 5.5 -> 5.7 or 8.0 지원하지 않음
데이터 파일의 패치 시 직전 메이저 버전에서 사용하던 데이터 파일과 로그 포맷만 인식하도록 구현되기 때문
* 새로운 버전을 선택할 때 최소 GA 버전은 지난(15~ 20번 이상) 마이너 버전을 선택
- 오라클에서 mysql 서버의 안정성이 확인된 버전을 의미 
인플레이스 업그레이드가 안 될수 있음 

mysql 8.0 업그레이드 시 고려사항
1)	사용자 인증 방식 변경 – Native Authentication -> Caching SHA-2 Authentication
2)	호환성 체크 : 손상된 FRM 파일, 호환되지 않는 데이터 타입, 함수 확인(mysqlcheck)
3)	외래키 이름의 길이 : 64글자로 제한 
4)	인덱스 힌트 : 8.0에서 힌트의 성능 테스트 필요 (성능 저하 유발 가능)
5)	group by 정렬 옵션 : ‘ASC’, ‘DESC’ 사용 시 제거하거나 다른 방식으로 변경
6)	공용 테이블스페이스 : 파티션의 각 테이블 스페이스를 공용 테이블스페이스에 저장할 수 없다. 확인 후 개별 테이블스페이스를 사용하도록 변경
 
시스템 변수
Cmd-Line – 명령행 인자로 설정될 수 있는지 여부 
Option File – my.cnf로 제어 가능한지 여부
System Var – 시스템 변수 여부
Var Scope – Global, Session, Both 영향 여부
Dynamic – 동적, 정적 변수 여부 (동적 : mysql 재시작하지 않고 변경 가능)

ex) show global variables like ‘%max_connections%’; 
max_connections 패턴으로 서버 전체 영향 미치는 변수를 조회 
both 타입의 변수 일 경우 set global로 변숫값 변경 시 session 값에는 영향이 없다

set persist 변수 변경과 함께 설정 파일(mysqld-auto.cnf : JSON형식)에 적용 
* 세션변수에는 적용 되지 않음
ex) set persist max_connections=5000;
ex) set persist_only max_connections=5000; // 설정파일에만 변경 내용 저장
특정 시스템 변수 삭제 
reset persist max_connections; // mysqld-auto.cnf 내용상 오류 차단을 위해 
reset persist;
 
사용자 및 권한
계정으로 로그인 할 때 같은 계정, 다른 IP일 경우 IP의 범위가 좁은 것을 우선으로 한다.
ex) test@192.168.0.132 > test@%
mysql.sys@localhost – sys 스키마의 객체들의 DEFINER 계정
mysql.session@localhost – mysql 플러그인이 서버로 접근할 때 사용되는 계정
mysql.infoschema@localhost – information_schema에 정의된 뷰의 DEFINER 계정

계정 생성
CREATE USER ‘user’@’%’
	IDENTIFIED WITH ‘mysql_native_password’ BY ‘password’ (인증방식 및 비밀번호)
		IDENTIFIED BY ‘password’ (서버의 기본 인증 방식 사용)
		 Caching SHA-2 Pluggable Authentication
SCRAM사용 5000번 암호화 해시 함수 실행(brute-force 대응, but 자원소모 큼)
	REQUIRE NONE // 서버 접속 시 암호화된 SSL/TLS 채널 사용 여부 설정
	PASSWORD EXPIRE INTERVAL 30 DAY // 비밀번호 유효기간 
	ACCOUNT UNLOCK // 계정 잠금 여부 
	PASSWORD HISTORY DEFAULT // 비밀번호 재사용 여부
	PASSWORD REUSE INTERVAL DEFAULT // 비밀번호 재사용 금지 기간 설정
	PASSWORD REQUIRE CURRENT DEFAULT; // 만료 후 새 설정, 현재 비밀번호 필요 여부

Dual Password – 2개의 비밀번호 중 한 개만 일치하면 로그인(Primary, Secondary)
ex) ALTER USER ‘root’@’localhost’ IDENTIFIED BY ‘new_password’ RETAIN CURRENT PASSWORD;
 
권한
객체 권한 - DB, Table 제어 시 필요한 권한
	GRANT 권한 부여 시 특정 객체 명시
	DB권한
	ex) GRANT EVENT ON *.* TO 'user'@'localhost';
	    GRANT EVENT ON employees.* TO 'user'@'localhost'; // 둘다 사용 가능, but 테이블에 까지는 적용 불가(db.table)
	테이블 권한
	ex) GRANT SELECT,INSERT,UPDATE,DELETE ON *.* TO 'user'@'localhost';
	    GRANT SELECT,INSERT,UPDATE,DELETE ON employees.department TO 'user'@'localhost';
	    GRANT SELECT,INSERT,UPDATE(dept_name) ON employees.department TO 'user'@'localhost'; // 컬럼 단위 권한
	** 칼럼 단위의 권한이 하나라도 설정되면 나머지 모든 테이블의 모든칼럼에 대해서도 권한 체크를 하기 때문에 전체적인 성능에 영향을 미칠 수 있음
	   꼭 필요하다면 뷰를 선택하는것도 방법 
	   
글로벌 권한 – DB, Table 이외의 객체에 적용되는 권한
	GRANT 권한 부여 시 특정 객체 명시X
	ex) GRANT SUPER ON *.* TO 'user'@'localhost'; // 특정 DB, 테이블에 부여하지 못하기에 항상 *.* 사용
예외적으로 ALL은 글로벌, 객체 권한 두 가지 용도로 사용 가능
	8.0부터 동적 권한 추가
동적 권한 – mysql 서버의 컴포넌트나 플러그인이 설치되면 그때 등록되는 권한 

Role - 권한을 묶어서 역할로 사용
ex)
create role role_emp_read, role_emp_write; // 껍데기 선언
grant select on employees.* to role_emp_read; // 권한 부여
grant insert, update, delete on employees.* to role_emp_write; // 권한 부여
create user reader@'127.0.0.1' identified by 'qwerty12'; // 계정 생성
create user writer@'127.0.0.1' identified by 'qwerty12'; // 계정 생성
grant role_emp_read to reader@'127.0.0.1'; // 역할 부여
grant role_emp_read, role_emp_write to writer@'127.0.0.1' // 역할 부여
set role 'role_emp_read'; // 역할 활성화
select current_role(); // 역할 확인
activate_all_roles_on_login=ON // 역할 자동화 활성 변수

역할과 계정은 동일한 객체로 취급 (관리자 입장에서 prefix를 지정해서 관리해야함)

아키텍처
머리를 담당하는 Mysql엔진, 손발을 담당하는 스토리지 엔진으로 나누어짐 
Mysql엔진 - 커넥션 핸들러, SQL파서, 전처리기, 옵티마이저 
스토리지엔진 - 실제 데이터를 디스크 스토리지에 저장하거나 디스크 스토리지로부터 데이터를 읽어온다. (InnoDB(버퍼풀), MyISAM(키캐시), Memory ...)
핸들러 API - Mysql엔진의 쿼리실행기에서 데이터를 쓰거나 읽을 때, 각 스토리지 엔진에 쓰기, 읽기를 요청함 
	show global status like 'handler%'; (핸들러 API를 통한 데이터 작업량 확인)

Mysql 스레딩 구조 - 스레드 기반으로 작동, 포그라운드 + 백그라운드 (performance_schema.threads - 실행중인 스레드 목록)
포그라운드 스레드 - mysql 서버에 접속된 클라이언트의 수만큼 존재, 커넥션 종료 시 스레드 캐시로 돌아가며, 대기중인 개수가 일정이상일 경우 스레드 종료
 유지하는 최대 스레드 개수 - thread_cache_size 변수 
 MyISAM - 데이터 버퍼, 캐시로부터 데이터를 가져오고, 디스크 쓰기 작업까지
 InnoDB - 데이터 버퍼, 캐시까지만 디스크 쓰기는 백그라운드 스레드가 처리
 이처럼 나누어  InnoDB는 쓰기 전까지 기다리지 않고 SELECT만 가능
백그라운드 스레드 - InnoDB의 백그라운드 스레드
 인서트버퍼 병합 스레드
 로그 스레드
 쓰기 스레드
 읽기 스레드
 잠금, 데드락 모니터링 스레드
 읽기, 쓰기 스레드 갯수 지정 변수 - innodb_read_io_threads, innodb_write_io_threads 

글로벌 메모리 영역 - 생성된 글로벌 메모리 영역 N개는 모든 스레드에 의해 공유 
 테이블 캐시, InnoDB 버퍼 풀, InnoDB 어댑티브 해시 인덱스, InnoDB 리두 로그 버퍼

로컬 메모리 영역 - 각 클라이언트 스레드별로 독립적으로 할당, 절대 공유, 사용되지 않음
 정렬 버퍼, 조인 버퍼, 바이너리 로그 캐시, 네트워크 버퍼

Mysql엔진이 스토리지 엔진을 조정하기 위해선 핸들러를 사용해야 한다.

플러그인의 단점
 오직 Mysql서버와 인터페이스할 수 있고, 플러그인끼리는 통신할 수 없음
 Mysql서버의 변수나 함수를 직접 호출하기 때문에 안전하지 않음(캡슐화 안 됨)
 상호 의존 관계를 설정할 수 없어서 초기화가 어려움

쿼리 파서
 사용자 요청으로 들어온 쿼리 문장을 토큰으로 분리해 트리 형태의 구조로 만들어 내는 작업
 쿼리의 기본 문법 오류는 이 과정에서 발생, 사용자에게 오류 메시지 전달

전처리기
 파서 트리를 기반으로 쿼리 문장에 구조적인 문제점이 있는지 확인
 각 테이블 이름, 칼럼 이름, 내장 함수와 같은 개체를 매핑하고 해당 객체 존재 여부, 접근 권한 등을 확인
 존재 하지 않거나, 권한 상 사용할 수 없는 토큰은 이 과정에서 걸러짐

옵티마이저
 쿼리 문장을 저렴한 비용으로 가장 빠르게 처리할지를 결정 ( 중 요 )
 
실행 엔진
 만들어진 계획대로 각 핸들러에게 요청해서 받은 결과를 또 다른 핸들러 요청의 입력으로 연결하는 역할을 수행
 
핸들러(스토리지 엔진)
 Mysql서버의 가장 밑단에서 Mysql 실행 엔진의 요청에 따라 데이터를 디스크로 저장하고 디스크로부터 읽어 오는 역할을 담당

쿼리 캐시
 SQL의 실행 결과를 메모리에 캐시, 동일 쿼리가 실행되면 즉시 결과 반환 but 테이블의 데이터가 변경 될 시 관련된 것 삭제 -> 동시 처리 성능 저하 유발
 결과적으로 mysql 8.0에서 기능 완전 삭제

스레드 풀 (엔터프라이즈 에디션 O, 커뮤니티 에디션 X) -> **Percona Server 스레드풀**(thread_pool.so 스레드 풀 플러그인 라이브러리 설치 필요)
 동시 처리 요청이 많아도 서버의 CPU가 제한된 개수의 스레드 처리에만 집중할 수 있게 해서 서버의 자원소모를 줄이는 것이 목적
 스케줄링에 문제가 생기면 오히려 쿼리 처리가 느려질 수도 있음
 CPU코어의 개수와 thread_pool_size 개수와 맞추는 것이 CPU 프로세서 친화도를 높이는데 좋음
 thread_pool_oversubscribe (추가로 더 받아들여서 처리할 수)
 thread_pool_stall_limit 정의된 밀리초만큼 작업이 끝나지 않으면 새로운 스레드 생성
 thread_pool_max_threads 최대 스레드 수 
 선순위 큐, 후순위 큐를 이용해 순서를 재배치 할 수 있음 
 
트랜잭션 지원 메타데이터
 5.7까지는 테이블 구조를 FRM에 저장 + (*.TRM, *.TRG, *.PAR, ...) -> 트랜잭션을 지원하지 않으며, 생성 또는 변경 도중 Mysql서버의 비정상적 종료 시 DB, Table이 깨졌다.
 8.0부터는 테이블의 구조, 스토어드 프로그램의 코드 관련 정보를 모두 InnoDB의 테이블에 저장하도록 개선
Mysql	TABLE_CATALOG	TABLE_SCHEMA		TABLE_NAME		TABLE_TYPE	ENGINE		VERSION		ROW_FORMAT
8.0 	def		mysql			innodb_table_stats	BASE TABLE	InnoDB		10		Dynamic
5.6 	def		information_schema	CHARACTER_SETS		SYSTEM VIEW	MEMORY		10		Fixed
실행한 query ( select * from information_schema.tables limit 1; )
비교해보니 8.0에서 information_schema.tables는 mysql를 참조(뷰)하고 있었고, ENGINE 컬럼 또한 InnoDB에 실제 저장되고 있었다.
 아마 8.0부턴 트랜잭션 기준으로 스키마 변경 성공, 실패로 데이터가 남아있을 것이다.
++ InnoDB이외의 스토리지 엔진(MyISAM, CSV)을 사용하는 테이블들은 메타데이터 저장을 위해 SDI(Serialized Dictionary Information) 파일을 사용하며 *.FRM 파일과 동일한 역할을 한다. 
   ibd2sdi 유틸리티 사용 InnoDB 테이블 스페이스에서 스키마 정보를 추출 - P97 사용방법
   
InnoDB는 Mysql의 스토리지 엔진 중 거의 유일하게 레코드 기반의 잠금 제공 + 높은 동시성 처리
InnoDB의 모든 테이블은 기본적으로 Primary key를 기준으로 클러스터링 저장. 즉 Primary key는 다른 보조 인덱스에 비해 비중이 높고,
Oracle DBMS의 IOT와 동일한 구조가 됨.
MyISAM은 클러스터링 키를 지원하지 않아 Primary key와 Secondary Index의 구조는 차이가 없고, 모든 인덱스는 물리적 레코드 주소 값을 가진다.

외래 키 지원 - InnoDB 스토리지 엔진 레벨에서 지원, MyISAM, MEMORY 테이블에선 사용 불가 
foreign_key_checks = OFF 외래 키 관계 체크 OFF

MVCC(Multi Version Concurrency Control) - 레코드 레벨의 트랜잭션 지원하는 DBMS가 제공하는 기능, 잠금을 사용하지 않는 일관된 읽기를 제공
InnoDB - Undo log를 이용해서 기능 구현 // Multi Version - 하나의 레코드에 대해 여러 개의 버전이 관리 됨 
ex) 레코드를 UPDATE 했을때 새로운 값은 버퍼 풀에 기록되고, Undo log에 기존의 레코드가 기록된다. 그 이후 시스템 변수에 설정 된 격리 수준에 따라 반환 값이 달라진다. 
이후 COMMIT, ROLLBACK으로 확정 짓고 Undo 영역은 삭제된다( 필요로 하는 트랜잭션이 더는 없을 때 )

잠금 없는 일관된 읽기 
InnoDB는 MVCC를 이용해 잠금을 걸지 않고 읽기 작업을 수행
INSERT 가  걸려 있어도 Undo log를 통해 SELECT을 수행한다. 하지만 트랜잭션이 오래 될 경우 삭제되지 못한 Undo log때문에 Mysql서버가 느려지거나 문제가 발생 할 수 있다.

자동 데드락 감지
InnoDB 스토리지 엔진은 내부적으로 잠금이 교착 상태에 빠지지 않았는지 체크하기 위해 잠금 대기 목록을 그래프형태로 관리한다.
데드락 감지 스레드는 주기적으로 잠금 대기 그래프를 검사하고, 트랜잭션의 Undo log의 양으로 교착상태에 빠진 트랜잭션을 강제 종료한다. (양이 더 적으면 롤백의 대상이 됨)
innodb_table_locks 활성화 시 엔진 내부의 레코드 잠금뿐만 아니라, 테이블 레벨의 잠금까지 감지 가능
하지만, 동시 처리 스레드가 매우 많은 경우 데드락 감지 스레드는 더 많은 CPU 자원을 소모할 수 있음.
innodb_deadlock_detect = OFF (데드락 감지 스레드 On/Off)
innodb_lock_wait_timeout 활성화 시 데드락 상황에서 설정 시간이 지나면 에러 메시지 반환 deadlock off 시 -> timeout 50이하 권장 

자동화된 장애복구
Innodb는 mysql 서버 시작 시 항상 자동 복구를 수행한다. 만약 자동으로 복구될 수 없는 손상이 있다면, 자동 복구는 멈추고 mysql 서버는 종료된다.
이 경우 innodb_force_recovery 설정 후 복구 시작 필요 ( 복구모드에선 select 이외 불가, 숫자가 커질 수록 심각한 상황 )

1(SRV_FORCE_IGNORE_CORRUPT) - Database page 손상 관련
InnoDB의 테이블스페이스의 데이터나 인덱스 페이지에서 손상된 부분이 발견돼도 무시하고 Mysql서버를 시작한다.
에러 로그 파일에 'Database page corruption on disk or a failed' 메시지 출력 될 때 대부분 해당

2(SRV_FORCE_NO_BACKGROUND) - 메인 스레드 Undo data 삭제 장애 관련
백그라운드 스레드 중 메인 스레드를 시작하지 않고 Mysql을 시작한다. 
InnoDB의 메인 스레드가 Undo data를 삭제하는 과정에서 장애가 발생했다면 이 모드로 복구하면 된다.

3(SRV_FORCE_NO_TRX_UNDO) - 트랜잭션 커밋 관련
정상적인 Mysql 서버의 시작에서는 최종적으로 커밋되지 않은 트랜잭션은 롤백을 수행한다.
커밋되지 않고 종료된 트랜잭션은 계속 그 상태로 남아 있게 Mysql 서버를 시작하는 모드

4(SRV_FORCE_NO_IBUF_MERGE) - 인서트 버퍼 병합 관련
InnoDB는 INSERT, UPDATE, DELETE 등의 데이터 변경으로 인한 '인덱스 변경 작업'을 상황에 따라 즉시 처리할 수도, 인서트 버퍼에 저장해두고 나중에 처리 할 수도 있다.
Mysql을 종료했을 때 인서트 버퍼에 기록된 내용은 데이터 파일에 병합되지 않을 수 있는데, 재시작하면서, 인서트 버퍼의 손상을 감지하면
InnoDB는 에러를 발생시키고 서버는 시작하지 못한다. 
4로 설정할 경우 인서트 버퍼의 내용을 무시하고 강제로 Mysql이 시작되게 한다.

5(SRV_FORCE_NO_UNDO_LOG_SCAN) - Undo log 관련
Mysql의 재시작 시 InnoDB의 Undo log를 사용할 수 없다면 InnoDB 엔진의 에러로 서버 시작이 불가능하다.
5 설정 시 Undo log를 모두 무시하고 시작한다.
하지만 이 모드로 복구 시 서버 종료되던 시점에 커밋되지 않았던 작업도 모두 커밋된 것처럼 처리되므로 잘못된 데이터에 대한 확인이 필요하다.

6(SRV_FORCE_NO_LOG_REDO) - Redo log 관련
Redo log 손상 시 서버가 시작되지 못한다. 
6 설정 시 Redo log를 모두 무시하고 시작된다. 커밋됐다 하더라도 Redo log에만 기록되고 데이터 파일에 기록되지 않은 데이터는 모두 무시된다. 
'마지막 체크포인트 시점의 데이터만 남게 된다.'
기존의 Redo log는 모두 삭제(백업 후)하고 Mysql를 시작하는 것이 좋다. 
innodb_log_group_home_dir - Redo log 파일의 디렉토리 경로
default_value - ..mysql/data/ib_logfile0 & ib_logfile1
innodb_log_file_size - 로그 파일 사이즈


InnoDB 버퍼 풀 
스토리지 엔진에서 가장 핵심적인 부분. 디스크의 데이터 파일이나 인덱스 정보를 메모리에 캐시해 두는 공간이다. 쓰기 작업을 지연시켜 일괄 작업으로 처리할 수 있게
해주는 버퍼 역할도 같이 한다. 변경된 데이터를 모아서 처리하면 랜덤한 디스크 작업의 횟수를 줄일 수 있다.

버퍼 풀의 크기 설정은 OS와 각 클라이언트 스레드가 사용할 메모리도 고려해서 설정해야 한다.
독특한 경우 레코드 버퍼가 상당한 메모리를 사용하기도 한다. 레코드 버퍼는 각 클라이언트 세션에서 테이블의 레코드를 읽고 쓸 때 버퍼로 사용하는 공간을 말하는데, 
커넥션이 많고 사용하는 테이블도 많다면 레코드 버퍼 용도로 사용되는 메모리 공간이 꽤 많이 필요해질 수도 있다.

5.7부터는 InnoDB 버퍼 풀의 크기를 동적으로 조절할 수 있고, 가능하다면 적절히 작은 값으로 설정 후 증가 시키는게 최적이다.
8GB 미만이라면 50%, 그 이상이라면 50%부터 시작해서 조금씩 올라가면서, 50GB 이상이라면, 대략 15~30GB정도를 남겨두고 나머지를 버퍼 풀로 할당하는 것이 좋다. 
버퍼 풀 사이즈 설정 - innodb_buffer_pool_size (크기 변경은 크리티컬한 변경이므로, 서버가 한가한 시점에 진행하는 것이 좋음)
버퍼 풀은 내부적으로 128MB 청크 단위로 쪼개어 관리된다. (크기를 줄이거나 늘릴 때 128MB 단위로 처리 됨)

버퍼 풀은 전체를 관리하는 잠금(세마포어)에서 내부 잠금 경합을 줄이기 위해 여러개로 쪼개어 관리 할수 있게 개선됐다
버퍼 풀로 할당할 수 있는 메모리 공간이 40GB 이하 수준이라면 기본값 8을 유지 - innodb_buffer_pool_instances 
메모리가 크다면 버퍼 풀 인스턴스당 5GB 정도가 되게 설정하는 것이 좋다.

버퍼 풀의 구조 
버퍼 풀은 페이지 크기(innodb_page_size 변수)의 조각으로 쪼개어 관리한다. 그리고 스토리지 엔진이 데이터를 필요로 할 때 해당 데이터 페이지를 읽어서 각 조각에 저장한다.
페이지 크기 조각을 관리하기 위해 3개의 자료 구조를 관리 한다. 
1. LRU(Least Recently Used) 리스트 - LRU(old 서브리스트) + MRU(new 서브리스트) 리스트가 결합된 형태 
 리스트 관리 목적은 디스크로부터 한 번 읽어온 페이지를 최대한 오랫동안 InnoDB 버퍼풀의 메모리에 유지해서 디스크 읽기를 최소화하는 것이다.
 - 스토리지 엔진에서 데이터를 찾는 과정(LRU, MRU 이미지 p110)
  1) 필요한 레코드가 저장된 데이터 페이지가 버퍼 풀에 있는지 검사 
   A InnoDB 어댑티브 해시 인덱스를 이용해 페이지 검색 
   B 해당 테이블의 인덱스(B-Tree)를 이용해 버퍼 풀에서 페이지를 검색
   C 버퍼 풀에 이미 데이터 페이지가 있었다면 해당 페이지의 포인터를 MRU 방향으로 승급(최신화)
  2) 디스크에서 필요한 데이터 페이지를 버퍼 풀에 적재하고, 적재된 페이지에 대한 포인터를 LRU  헤더 부분에 추가
  3) LRU 헤더에 적재된 페이지가 실제 읽히면 MRU 헤더 부분으로 이동 (대량 읽기의 경우 버퍼 풀에 적재는 되지만 실제 쿼리에 사용되지 않을 수도 있어 MRU로 이동하지 않음)
  4) 실제 사용쿼리 사용여부에 따라 나이(age)가 부여 되고, 나이가 오래되면 버퍼 풀에서 삭제된다. 쿼리에 의해 사용되면 나이가 초기화 되며 MRU의 헤더 부분으로 이동
  5) 필요한 데이터가 자주 접근됐다면 해당 페이지의 인덱스 키를 어댑티드 해시 인덱스에 추가
  
2. Flush 리스트 - 디스크로 동기화되지 않은 데이터를 가진 데이터 페이지(더티 페이지)의 변경 시점 기준의 페이지 목록을 관리
 데이터가 변경되면 InnoDB는 변경 내용을 Redo log에 기록하고 버퍼 풀의 데이터 페이지에도 변경 내용을 반영한다. -> 리두 로그의 각 엔트리는 특정 데이터 페이지와 연결된다.
 InnoDB 스토리지 엔진은 체크포인트를 발생시켜 디스크의 Redo log와 데이터 페이지의 상태를 동기화한다. 
 체크포인트는 Mysql 서버가 시작될때 스토리지 엔진이 Redo log의 어느 부분부터 복구를 실행해야 할지 판단하는 기준점을 만드는 역할을 한다.

3. Free 리스트 - 실제 사용자 데이터, 채워지지 않은 비어 있는 페이지들의 목록
 사용자의 쿼리가 새롭게 디스크의 데이터 페이지를 읽어와야 하는 경우 사용된다.
 
InnoDB 버퍼 풀은 데이터베이스 서버의 성능 향상을 위해 '데이터 캐시'와 '쓰기 버퍼링'이라는 두 가지 용도가 있다.
버퍼 풀의 메모리 공간만 단순히 늘리는 것 -> 데이터 캐시 기능 향상
버퍼 풀과 Redo log의 관계 이해 -> 쓰기 버퍼링 기능 향상 (p111 이미지 참고)

클린 페이지 - 디스크에서 읽은 상태로 전혀 변경되지 않은 페이지
더티 페이지 - INSERT, UPDATE, DELETE으로 변경된 데이터를 가진 페이지(버퍼 풀에 무한정으로 머무를 수 없다). 
Redo log는 1개 이상의 '고정 크기 파일'을 연결해서 순환 고리 처럼 사용한다. 
새로운 로그 엔트리로 덮어 쓰이기에 재사용가능한 공간과 당장 재사용이 불가능한 공간으로 구분해서 관리한다.
재사용 불가능한 공간을 활성 리두 로그(Active Redo Log)라고 한다. 

Redo log파일 공간은 기록 됨에 따라 로그 포지션이 증가하는데 이를 LSN(Log Sequence Number)이라고 한다.
스토리지 엔진은 주기적으로 체크포인트 발생 -> Redo log, 더티 페이지를 디스크로 동기화
가장 최근 체크 포인트 지점의 LSN = Active Redo Log의 시작점 // 마지막은 증가
가장 최근 체크 포인트 지점의 LSN과 마지막 Redo Log entry의 LSN 차이 = 체크포인트 에이지 = Active Redo Log 공간의 크기
* 체크포인트 발생 시 - 체크포인트 LSN보다 작은 LSN값을 가진 Redo log entry + 관련된 더티 페이지는 모두 디스크로 동기화 * 

Redo log 파일의 크기를 적절히 선택하기 어렵다면 버퍼 풀의 크기가 100GB 이하의 Mysql 서버에서는 Redo log 파일의 전체 크기를 대략 5~10 GB수준으로 선택하고 필요할때마다 
늘려나가며 최적의 값을 찾는 것이 좋다

버퍼 풀 플러시
Mysql 5.7버전을 거쳐 8.0버전으로 업그레이드되면서 대부분의 서비스에서는 더티 페이지 플러시에서 예전과 같은 디스크 쓰기 폭증 현상은 발생하지 않았다.
InnoDB 스토리지 엔진은 더티 페이지들을 성능상의 악영향 없이 디스크에 동기화하기 위해 2개의 플러시 기능을 백그라운드로 실행한다.
1. 플러시 리스트 플러시 2. LRU 리스트 플러시

플러시 리스트 플러시
주기적으로 플러시 리스트 플러시 함수를 호출해서 플러시 리스트에서 오래전에 변경된 데이터 페이지 순서대로 디스크에 동기화하는 작업을 수행한다.
 사용자의 쿼리 처리에 악영향을 받지 않기 위해 지원하는 시스템 변수들
innodb_page_cleaners - 클리너 스레드의 개수를 조정하는 변수
 클리너 스레드 - 더티 페이지를 디스크로 동기화하는 스레드
 *하나의 클리너 스레드가 하나의 버퍼 풀 인스턴스를 처리* 하도록 바꾸어주는 변수 - innodb_buffer_pool_instances
 
innodb_max_dirty_pages_pct_lwm - 일정 수준 이상의 더티 페이지가 발생하면 조금씩 더티 페이지를 디스크로 기록하게. deafult 10% 수준 

innodb_max_dirty_pages_pct - InnoDB 스토리지 엔진은 전체 버퍼 풀이 가진 페이지의 90%까지 더티 페이지를 가질 수 있는데, 너무 높다고 판단될 경우 수정이 가능한 변수
 
 DB서버의 디스크 읽고 쓰기 가능한 값 -> Disk I/O(InnoDB 스토리지 엔진의 백그라운드 스레드가 수행하는 디스크 작업)
innodb_io_capacity - 일반적인 상황의 I/O
innodb_io_capacity_max - 최대 성능 발휘 시 I/O
innodb_flush_neighbors - 더티 페이지를 디스크에 기록할 때 디스크에 근접한 더티 페이지가 있따면 같이 묶어서 기록하게 하는 기능을 활성화하는 지 여부 -> default(비활성)
innodb_adaptive_flushing(On/Off) - 어댑티브 플러시 알고리즘은 Redo log의 증가 속도를 분석해서 적절한 수준의 더티 페이지가 버퍼 풀에 유지될 수 있도록 디스크 쓰기를 실행한다.
innodb_adaptive_flushing_lwm - deafult 10% -> 전체 Redo log 공간에서 활성 Redo log 공간이 10%미만이면 작동하지 않고 10% 넘어서면 어댑티브 플러시 알고리즘이 작동됨

LRU 리스트 플러시
LRU 리스트에서 사용 빈도 가 낮은 데이터 페이지들을 제거해서 공간을 만들때 사용하는 LRU 리스트 플러시 함수
끝부분부터 최대 innodb_lru_scan_depth 설정 값 만큼 페이지들을 스캔, 스캔한 더티 페이지는 디스크에 동기화되고, 클린 페이지는 free 리스트로 옮긴다.
LRU 리스트의 스캔은 (innodb_buffer_pool_instances * innodb_lru_scan_depth ) 수 만큼 수행 (버퍼 풀 인스턴스 별 최대 scan_depth 개수만큼 스캔)

버퍼 풀 상태 백업 및 복구 
워밍업 - 데이터가 버퍼 풀에 적재돼 있는 상태
버퍼 풀의 백업파일 - data_directory/ib_buffer_pool // 백업은 빠르고 복구는 오래 걸릴 수 있음
SHOW STATUS LIKE 'Innodb_buffer_pool_dump_status'\G // 복구 진행도 
SET GLOBAL innodb_buffer_pool_load_abort=ON; // 복구 중지
수동)
SET GLOBAL innodb_buffer_pool_dump_now=ON;  // 백업
SET GLOBAL innodb_buffer_pool_load_now=ON;  // 복구

자동) my.cnf에 변수 추가
innodb_buffer_pool_at_shutdown
innodb_buffer_pool_load_at_startup 

버퍼 풀의 적재 내용 확인
information_schema.innodb_buffer_page을 이용해 버퍼 풀의 메모리에 어떤 테이블의 페이지들이 적재돼 있는지 확인 할 수 있지만,
조회에 큰 부하가 생김으로 실제 서비스에 사용은 어려웠다.
하지만 8.0부터 innodb_cached_indexes 테이블이 새로 추가되면서 인덱스별 확인이 가능해졌다 (query p119)

Double Write Buffer
InnoDB 스토리지 엔진의 Redo log는 Redo log 공간의 낭비를 막기 위해 페이지의 변경된 내용만 기록하는데, 더티 페이지를 디스크 파일로 플러시할 때
일부만 기록되는 문제가 발생하면 그 페이지의 내용은 복구할 수 없을 수 있다. 이를 파셜 페이지 or 톤 페이지라 한다. 원인은 H/W오작동이나, 비정상 종료 등으로 발생될 수 있다.
이 같은 문제를 해결하기 위해 Double-Write를 기법을 이용한다. (그림. p121)
더티 페이지를 디스크로 플러시 할 때, 실제 기록 전 더티페이지들을 묶어서 한 번의 디스크 쓰기로 시스템 테이블스페이스의 DoubleWrite 버퍼에 기록하고, 각 더티 페이지를
파일의 적당한 위치에 하나씩 랜덤으로 쓰기를 실행한다. 실제 데이터 파일의 쓰기가 중간에 실패 될 경우에(OS의 비정상적인 종료 등) 재시작 시 Double Write버퍼의 내용을
데이터 페이지로 복사한다. 사용여부는 innodb_doublewrite로 제어가능하다.
SSD처럼 랜덤IO와 순차IO의 비용이 비슷할 경우엔 부담스럽지만, 무결성이 중요한 서비스일 경우엔 활성화를 고려해보는 것이 좋다.
만약 innodb_flush_log_at_trx_commit**을 1이 아닌 값으로 설정했다면 DoubleWrite도 비활성화하는 것이 좋다.

Undo log
트랜잭션과 격리 수준을 보장하기 위해 DML로 변경 되기 이전 버전의 데이터를 별도로 백업한 데이터
 1. 트랜잭션의 롤백 대비용
 2. 트랜잭션의 격리 수준을 유지하면서 높은 동시성을 제공
5.5 까지는 언두 로그의 사용 공간이 한 번 늘어나면 줄일 수 없었지만, 5.7, 8.0에선 해결 되었고 8.0의 경우 언두 로그를 돌아가면서 순차적으로 사용해 디스크 공간을 줄이고,
필요한 시점에 사용공간을 자동으로 줄여 주기도 한다.

언두 로그 레코드 건수 query (8.0버전에서)**(5.6도 확인가능)
select name, count from information_schema.innodb_metrics where name like '%his%';
서버별 안정적인 시점의 언두 로그 레코드 건수 확인하고 급증 여부 모니터링하는 것이 좋음
History list length 길어지면 서버 부하관련 좋지 않음 **

5.6에서는 innodb_undo_tablespaces 시스템 변수가 도입됐고, **2보다 큰값을 설정 시 언두 로그를 별도의 언두 로그 파일로 사용한다.
8.0.14 부터는 항상 시스템 테이블스페이스 외부의 별도 로그 파일에 기록되도록 개선되었다.

언두 테이블스페이스 형태(p126)
하나의 롤백 세그먼터는 InnoDB의 페이지 크기를 16Byte로 나눈 값의 개수만큼 언두 슬롯을 가짐
최대 동시 트랜잭션 수 = innoDB 페이지 크기 / 16 * 롤백 세그먼트 개수 * 언두 테이블스페이스 개수

8.0부터는 CREATE UNDO TABLESPACE, DROP TABLESPACE로 새로운 언두 테이블스페이스를 동적으로 추가, 삭제 가능
불필요한 공간 os에 반납 하는 것 Undo tablespace truncate 
1) 자동 : innodb_undo_log_truncate = ON   + innodb_purge_rseg_truncate_frequency (잘라내는 작업의 빈도 수)
2) 수동 : innodb_undo_log_truncate = OFF

체인지 버퍼
5.5이전까지 인서트 버퍼라 부르던 버퍼로 INSERT 뿐만 아니라 DELETE UPDATE를 포함한 버퍼링이 가능하다
레코드가 INSERT, UPDATE 시 인덱스를 업데이트 하는 작업이 필요한데, 디스크로부터 읽어와서 업데이트 할 경우
이를 즉시 실행하지 않고 임시 공간에 저장해 두고 바로 사용자에게 결과를 반환하는 형태로 성능을 향상시키게 되는데, 이때 사용하는 임시 메모리 공간을 체인지 버퍼라고 한다.
결과 전달 전 반드시 중복 여부를 체크해야 하는 유니크 인덱스는 체인지 버퍼 사용이 불가하다
체인지 버퍼에 임시로 저장된 인덱스 레코드 조각은 이후 백그라운드 스레드에 의해 병합되는데 이 스레드를 체인지 버퍼 머지 스레드라고 한다.
innodb_change_buffering - 작업의 종류 별로 체인지 버퍼 활성화
all : 모든 인덱스 관련 작업(inserts + deletes + purges)
none : 버퍼링 안함
inserts : 인덱스 새로운 아이템을 추가하는 작업만 버퍼링
deletes : 인덱스 기존 아이템을 삭제하는 작업(삭제됐다는 마킹 작업)만 버퍼링
changes : inserts + deletes
purges : 인덱스 아이템을 영구적으로 삭제하는 작업만 버퍼링(백그라운드 작업)

체인지 버퍼 메모리 공간 - InnoDB 버퍼 풀의 25(%, default) - innodb_change_buffer_max_size

대부분은 DB서버는 데이터 변경 내용을 로그로 먼저 기록한다. 그리고 쓰기보다는 읽기 성능을 고려한 자료 구조를 가지고 있기 때문에 파일 쓰기는 
랜덤 액세스가 필요하며, 기록 시 상대적으로 큰 비용이 필요하다. 이에 따라 성능 저하를 막기 위해 쓰기 비용이 낮은 자료구조를 가진 
Redo log를 가지고 있으며, 이 Redo log를 버퍼링 할 수 있는 InnoDB 버퍼 풀이나, 로그 버퍼와 같은 자료 구조도 가지고 있다.

Redo log (=WAL 로그, Write Ahead Log, 데이터를 디스크에 기록하기 전에 먼저 기록되는 로그)
DB서버에서 Redo log는 트랜잭션이 커밋되는 즉시 디스크로 기록되도록 설정을 권장한다. 커밋될 때마다 Redo log를 디스크에 기록하는 작업을 많은 부하를 유발한다.
디스크 동기화 주기 변수 - innodb_flush_log_at_trx_commit 
0: 1초에 한번씩 동기화 
1: 매번 트랜잭션이 커밋될 때마다 디스크로 기록되고 동기화까지 수행
2: 매번 트랜잭션이 커밋될 때마다 디스크로 기록되지만 실질적인 동기화는 1초에 한 번씩 
(2의 경우 mysql서버가 종료되도 OS가 정상적이라면 트랜잭션 데이터는 사라지지 않는다) -> 변경 내용이 OS의 메모리 버퍼로 기록되는 것이 보장돼서
innodb_flush_log_at_timeout - 디스크 동기화 시간 간격 

Redo log의 전체 크기는 버퍼 풀의 효율성을 결정하기에 중요하다
** Redo log 파일들의 전체 크기 = innodb_log_file_size 파일의 크기 * innodb_log_files_in_group 파일의 개수 **

로그 버퍼의 크기 - 16MB(default) 

Redo log Archiving
8.0부터 생긴 이 기능은 데이터 변경이 많아서 Redo log가 덮어쓰인다고 하더라도 백업이 실패하지 않게 해준다.
백업 툴이 아카이빙을 사용하려면 innodb_redo_log_archive_dirs에 디렉터리 설정해야 하며, mysql 서버 관리자만 접근이 가능해야한다.

mkdir /var/log/mysql_redo_archive
cd /var/log/mysql_redo_archive
mkdir 20211109
chmod 700 20211109
mysql> set global innodb_redo_log_archive_dirs='backup:/var/log/mysql_redo_archive';

innodb_redo_log_archive_start UDF 실행 
Do innodb_redo_log_archive_start('backup', '20211109'); // 1st 파라미터: Redo log를 아카이빙할 디렉터리에 대한 레이블, 2nd 파라미터: 서브디렉터리 이름
Do innodb_redo_log_archive_stop();

UDF를 정상적으로 종료하지 않고 세션이 비정상적으로 종료되면 아카이빙 멈추면서 아카이빙 파일도 자동으로 삭제된다.
하지만, UDF를 정상적으로 종료했다면 파일은 남게된다.

Redo log 비활성화 (8.0부터)
ALTER INSTANCE [DISABLE | ENABLE] INNODB REDO_LOG; // 데이터 복구, 대용량 데이터 적재 시간 단축
variable - InnoDB_redo_log_enabled 










