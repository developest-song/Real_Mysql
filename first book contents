환경 
CentOS 7 사용 
mysql 8.0.21 
 
mysql 설치 
yum으로 설치 (root로 진행)
yum repository 설치용 rpm 다운로드 ( dev.mysql.com/downloads/repo/yum )
mysql에 올리고 rpm -Uvh mysql80-community-release-el7-3.noarch.rpm

설치 가능한 mysql 소프트웨어 목록 yum search mysql-community 

설치가능한 버전 yum –showduplicates list mysql-community-server

실제 설치 yum install mysql-community-server-8.0.21

시작 systemctl start mysqld / 종료 systemctl stop mysqld

접속 /var/log/mysqld.log에 임시로 저장된 비밀번호 
mysql -u root -p  password : 

비밀번호 변경 (편의상 LOW로 변경)
기본 정책 : Medium / 8자리 이상 대문자 1자, 숫자 1자, 특수문자 1자 이상(validate_password%)
LOW – 비밀번호 길이만 검증
MEDIUM – 길이, 숫자, 대소문자, 특수문자 배합 검증
STRONG – MEDIUM + 금칙어 포함 여부 검증

alter user root@localhost identified by ‘test123’;
create user root@’%’ identified by ‘test123’;
grant all privileges on *.* to root@'%';  (계정생성과 권한을 따로 줘야한다)

toad 접속 시 - Unable to load authentication plugin 'caching_sha2_password'
vi /etc/my.cnf 추가 - default_authentication_plugin=mysql_native_password 

mysql -u root -p --host=localhost (socket을 통해 IPC 통신)
mysql -u root -p –host=127.0.0.1 (루프백 IP - TCP/IP 통신)

인플레이스 업그레이드 제약 사항
1)	동일 메이저 버전에서 마이너 버전 간 업그레이드할 경우 ex) 8.0.16 -> 8.0.21 
대부분 데이터 파일의 변경 없이 진행
2)	메이저 버전 간 업그레이드 일 경우 5.5 -> 5.6 가능 5.5 -> 5.7 or 8.0 지원하지 않음
데이터 파일의 패치 시 직전 메이저 버전에서 사용하던 데이터 파일과 로그 포맷만 인식하도록 구현되기 때문
* 새로운 버전을 선택할 때 최소 GA 버전은 지난(15~ 20번 이상) 마이너 버전을 선택
- 오라클에서 mysql 서버의 안정성이 확인된 버전을 의미 
인플레이스 업그레이드가 안 될수 있음 

mysql 8.0 업그레이드 시 고려사항
1)	사용자 인증 방식 변경 – Native Authentication -> Caching SHA-2 Authentication
2)	호환성 체크 : 손상된 FRM 파일, 호환되지 않는 데이터 타입, 함수 확인(mysqlcheck)
3)	외래키 이름의 길이 : 64글자로 제한 
4)	인덱스 힌트 : 8.0에서 힌트의 성능 테스트 필요 (성능 저하 유발 가능)
5)	group by 정렬 옵션 : ‘ASC’, ‘DESC’ 사용 시 제거하거나 다른 방식으로 변경
6)	공용 테이블스페이스 : 파티션의 각 테이블 스페이스를 공용 테이블스페이스에 저장할 수 없다. 확인 후 개별 테이블스페이스를 사용하도록 변경
 
시스템 변수
Cmd-Line – 명령행 인자로 설정될 수 있는지 여부 
Option File – my.cnf로 제어 가능한지 여부
System Var – 시스템 변수 여부
Var Scope – Global, Session, Both 영향 여부
Dynamic – 동적, 정적 변수 여부 (동적 : mysql 재시작하지 않고 변경 가능)

ex) show global variables like ‘%max_connections%’; 
max_connections 패턴으로 서버 전체 영향 미치는 변수를 조회 
both 타입의 변수 일 경우 set global로 변숫값 변경 시 session 값에는 영향이 없다

set persist 변수 변경과 함께 설정 파일(mysqld-auto.cnf : JSON형식)에 적용 
* 세션변수에는 적용 되지 않음
ex) set persist max_connections=5000;
ex) set persist_only max_connections=5000; // 설정파일에만 변경 내용 저장
특정 시스템 변수 삭제 
reset persist max_connections; // mysqld-auto.cnf 내용상 오류 차단을 위해 
reset persist;
 
사용자 및 권한
계정으로 로그인 할 때 같은 계정, 다른 IP일 경우 IP의 범위가 좁은 것을 우선으로 한다.
ex) test@192.168.0.132 > test@%
mysql.sys@localhost – sys 스키마의 객체들의 DEFINER 계정
mysql.session@localhost – mysql 플러그인이 서버로 접근할 때 사용되는 계정
mysql.infoschema@localhost – information_schema에 정의된 뷰의 DEFINER 계정

계정 생성
CREATE USER ‘user’@’%’
	IDENTIFIED WITH ‘mysql_native_password’ BY ‘password’ (인증방식 및 비밀번호)
		IDENTIFIED BY ‘password’ (서버의 기본 인증 방식 사용)
		 Caching SHA-2 Pluggable Authentication
SCRAM사용 5000번 암호화 해시 함수 실행(brute-force 대응, but 자원소모 큼)
	REQUIRE NONE // 서버 접속 시 암호화된 SSL/TLS 채널 사용 여부 설정
	PASSWORD EXPIRE INTERVAL 30 DAY // 비밀번호 유효기간 
	ACCOUNT UNLOCK // 계정 잠금 여부 
	PASSWORD HISTORY DEFAULT // 비밀번호 재사용 여부
	PASSWORD REUSE INTERVAL DEFAULT // 비밀번호 재사용 금지 기간 설정
	PASSWORD REQUIRE CURRENT DEFAULT; // 만료 후 새 설정, 현재 비밀번호 필요 여부

Dual Password – 2개의 비밀번호 중 한 개만 일치하면 로그인(Primary, Secondary)
ex) ALTER USER ‘root’@’localhost’ IDENTIFIED BY ‘new_password’ RETAIN CURRENT PASSWORD;
 
권한
객체 권한 - DB, Table 제어 시 필요한 권한
	GRANT 권한 부여 시 특정 객체 명시
	DB권한
	ex) GRANT EVENT ON *.* TO 'user'@'localhost';
	    GRANT EVENT ON employees.* TO 'user'@'localhost'; // 둘다 사용 가능, but 테이블에 까지는 적용 불가(db.table)
	테이블 권한
	ex) GRANT SELECT,INSERT,UPDATE,DELETE ON *.* TO 'user'@'localhost';
	    GRANT SELECT,INSERT,UPDATE,DELETE ON employees.department TO 'user'@'localhost';
	    GRANT SELECT,INSERT,UPDATE(dept_name) ON employees.department TO 'user'@'localhost'; // 컬럼 단위 권한
	** 칼럼 단위의 권한이 하나라도 설정되면 나머지 모든 테이블의 모든칼럼에 대해서도 권한 체크를 하기 때문에 전체적인 성능에 영향을 미칠 수 있음
	   꼭 필요하다면 뷰를 선택하는것도 방법 
	   
글로벌 권한 – DB, Table 이외의 객체에 적용되는 권한
	GRANT 권한 부여 시 특정 객체 명시X
	ex) GRANT SUPER ON *.* TO 'user'@'localhost'; // 특정 DB, 테이블에 부여하지 못하기에 항상 *.* 사용
예외적으로 ALL은 글로벌, 객체 권한 두 가지 용도로 사용 가능
	8.0부터 동적 권한 추가
동적 권한 – mysql 서버의 컴포넌트나 플러그인이 설치되면 그때 등록되는 권한 

Role - 권한을 묶어서 역할로 사용
ex)
create role role_emp_read, role_emp_write; // 껍데기 선언
grant select on employees.* to role_emp_read; // 권한 부여
grant insert, update, delete on employees.* to role_emp_write; // 권한 부여
create user reader@'127.0.0.1' identified by 'qwerty12'; // 계정 생성
create user writer@'127.0.0.1' identified by 'qwerty12'; // 계정 생성
grant role_emp_read to reader@'127.0.0.1'; // 역할 부여
grant role_emp_read, role_emp_write to writer@'127.0.0.1' // 역할 부여
set role 'role_emp_read'; // 역할 활성화
select current_role(); // 역할 확인
activate_all_roles_on_login=ON // 역할 자동화 활성 변수

역할과 계정은 동일한 객체로 취급 (관리자 입장에서 prefix를 지정해서 관리해야함)

아키텍처
머리를 담당하는 Mysql엔진, 손발을 담당하는 스토리지 엔진으로 나누어짐 
Mysql엔진 - 커넥션 핸들러, SQL파서, 전처리기, 옵티마이저 
스토리지엔진 - 실제 데이터를 디스크 스토리지에 저장하거나 디스크 스토리지로부터 데이터를 읽어온다. (InnoDB(버퍼풀), MyISAM(키캐시), Memory ...)
핸들러 API - Mysql엔진의 쿼리실행기에서 데이터를 쓰거나 읽을 때, 각 스토리지 엔진에 쓰기, 읽기를 요청함 
	show global status like 'handler%'; (핸들러 API를 통한 데이터 작업량 확인)

Mysql 스레딩 구조 - 스레드 기반으로 작동, 포그라운드 + 백그라운드 (performance_schema.threads - 실행중인 스레드 목록)
포그라운드 스레드 - mysql 서버에 접속된 클라이언트의 수만큼 존재, 커넥션 종료 시 스레드 캐시로 돌아가며, 대기중인 개수가 일정이상일 경우 스레드 종료
 유지하는 최대 스레드 개수 - thread_cache_size 변수 
 MyISAM - 데이터 버퍼, 캐시로부터 데이터를 가져오고, 디스크 쓰기 작업까지
 InnoDB - 데이터 버퍼, 캐시까지만 디스크 쓰기는 백그라운드 스레드가 처리
 이처럼 나누어  InnoDB는 쓰기 전까지 기다리지 않고 SELECT만 가능
백그라운드 스레드 - InnoDB의 백그라운드 스레드
 인서트버퍼 병합 스레드
 로그 스레드
 쓰기 스레드
 읽기 스레드
 잠금, 데드락 모니터링 스레드
 읽기, 쓰기 스레드 갯수 지정 변수 - innodb_read_io_threads, innodb_write_io_threads 

