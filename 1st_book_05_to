< 트랜잭션 >
잠금 - 동시성을 제어하기 위한 기능
트랜잭션 - 데이터 정합성을 보장하기 위한 기능

Mysql에서의 트랜잭션
** 하나의 논리적인 작업 셋에 쿼리의 갯수와 상관 없이 작업 셋 자체가 100%로 적용 되거나(COMMIT)
아무것도 적용되지 않아야 함을 보장해주는 것이다. **
MyISAM과 InnoDB에서의 작업 비교
1) Table을 만들고 3(pk)을 insert 한다. 
2) 1, 2, 3 insert
3) MyISAM은 1,2는 insert 되고 3에서 쿼리 중단 // InnoDB는 쿼리 자체가 중단
* MyISAM에서 Partial Update(부분 업데이트)가 일어나게 된다.

주의사항 - 프로그램 코드에서 트랜잭션의 범위를 최소화해야 한다.
DBMS의 트랜잭션은 저장되는 부분을 넣고
메일 전송, FTP 파일전송 등 네트워크 통신 관련은 제거, 
성격이 다른 것도 구분해서 범위 수정해야 한다. 

Mysql 엔진의 잠금
Mysql 엔진 레벨의 잠금은 모든 스토리지 엔진에 영향을 미치지만, 스토리지 엔진 레벨의 잠금은 스토리지 엔진 간 상호 영향을 미치지는 않는다. 

글로벌 락 - FLUSH TABLES WITH READ LOCK // 범위가 가장 큰 잠금 
범위 - Mysql 서버 전체, DDL DML 실행 대기(SELECT 제외) 
테이블이나 데이터베이스가 달라도 동일하게 영향을 미친다.
또한, 락을 획득하기 위해서는 모든 종류의 쿼리가 완료되어야 한다.
8.0부터는 InnoDB가 기본 스토리지 엔진으로 채택되면서 조금 더 가벼운 글로벌 락의 필요성이 생겼다.
Xtrabackup, Enterprise Backup과 같은 백업 툴들의 안정적인 실행을 위해 백업 락이 도입 됐다.
mysql> LOCK INSTANCE FOR BACKUP; // 실행
mysql> UNLOCK INSTANCE;
특정 세션에서 백업 락을 획득 시 다음과 같은 정보 변경 불가
- 데이터베이스 및 테이블 등 모든 객체 생성 및 변경, 삭제
- REPAIR TABLE과 OPTIMIZE TABLE 명령
- 사용자 관리 및 비밀번호 변경

하지만 일반적인 테이블의 데이터 변경은 허용.

테이블 락 - 개별 테이블 단위로 설정되는 잠금 
명시적 : LOCK TABLES table_name [ READ | WRITE ] // UNLOCK TABLES 
묵시적 : MyISAM이나 MEMORY 테이블에 데이터를 변경하는 쿼리를 실행하면 발생한다.
        InnoDB) 스토리지 엔진 차원에서 레코드 기반의 잠금 제공 & 테이블 락이 설정되지만 대부분의 DML 쿼리에서는 무시되고 스키마 변경하는 DDL의 경우에만 영향을 미침

네임드 락 - GET_LOCK() 함수를 이용해 임의의 문자열에 대해 잠금을 설정. 단순히 사용자가 지정한 문자열에 대해 획득하고 반납(해제)
많은 레코드에 대해서 복잡한 요건으로 레코드를 변경하는 트랜잭션에 유용하게 사용. (8.0부터 네임드 락 중첩가능, 한 번에 해제 가능 )

메타데이터 락 - 데이터베이스 객체의 이름이나 구조를 변경하는 경우 획득하는 잠금. 명시적 획득 불가
RENAME TABLE tab_a TO tab_b // 원본 이름, 변경될 이름 모두 한꺼번에 잠금
ex) 임시 rank_new를 rank로 올리기 위해 이름 변경할 경우 
mysql> RENAME TABLE rank TO rank_backup, rank_new TO rank; // 한 꺼번에 실행 시 table not found없이 가능 

트랜잭션과 같이 사용할 경우 : +트랜잭션 +key_block_size (p166)

InnoDB 스토리지 엔진 잠금
Mysql에서 제공하는 잠금과는 별개로 스토리지 엔진 내부에서 레코드 기반의 잠금 방식을 탑재 -> MyISAM보다 훨씬 뛰어난 동시성 처리 제공
But) 이원화된 잠금 처리 탓에 잠금 정보는 Mysql 명령을 이용해 정보를 접근하기 까다로움 
1) lock_monitor
2) SHOW ENGINE INNODB STATUS

최근 버전에서는 InnoDB의 트랜잭션, 잠금, 잠금 대기 중인 트랜잭션의 목록을 조회 할 수 있음
information_schema [ INNODB_TRX, TNNODB_LOCKS, INNODB_LOCK_WAITS ] 조인해서 조회
performance_schema를 이용해 스토리지 엔진의 내부 잠금에 대한 모니터링 방법도 추가 

락 그림 (p167)
레코드 락 - 레코드 자체만 잠그는 것을 레코드 락, 다른 상용 DBMS의 레코드 락과 동일한 역할
하지만, InnoDB 스토리지 엔진은 레코드 자체가 아니라 인덱스의 레코드를 잠근다 *
인덱스가 하나도 없는 테이블이더라도 내부적으로 자동 생성된 클러스터 인덱스를 이용해 잠금을 설정한다.

갭 락
레코드와 바로 인접한 레코드 사이의 간격만을 잠그는 것 
레코드와 레코드 사이의 간격에 새로운 레코드가 생성되는 것을 제어하는 것 

넥스트 키 락
레코드 락과 갭 락을 합쳐 놓은 형태의 잠금
STATEMENT 포맷의 binlog를 사용하는 Mysql서버에서는 REPEATABLE READ 격리 수준을 사용해야 한다. 
innodb_locks_unsafe_for_binlog 변수 비활성화 시 변경을 위해 검색을 하는 레코드에는 넥스트 키 락 방식으로 잠금이 걸린다.
갭 락, 넥스트 키 락은 binlog에 기록되는 쿼리가 레플리카 서버에서 실행될 때 소스 서버에서 만들어 낸 결과와 동일한 결과를 만들어내도록 보장하는 것이 주목적이다 .
가능하다면 binlog_format을 ROW로 바꿔서 넥스트 키 락이나 갭 락을 줄이는게 좋다 
** binlog_format [ MIXED | ROW ] 에 대한 고찰, 성능은 ROW가 좋지만 안정성에 대한 문제?? **

자동 증가 락
자동 증가하는 숫자 값을 추출하기 위해 내부적으로 AUTO_INCREMENT 락 ( 테이블 수준의 잠금 )
INSERT, REPLACE 새로운 레코드를 저장하는 쿼리에서만 필요
UPDATE, DELETE 쿼리에서는 걸리지 않음
명시적으로 획득, 해제 방법은 없음
(5.1 이후)
innodb_autoinc_lock_mode = 0
5.0과 동일한 잠금 방식, 모든 INSERT 문장은 자동 증가 락을 사용

innodb_autoinc_lock_mode = 1 
1) Mysql서버가 INSERT되는 레코드의 건수를 정확히 예측할 수 있을때는 자동 증가 락을 사용하지 않고, 훨씬 가볍고 빠른 래치(Mutex)를 이용해 처리 - 아주 짧은 시간 동안만 잠금을 걸고 필요한 자동 증가 값을 가져오면 즉시 잠금이 해제.
2) 예측 할 수 없으면 자동 증가 락 사용

한 번에 할당 받은 자동 증가 값이 남아서 사용되지 못하면 폐기하므로, 대량 INSERT 문장의 실행 이후에 INSERT 되는 레코드의 자동 증가 값은 연속되지 않고 누락된 값이 발생할 수 있다.
최소한 하나의 INSERT 문장으로 INSERT되는 레코드는 연속된 자동 증가 값을 가지게 된다. 그래서 연속모드 라고도 한다.

innodb_autoinc_lock_mode = 2
절대 자동 증가 락을 걸지 않고 경량화된 래치를 사용. 하나의 INSERT 문장으로 INSERT되는 레코드라고 하더라도 연속된 자동 증가 값을 보장하진 않는다. 그래서 인터리빙 모드라고도 한다.
INSERT 중에 다른 커넥션에서 INSERT 수행 가능, 유니크한 값이 생성된다는 것만 보장한다. 
--> STATEMENT 포맷 Replication에서 자동 증가 값이 달라질 수 있음에 주의 *
(5.7까지는 default 1, 8.0부터는 default 2 : 이유는 binlog_format default가 ROW가 돼서. STATEMENT 사용시 innodb_autoinc_lock_mode = 1 권장 )

인덱스와 잠금 - innodb의 잠금은 레코드를 잠그는 것이 아니라 인덱스를 잠그는 방식으로 처리된다.
ex) ix_firstname 인덱스가 있고, first_name = 'Georgi' 사원 253명 , first_name = 'Georgi' & last_name = 'Klassen' 사원 1명 전제
first_name = 'Georgi' & last_name = 'Klassen'인 사원의 hire_date를 UPDATE한다면 락을 걸어야하는 레코드의 개수는 ?
-> 253개 레코드 락
만약 ix_firstname 인덱스가 없었다면 위의 UPDATE를 하기 위해선 해당 테이블을 풀스캔하여 전체 락을 걸었어야 함. 인덱스의 중요성 !

레코드 수준의 잠금 확인 및 해제
레코드 수준의 잠금은 레코드 각각에 잠금이 걸리므로, 자주 사용하지 않는 레코드라면, 발견되지 않고 남아 있을 수 있음.
5.1 이후)
information_schema. INNODB_TRX, INNODB_LOCKS, INNODB_LOCK_WAITS
8.0 이후)
performance_schema. data_locks, data_lock_waits

8.0)
select r.trx_id as waiting_trx_id, 
       r.trx_mysql_thread_id as waiting_thread, // 기다리는 thread 
       r.trx_query as waiting_query,
       b.trx_id as blocking_trx_id,
       b.trx_mysql_thread_id as blocking_thread, // 해당 thread가 기다리고 있는 thread
       b.trx_query as blocking_query
  from performance_schema.data_lock_waits w inner join information_schema.innodb_trx b
    on b.trx_id = w.blocking_engine_transaction_id inner join information_schema.innodb_trx r
    on r.trx_id = w.requesting_engine_transaction_id;

select * from information_schema.INNODB_TRX;

Mysql의 격리 수준
트랜잭션의 격리 수준이란 여러 트랜잭션이 동시에 처리될 때 특정 트랜잭션이 다른 트랜잭션에서 변경하거나 조회하는 데이터를 볼 수 있게 허용할지 말지를 결정하는 것이다.
4가지 - READ UNCOMMITTED, READ COMMITTED, REPEATABLE READ, SERIALIZABLE // 뒤로 갈수록 격리 정도가 높고, 동시 처리 성능이 떨어짐
DIRTY READ(=UNCOMMITTED)는 일반적인 데이터베이스에서 거의 사용하지 않고, SERIALIZABLE 또한 동시성이 중요한 데이터베이스에서는 거의 사용하지 않는다
오라클 - 주로 READ COMMITTED / MySQL - 주로 REPEATABLE READ
설명 예제 전제 - AUTO COMMIT = OFF

1. READ UNCOMMITTED 
- 각 트랜잭션에서의 변경 내용이 COMMIT이나 ROLLBACK 여부에 상관없이 다른 트랜잭션에서 보인다. // 정합성에 문제가 많음
DIRTY READ - 어떤 트랜잭션에서 처리한 작업이 완료되지 않았는데도 다른트랜잭션에서 볼 수 있는 현상(READ UNCOMMITTED에서 DIRTY READ 허용)

2. READ COMMITTED (Oracle DBMS에서 기본으로 사용)
- 어떤 트랜잭션에서 변경한 내용이 커밋되기 전까지는 다른 트랜잭션에서 그러한 변경 내역을 조회할 수 없다.
UPDATE이후 다른 트랜잭션에서 SELECT하면(COMMIT 이전) UPDATE 이전 내용을 언두 로그에 저장해뒀다가 언두 로그에 있는 내용을 RETURN해준다.
NON-REPEATABLE READ 부정합의 발생 - 한 트랜잭션 내에서 똑같은 SELECT을 했을 때 항상 같은 결과를 반환 하지 않을 수 있음(p179)
* 트랜잭션 내에서 실행되는 SELECT와 없이 실행되는 SELECT의 차이는 크다. 

3. REPEATABLE READ (Mysql InnoDB 스토리지 엔진에서 기본으로 사용)
- NON-REPEATABLE READ 부정합이 발생하지 않음
InnoDB 스토리지 엔진은 트랜잭션이 ROLLBACK될 가능성에 대비해 변경되기 전 레코드를 언두 공간에 백업해두고 실제 레코드 값을 변경한다(MVCC)
READ COMMITTED도 MVCC를 이용하지만, REPEATABLE READ, READ COMMITTED의 차이는 언두 영역에 백업된 레코드의 여러 버전 가운데 몇 번째 이전 버전까지 찾아 들어가야 하느냐에 있다.
MVCC를 보장하기 위해 실행 중인 트랜잭션 가운데 가장 오래된 트랜잭션 번호보다 트랜잭션 번호가 앞선 언두 영역의 데이터는 삭제할 수가 없다.
PHANTOM READ(PHANTOM ROW) - INSERT전과 후의 SELECT의 결과가 다름 <<-- SELECT ... FOR UPDATE, SELECT ... LOCK IN SHARE MODE로 조회되는 레코드는 현재 레코드의 값을 가져옴 

4. SERIALIZABLE 
- 가장 단순하고, 가장 엄격한 격리 수준. 동시 처리 성능 제일 낮음.
읽기 작업도 공유 잠금(읽기 잠금)을 획득해야만 한다. 
-> 한 트랜잭션에서 읽고 쓰는 레코드를 다른 트랜잭션에서는 절대 접근할 수 없다. 
PHANTOM READ 발생하지 않음 
-> InnoDB에서는 갭 락과 넥스트 키 락 덕분에 PHANTOM READ가 발생하지 않는다. 

< 데이터 압축 >
페이지 압축(=Transparent Page Compression)
디스크에 저장 하는 시점에 데이터 페이지가 압축되어 저장, 디스크에서 데이터 페이지를 읽어올 때 압축이 해제 됨.
-> 버퍼 풀에 데이터 페이지가 한 번 적재되면 압축이 해제된 상태로만 데이터 페이지를 관리한다.
펀치 홀 기능
1. 16KB 페이지를 압축(압축 결과 7KB 가정)
2. Mysql 서버는 디스크에 압축된 결과 7KB를 기록 ( 이때 Mysql 서버는 압축 데이터 7KB에 9KB의 빈 데이터를 기록)
3. 디스크에 데이터를 기록한 후, 7KB 이후의 공간 9KB에 대해 펀치 홀을 생성
4. 파일 시스템은 7KB만 남기고 나머지 디스크의 9KB 공간은 다시 운영체제로 반납
하지만, 운영체제에서 16KB를 읽으면 압축된 데이터 7KB와 펀치 홀 공간인 9KB를 합쳐서 16KB를 읽는다.
문제 
- H/W자체에서도 해당 기능을 지원해야함.
- 아직 파일 시스템 관련 명령어가 펀치 홀을 지원하지 못함.
// 테이블 생성 시
mysql> CREATE TABLE t1 (c1 INT) COMPRESSION="zlib";
// 테이블 변경 시
mysql> ALTER TABLE t1 COMPRESSION="zlib";
mysql> OPTIMIZE TABLE t1;

테이블 압축 
운영체제나 하드웨어에 대한 제약 없이 사용 가능. 일반적으로 활용도가 높음
단점 
- 버퍼 풀 공간 활용률이 낮음
- 쿼리 처리 성능이 낮음
- 빈번한 데이터 변경시 압축률이 떨어짐

압축 테이블 생성
테이블 압축을 사용하기 위한 전제 조건으로 
1. 압축을 사용하려는 테이블이 별도의 테이블 스페이스를 사용해야 한다. (innodb_file_per_table = ON 상태에서 테이블이 생성)
2. ROW_FORMAT=COMPRESSED, KEY_BLOCK_SIZE=2n 옵션 명시
// InnoDB 스토리지 엔진의 페이지 크기(innodb_page_size)가 16KB라면 KEY_BLOCK_SIZE는 4KB, 8KB만 가능. 페이지 크기가 32KB, 64KB인 경우는 테이블 압축 불가
압축 알고리즘
1. 16KB의 데이터 페이지 압축
 1.1 압축 결과 8KB 이하 -> 디스크 저장
 1.2 압축 결과 8KB 초과 -> 페이지 스플릿 
2. 스플릿한 결과 다시 1부터 실행
// 목표 크기가 크게 잘못 설정 될 경우 위의 알고리즘이 반복되어 서버의 처리 성능이 급격힐 떨어질 수 있음

KEY_BLOCK_SIZE 결정
KEY_BLOCK_SIZE를 4KB, 8KB로 테이블을 생성해서 샘플 데이터를 저장 후 판단.  10개이상 테스트 권장

압축 테스트)
CREATE TABLE employees.employees_comp4k(
  emp_no int NOT NULL,
  birth_date date NOT NULL,
  first_name varchar(14) NOT NULL,
  last_name varchar(16) NOT NULL,
  gender enum('M','F') NOT NULL,
  hire_date date NOT NULL,
  PRIMARY KEY (emp_no),
  KEY ix_firstname (first_name),
  KEY ix_hiredate (hire_date)
  ) ROW_FORMAT=COMPRESSED KEY_BLOCK_SIZE=4;
  

mysql> set global innodb_cmp_per_index_enabled=ON; 
// ON <- 인덱스별로 압축 실행 수와 성공 횟수가 기록됨 

mysql> INSERT INTO employees_comp4k SELECT * FROM employees;

mysql> SELECT
		table_name, index_name, compress_ops, compress_ops_ok,
		(compress_ops-compress_ops_ok)/compress_ops * 100 as compression_failure_pct
		 FROM information_schema.INNODB_CMP_PER_INDEX;

compression_failure_pct // 압축 실패율, 3~5% 미만으로 유지가능토록 KEY_BLOCK_SIZE 선택

ls -alh data/employees/employees*.ibd
-> 원본 table_size 30M -> 4K, 8K 압축 table_size 20M
* 주의해야 할 것 
압축 실패율이 높다고 압축을 사용하지 말아야 한다는 것은 아니고, INSERT된 데이터가 이후 변경되지 않는다면 압축을 권하고,
압축 실패율이 낮은 경우 테이블의 데이터가 매우 빈번하게 조회되고 변경된다면 압축은 고려하기 어렵다.

압축된 페이지의 버퍼 풀 적재 및 사용
InnoDB 스토리지 엔진은 압축된 테이블의 데이터 페이지를 버퍼 풀에 적재하면, 디스크에서 읽은 상태 그대로의 데이터 페이지 목록을 관리하는 LRU 리스트와
압축된 페이지들의 압축 해제 버전인 Unzip_LRU리스트를 별도로 관리하게 된다.

Mysql 서버는 압축된 테이블과 압축되지 않은 테이블이 공존하므로 결국 LRU 리스트는 
압축이 적용되지 않은 테이블의 데이터 페이지, 압축이 적용된 테이블의 압축된 데이터 페이지 모두를 가진다. 
그리고 Unzip_LRU리스트는 압축이 적용되지 않은 테이블의 데이터 페이지는 가지지 않으며, 압축이 적용된 테이블에서 일긍ㄴ 데이터 페이지만 관리한다.
InnoDB는 결국 압축된 테이블에 대해서는 버퍼 풀의 공간을 이중으로 사용하여 메모리를 낭비하고, 압축된 페이지를 읽거나 변경 시 압축 해제를 하는데, 이 작업은 CPU를 상대적으로
많이 소모하는 작업이다. 이 단점을 보완하기 위해 Unzip_LRU리스트를 별도로 관리하고 있따가 요청 패턴에 따라 적절히 처리 한다.
1. 버퍼 풀 공간이 필요함 -> LRU 원본은 유지, Unzip_LRU 압축 해제 버전을 제거 공간 확보
2. 압축 페이지 자주 사용 -> Unzip_LRU에 압축 헤제된 페이지를 계속 유지하여, 압축 및 압축 해제 작업을 최소화
3. 압축 페이지 미사용으로 LRU에서 제거 될 경우 -> Unzip_LRU에서도 함께 제거

압축 해제 버전 페이지의 적절한 수준 유지를 위한 어댑티브 알고리즘 
CPU 사용량 높음 -> 압축, 압축 해제 최소화를 위한 Unzip_LRU 비율 높임
Disk I/O 높음 -> Unzip_LRU 비율 낮춰서 버퍼 풀 공간 확보

테이블 압축 관련 설정 (페이지의 압축 실패율을 낮추기 위해 필요한 튜닝포인트 제공)

innodb_cmp_per_index_enabled - 테이블 압축이 사용된 테이블의 모든 인덱스별로 압축 성공 및 압축 실행 횟수를 수집하도록 설정. 비활성화 시 테이블 단위의 압축 성공 및 압축 실행 횟수만 수집됨.
테이블 단위 수집 정보 information_schema.INNODB_CMP
인덱스 단위 수집 정보 information_schema.INNODB_CMP_PER_INDEX

innodb_compression_level - InnoDB의 테이블 압축(zlib 알고리즘)에서의 압축률 설정 
0~9까지 값과 압축 속도(걸리는 시간)는 반비례, 압축률과는 정비례한다. 기본값은 6으로 압축 속도와 압축률 중간 정도.
압축 속도가 빨라 질 수록 CPU자원을 적게 소모함

innodb_compression_failure_threshold_pct, innodb_compression_pad_pct 
테이블 단위로 압축 실패율이 innodb_compression_failure_threshold_pct 시스템 설정값보다 커지면 압축을 실행하기 전 원본 데이터 페이지의 끝에 의도적으로 일정 크기의 빈 공간을 추가한다.
즉, 추가된 빈 공간은 압축률을 높여서 압축 결과가 KEY_BLOCK_SIZE보다 작아지게 만드는 효과를 낸다. 추가하는 빈 공간을 패딩이라 하며, 패딩 공간은 압축 실패율이 높아질수록 계속 증가된 크기를 가지는데,
추가할 수 있는 패딩 공간의 최대 크기는 innodb_compression_pad_pct 시스템 설정값 이상을 넘을 수 없다.
innodb_compression_pad_pct는 %값을 설정한다. 전체 데이터 페이지 크기 대비 패딩 공간의 비율을 의미한다.

innodb_log_compressed_pages - Mysql 서버가 비정상적으로 종료됐다가 다시 시작되는 경우 압축 알고리즘(zlib)의 버전 차이가 있더라도 복구 과정이 실패하지 않도록 InnoDB 스토리지 엔진은 압축된 데이터 페이지를
그대로 리두 로그에 기록한다. 통째로 저장하다 보니 리두 로그의 증가량에 상당한 영향을 미칠 수 있다. 기본값은 ON

< 데이터 암호화 >
5.7부터 지원되기 시작했고, 처음에는 데이터 파일(테이블스페이스)에 대해서만 암호화 기능이 제공됐다. 
8.0으로 업그레이드되면서 데이터 파일뿐만 아니라 Redo log, Undo log, 복제를 위한 Binary log 등도 모두 암호화 기능을 지원하기 시작했다.

Mysql 서버의 데이터 암호화 
Mysql 서버의 암호화 기능은 데이터베이스 서버와 디스크 사이의 데이터 읽고 쓰기 지점에서 암호화 또는 복호화를 수행한다. (p196)
그 외의 부분에서는 암호화 처리가 전혀 필요하지 않고 I/O 레이어에서만 실행되는 것이다.
데이터 암호화 기능이 활성화돼 있다고 하더라도 Mysql 내부와 사용자 입장에서는 아무런 차이가 없다 
-> TDE(Transparent Data Encryption), Data at Rest Encryption //Data at Rest(디스크 저장 단계에서만 암호화 된다는 의미)

2단계 키 관리 - 암호화 아키텍처(p197)
Mysql 서버의 TDE에서 암호화 키는 키링 플러그인에 의해 관리된다.
keyring_file 		File-Based 플러그인 		 // 커뮤니티 에디션 사용가능 
keyring_encrypted_file	Keyring 플러그인 			 // 엔터프라이즈 에디션 사용가능 
keyring_okv		KMIP 플러그인			 // 엔터프라이즈 에디션 사용가능
keyring_aws		Amazon Web Services Keyring 플러그인 // 엔터프라이즈 에디션 사용가능
-> 마스터 키를 관리하는 방법만 다르고 서버 내부적으로 작동하는 방식은 모두 동일하다

Mysql 서버의 데이터 암호화는 마스터 키와 테이블스페이스 키라는 두 가지 종류의 키를 가지고 있는데, 테이블스페이스 키는 프라이빗 키라고도 한다.
Mysql 서버는 HashiCorp Vault 같은 외부 키 관리 솔루션 또는 디스크의 파일에서 마스터 키를 가져오고, 암호화된 테이블이 생성될 때마다 해당 테이블을 위한 임의의 테이블스페이스 키를 발급한다.
그리고 Mysql 서버는 마스터 키를 이용해 테이블스페이스키를 암호화해서 각 테이블의 데이터 파일 헤더에 저장한다. 이렇게 생성된 테이블스페이스 키는 테이블이 삭제되지 않는 이상 절대 변경되지 않는다.
또 테이블스페이스 키는 절대 Mysql 서버 외부로 노출되지 않기에 주기적으로 변경하지 않아도 보안상 취약점이 되지 않는다.
하지만 마스터 키는 외부 파일을 이용하기 때문에 노출 가능성이 있어 주기적으로 변경해야 한다.
mysql> ALTER INSTANCE ROTATE INNODB MASTER KEY;

마스터 키 변경 시 기존의 마스터 키로 테이블들의 테이블스페이스 키를 복호화 후 새로운 마스터 키로 암호화 한다. 마스터 키가 변경되는 동안 테이블스페이스 키 자체, 데이터 파일의 데이터는 전혀 변경 되지 않는다.
2단계 암호화 방식을 사용하는 이유는 키 변경으로 인한 시스템 부하를 피하기 위해서다. 만약 테이블스페이스 키가 변경된다면 데이터 파일의 모든 데이터를 다시 복호화했다가 다시 암호화해야 하는 부하를 갖게 된다.
TDE에서 지원되는 암호화 알고리즘은 AES 256비트(이외의 알고리즘은 지원되지 않음), 테이블 스페이스 키는 AES-256 ECB, 실제 데이터 파일은 AES-256 CBC 알고리즘을 이용해 암호화된다. 

암호화와 성능 
TDE방식 이기 때문에 디스크로부터 한 번 읽은 데이터 페이지는 복호화되어 InnoDB의 버퍼 풀에 적재된다. 그래서 데이터 페이지가 한 번 메모리에 적재되면 암호화되지 않은 테이블과
동일한 성능을 보인다. 하지만 쿼리가 버퍼풀에 존재하지 않을 경우 복호화 과정이 생겨 쿼리 처리가 지연 된다. 그리고 암호화된 테이블이 변경될 경우 디스크 동기화 시 또 암호화 해야하기에
저장도 지연되지만, 사용자의 쿼리 스레드가 아닌 백그라운드 스레드가 수행하기에 사용자쿼리가 지연되는 것이 아니다.
AES 암호화 알고리즘은 평문의 길이가 짧은 경우 암호화 키의 크기에 따라 용량이 커질 수 있지만, 이미 데이터 페이지는 암호화 키보다 훨씬 크기에 그 결과가 평문의 결과와 동일한 크기로 반환된다.
즉 TDE를 적용한다 해서 InnoDB 버퍼 풀의 효율이 달라지거나 메모리 사용 효율이 떨어지는 현상은 발생하지 않는다.
* 같은 테이블에 대해 암호화, 압축이 동시에 적용 될 경우 압축을 먼저 실행함
이유 
1) 암호화의 결과문은 랜덤한 바이트의 배열을 가지게 되고, 이는 압축률을 상당히 떨어트림
2) 암호화된 테이블의 데이터 페이지는 복호화된 상태로 InnoDB 버퍼 풀에 저장되지만, 압축된 데이터 페이지는 압축, 압축 해제의 모든 상태로 InnoDB 버퍼 풀에 존재할 수 있다.
만약 순서가 바뀐다면 InnoDB 버퍼 풀에 존재하는 데이터 페이지에 대해서도 매번 암복호화 작업을 수행해야 된다
암호화된 테이블과 아닌 테이블의 R/W Latency 비교(p200)

암호화와 복제
TDE를 이용한 암호화 사용 시 마스터와 슬레이브 간의 키(마스터 키, 테이블스페이스 키)는 다르게 설정해야 한다. 원격, 로컬 관리의 경우 둘다(레플리카로 복제되지 않음)
결국 실제 암호화된 데이터가 저장된 데이터 파일의 내용은 완전히 달라진다.
마스터에서 ALTER INSTANCE ROTATE INNODB MASTER KEY 실행 시 SLAVE서버에서 명령 적용이 되지만 키가 전달 되는 것은 아니고 각자 다른 키로 적용된다.
TDE의 Key Ring파일을 백업해두어야 데이터 복구를 할 수 있다. + TDE의 마스터 키 변경 일자도 기록해 두어야 한다.

keyring_file 플러그인 설치







