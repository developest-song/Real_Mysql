< 인덱스 >

디스크 읽기 방식
데이터베이스의 성능 튜닝은 어떻게 디스크 I/O를 줄이느냐가 관건일 때가 상당히 많다.

하드 디스크 드라이브(HDD)와 솔리드 스테이트 드라이브(SSD)
메모리와 디스크의 처리속도 10만 배 이상의 차이 / 메모리와 SSD 1000배 가량의 차이
한 번에 많은 데이터를 읽는 순차 I/O - SSD와 HDD 거의 비슷하거나 SSD가 조금 빠름
랜덤 I/O - SSD가 훨씬 빠름

랜덤 I/O, 순차 I/O 
(그림 p216)  HDD에서 순차 I/O는 디스크 기록을 위해 1번 시스템 콜 요청
랜덤 I/O는 3번 시스템콜을 요청 
-> 디스크의 헤드를 움직이는 횟수 
-> 순차가 랜덤보다 3배 빠르다

헤드의 유무로 원판을 가지지 않는 SSD는 랜덤, 순차 I/O 차이가 없을 것으로 예측하지만,
실제로 랜덤I/O는 순차 I/O보다 전체 스루풋이 떨어진다.
** 쿼리를 튜닝하는 것은 랜덤 I/O 자체를 줄여주는 것이 목적이라고 할 수 있다.(쿼리를 처리하는데 꼭 필요한 데이터만 읽도록 쿼리를 개선하는 것을 의미)

인덱스 레인지 스캔 - 랜덤 I/O 
풀 테이블 스캔 - 순차 I/O (큰 테이블의 레코드 대부분을 읽는 작업에서는 인덱스를 사용하지 않고 풀 테이블 스캔을 사용하도록 유도할 때도 있다) // 데이터 웨어하우스, 통계 작업

인덱스란
책의 맨 끝 찾아보기 - 인덱스
책의 내용 - 데이터 파일
페이지 번호 - 레코드의 주소
책의 ㄱㄴㄷ정렬 - 인덱스의 정렬 보관

SortedList - 인덱스 (저장되는 값을 항상 정렬된 상태로 유지하는 자료 구조)
ArrayList - 데이터 파일 (저장된 순서대로 별도의 정렬 없이 그대로 저장)

인덱스가 많은 테이블은 INSERT, UPDATE, DELETE 문장의 처리가 느려진다. BUT, SELECT는 매우 빠르게 처리

인덱스는 INSERT, UPDATE, DELETE 성능을 희생하고 읽기 속도를 높이는 기능 

프라이머리 키는 이미 잘 아는 것처럼 그 레코드를 대표하는 칼럼의 값으로 만들어진 인덱스를 의미한다. 이 칼럼은 테이블에서 해당 레코드를 식별할 수 있는 기준값이 되기 때문에 
우리는 이를 식별자라고도 부른다. 프라이머리 키는 NULL 값을 허용하지 않으며 중복을 허용하지 않는 것이 특징이다.

프라이머리 키를 제외한 나머지 모든 인덱스는 세컨더리 인덱스로 분류한다. 유니크 인덱스는 프라이머리 키와 성격이 비슷하고 프라이머리 키를 대체해서 사용할 수도 있다고 해서 대체 키라고도 하는데,
별도로 분류하기도 하고 그냥 세컨더리 인덱스로 분류하기도 한다.

알고리즘 별 분류
B-Tree 알고리즘 - 가장 일반적으로 사용되는 인덱스 알고리즘으로서, 상당히 오래전에 도입된 알고리즘이며 그만큼 성숙해진 상태다. B-Tree 인덱스는 칼럼의 값을 변형하지 않고
원래의 값을 이용해 인덱싱하는 알고리즘이다. Mysql 서버에서는 위치 기반 검색을 지원하기 위한 R-Tree 인덱스 알고리즘도 있지만, 결국 R-Tree 인덱스는 B-Tree의 응용 알고리즘으로 볼 수 있다.

Hash 인덱스 알고리즘 - 칼럼의 값으로 해시값을 계산해서 인덱싱하는 알고리즘으로, 매우 빠른 검색을 지원한다. 하지만 값을 변형해서 인덱싱하므로 전방(Prefix) 일치와 같이
값의 일부만 검색하거나 범위를 검색할 때는 해시 인덱스를 사용할 수 없다. Hash 인덱스는 주로 메모리 기반의 데이터베이스에서 많이 사용한다.

이외에 Fractal-Tree 인덱스, 로그 기반의 Merge-Tree 인덱스와 같은 알고리즘 사용하는 DBMS도 개발되고 있다.

데이터의 중복 허용 여부별 분류
Unique, Non-Unique

인덱스의 기능별 분류
전문 검색용 인덱스, 공간 검색용 인덱스 등

* B-Tree 인덱스 (Balanced Tree)
가장 일반적, 가장 먼저 도입, 가장 범용적인 목적으로 사용되는 인덱스 알고리즘 (p221 구조 그림)
루트노드 - 최상위 노드
브랜치노드 - 중간 노드
리프노드 - 최하위 노드 / 항상 실제 데이터 레코드를 찾아가기 위한 주솟값을 가짐
/// 대부분의 RDBMS는 정렬되지 않고 임의의 순서로 저장 but, InnoDB 테이블에서는 클러스터링 되어 프라이머리 키 순서로 정렬되어 저장(=오라클의 IOT(index organized table), MS-SQL의 클러스터 테이블)
( p222 - B-tree와 MyISAM, InnoDB 관계 그림 )
MyISAM, InnoDB 스토리지 엔진의 인덱스에서 가장 큰 차이점은 세컨더리 인덱스를 통해 데이터 파일의 레코드를 찾아가는 방법에 있다.
MyISAM 테이블은 세컨더리 인덱스가 물리적인 주소를 가지는 반면 
InnoDB 테이블은 프라이머리 키를 주소처럼 사용하기 때문에 논리적인 주소를 가진다고 볼 수 있다.
-> InnoDB 테이블에서 인덱스를 통해 레코드를 읽을 때는 데이터 파일을 바로 찾아가지 못하고, 인덱스에 저장돼 있는 프라이머리 키 값을 이용해 프라이머리 키 인덱스를 한 번 더 검색한 후
프라이머리 키 인덱스의 리프 페이지에 저장돼 있는 레코드를 읽는다. 즉, 반드시 프라이머리 키를 저장하고 있는 B-Tree를 다시 한번 검색해야 한다.

인덱스 키 추가
새로운 키 값이 B-Tree에 저장될 때 테이블의 스토리지 엔진에 따라 새로운 키 값이 즉시 인덱스에 저장될 수도 있고 그렇지 않을 수도 있다. B-Tree에 저장될 때는 저장될 키 값을 이용해 B-Tree상의
적절한 위치를 검색해야 한다. 저장될 위치가 결정되면 레코드의 키 값과 대상 레코드의 주소 정보를 B-Tree의 리프노드에 저장한다 .리프 노드가 꽉차서 더는 저장할 수 없을 때는 리프 노드가 분리 돼야 하는데,
이는 상위 브랜치 노드까지 처리의 범위가 넓어진다. 이러한 작업 탓에 B-Tree는 상대적으로 쓰기작업에 비용이 많이 드는 것으로 알려졌다.

대략적 비용 계산 (디스크로부터 인덱스 페이지를 읽고 쓰기를 해야 해서 걸리는 시간)
테이블에 레코드를 추가하는 작업 비용을 1이라 가정, 해당 테이블의 인덱스에 키를 추가하는 작업 비용을 1.5 정도로 예측
if) 테이블의 모든 인덱스가 B-Tree인 경우
테이블에 인덱스가 하나도 없는 경우 작업비용 = 1
테이블에 인덱스가 3개인 경우 ( 3 * 1.5 + 1 ) = 5.5 

InnoDB 스토리지 엔진의 경우 필요하다면 인덱스 키 추가 작업을 지연시켜 나중에 처리 (체인지 버퍼를 활용) //  MyISAM, MEMORY 경우 즉시 키 값을 변경 

인덱스 키 삭제
해당 키 값이 저장된 B-Tree의 리프 노드를 찾아서 그냥 삭제 마크만 하면 작업이 완료 된다. ( 삭제 마킹도 디스크 I/O이 필요함 )
5.5 이상 InnoDB 경우 추가와 같이 지연 처리 가능 

인덱스 키 변경
단순히 인덱스 상의 키 값만 변경하는 것이 아닌, 삭제 후 추가 작업을 한다. InnoDB의 경우 체인지 버퍼를 활용해 지연 처리 가능하다.

인덱스 키 검색
인덱스를 검색하는 작업은 B-Tree의 루트 노드부터 시작해 브랜치 노드를 거쳐 최종 리프 노드까지 이동하면서 비교 작업을 수행하는데, 이 과정을 '트리 검색'이라고 한다.
SELECT의 경우, UPDTAE, DELETE를 처리하기 위해 항상 해당 레코드를 먼저 검색해야 할 경우 사용
B-Tree 인덱스를 이용한 검색은 100% 일치 또는 값의앞부분만 일치하는 경우 사용. 부등호 비교 조건 가능. 
하지만 키 값의 뒷부분만 검색하는 용도로는 사용 불가하다.
* 인덱스의 키 값에 변형이 가해진 후 비교하는 경우 B-Tree의 빠른 검색 기능을 사용할 수 없다. ( 함수나 연산을 수행한 결과로 정렬, 검색 하는 경우 )

* InnoDB 테이블에서 지원하는 레코드 잠금이나 넥스트 키락(갭락)이 검색을 수행한 인덱스를 잠근 후 테이블의 레코드를 잠그는 방식으로 구현돼 있다.
따라서 UPDATE나 DELETE문장이 실행될 때 테이블에 적절히 사용할 수 있는 인덱스가 없으면 불필요하게 많은 레코드를 잠근다. 테이블의 모든 레코드를 잠글 수 있다. 설계가 중요하다.

B-Tree 인덱스 사용에 영향을 미치는 요소
B-Tree 인덱스는 인덱스를 구성하는 칼럼의 크기와 레코드의 건수, 그리고 유니크한 인덱스 키 값의 개수 등에 의해 검색이나 변경 작업의 성능이 영향을 받는다.

인덱스 키 값의 크기
InnoDB 스토리지 엔진은 디스크에 데이터를 저장하는 가장 기본 단위를 페이지 또는 블록이라고 하며, 디스크의 모든 읽기 및 쓰기 작업의 최소 작업 단위가 된다. 
또한 페이지는 InnoDB 스토리지 엔진의 버퍼 풀에서 데이터를 버퍼링하는 기본 단위이기도 하다. 인덱스도 결국은 페이지 단위로 관리되며, 루트와 브랜치, 리프 노드를 구분한 기준이 페이지다.
DBMS의 B-Tree는 자식 노드의 개수가 가변적인 구조다. 자식 노드의 갯수는 인덱스의 페이지 크기와 키 값의 크기에 따라 결정된다. 
페이지의 크기는 5.7 부터 innodb_page_size - 4KB ~ 64KB 선택 가능 default는 16KB이다.
인덱스 페이지의 구성(default 16KB)
if) 인덱스의 키 - 16byte , 자식 노드 주소 영역 12byte (6~12byte)
하나의 인덱스 페이지(16KB)에 몇 개의 키 저장할 수 있을까? 16*1024/(16+12) = 585 / 자식노드 585개를 가질 수 있는 B-Tree
만약 인덱스의 키가 32byte로 커진다면 16*1024/(32+12) = 372개 B-Tree
-> SELECT의 쿼리가 레코드 500개를 읽어야 한다면 전자의 경우 인덱스 페이지 한 번으로 해결될 수도 있지만, 후자의 경우는 최소 두번 디스크로부터 읽어야 한다

인덱스 키 값의 길이가 길어진다는 것은 전체적인 인덱스의 크기가 커진다는 것을 의미한다. 하지만 인덱스를 캐시해 두는 InnoDB의 버퍼 풀이나 MyISAM의 키 캐시 영역은 크기가 제한적이기 때문에
하나의 레코드를 위한 인덱스 크기가 커지면 커질수록 메모리에 캐시해 둘 수 있는 레코드 수는 줄어든다. 
-> 메모리의 효율이 떨어지는 결과

B-Tree 깊이
B-Tree 인덱스의 깊이는 상당히 중요하지만 직접 제어할 방법은 없다. 
깊이가 3, 키 값이 16byte(585개)인 경우 585*585*585 = 최대 2억개의 키 값을 담을 수 있지만
깊이가 3, 키 값이 32byte(372개)인 경우 372*372*372 = 최대 5천만개로 줄어 든다.
-> 결론적으로 키 값이 커지면 인덱스 페이지가 담을 수 있는 키 값의 개수가 적어지고, 같은 레코드의 건수 일 경우 깊이(depth)가 깊어져 더 많은 읽기가 필요하게 된다.
-> 실제론 아무리 대용량 데이터베이스라도 B-Tree의 깊이가 5단계 이상까지 깊어지는 경우는 흔치 않다.

선택도(기수성)
모든 인덱스 키 값 가운데 유니크한 값의 수를 의미. 전체 인덱스 키값은 100개 인데, 그 중에서 유니크한 값의 수는 10개라면 기수성은 10이다. 
중복된 값이 많아지면, 기수성, 선택도가 낮아진다. 인덱스는 선택도가 높을수록 검색 대상이 줄어들기 때문에 그만큼 빠르게 처리된다.
* 선택도가 좋지 않다고 하더라도 정렬이나 그루핑과 같은 작업을 위해 인덱스를 만드는 것이 훨씬 나은 경우도 많다. (항상 검색에만 사용되는 것은 아니므로)

p228 유니크한 값의 개수는 인덱스나 쿼리의 효율성에 큰 영향을 미친다
-> 전체 레코드 개수/ 유니크한 값의 개수 = 대략적으로 하나의 키 값으로 검색 시 나올 레코드 개수

읽어야 하는 레코드의 개수 
ex) 100만 건의 레코드 ( 효율 찾기 )
1) 전체 테이블을 읽어 절반을 버리는 것 ?
2) 인덱스를 통해 50만건만 읽어오는 것 ?

인덱스를 이용한 읽기의 손익 분기점 찾기
일반적인 DBMS의 옵티마이저에서 인덱스를 통해 레코드 1건을 읽는 것이 테이블에서 직접 레코드 1건을 읽는 것 보다 4~5배 정도 비용이 더 많이 드는 작업인 것으로 예측한다. 
즉 인덱스로 읽어야 할 레코드의 건수가 전체 건수의 20~25%가 넘어서면 테이블을 모두 직접 읽어서 필요한 레코드만 가려내는 방식으로 처리하는 것이 효율적이다 .
-> 위의 경우 Mysql 옵티마이저가 인덱스를 이용하지 않고 직접 테이블 전체를 읽어서 처리 할 것이다. (힌트도 무시)

B-Tree 인덱스를 통한 데이터 읽기 - 인덱스 유도 여부 판단하기 위한 인덱스 사용 방법

인덱스 레인지 스캔
접근 방식 중 가장 대표적인 접근 방식, 다른 두 가지 접근 방식보다 빠른 방법이다
인덱스 레인지 스캔은 검색해야 할 인덱스의 범위가 결정됐을 때 사용하는 방식이다. 검색하려는 값의 수나 검색 결과 레코드 건수와 관계없이 레인지 스캔이라고 표현한다.
루트 노드에서부터 비교를 시작해 브랜치 노드를 거치고 최종적으로 리프 노드까지 찾아 들어가야만 비로소 필요한 레코드의 시작 지점을 찾을 수 있다. 
일단 시작해야 할 위치를 찾으면 그때부터는 리프 노드의 레코드만 순서대로 읽으면 된다. 만약 스캔하다가 리프 노드의 끝까지 읽으면 리프 노드 간의 링크를 이용해 다음 리프 노드를 찾아서 다시 스캔한다.
그리고 최종적으로 스캔을 멈춰야 할 위치에 다다르면 지금까지 읽은 레코드를 사용자에게 반환하고 쿼리를 끝낸다. (그림 p231)
중요한 것은 어떤 방식으로 스캔하든 관계없이, 해당 인덱스를 구성하는 칼럼의 정순 또는 역순으로 정렬된 상태로 레코드를 가져온다는 것이다. 이유는 인덱스 자체의 정렬 특성 때문이다. 
리프 노드에서 검색 조건에 일치하는 건들은 리프 노드에 저장된 레코드 주소로 데이터 파일의 레코드를 읽어오는데, 레코드 한 건 한 건 단위로 랜덤 I/O가 한 번씩 일어난다.*
-> 인덱스를 통해 데이터 레코드를 읽는 작업은 비용이 많이 드는 작업
1) 인덱스에서 조건을 만족하는 값이 저장된 위치를 찾는다. - 인덱스 탐색
2) 1번에서 탐색된 위치부터 필요한 만큼 인덱스를 차례대로 쭉 읽는다. - 인덱스 스캔
3) 2번에서 읽어 들인 인덱스 키와 레코드 주소를 이용해 레코드가 저장된 페이지를 가져오고, 최종 레코드를 읽어 온다.

쿼리가 필요로 하는 데이터에 따라 3번 과정이 필요하지 않을 수도 있는데, 이를 커버링 인덱스라고 한다.
커버링 인덱스로 처리되는 쿼리는 디스크의 레코드를 읽지 않아도 되기 때문에 랜덤 읽기가 상당히 줄어들고 성능은 그만큼 빨라진다. 

1,2번 단계의 작업이 얼마나 수행됐는지 확인하는 상태 값 
SHOW STATUS LIKE 'Handler_%';        
Handler_read_first - 인덱스의 첫 번째 레코드를 읽은 횟수 (min(), max()와 같이 제일 큰 값 또는 제일 작은 값만 읽는 경우 증가하는 상태 값)
Handler_read_key - 1번 단계가 실행된 횟수     
Handler_read_last - 인덱스의 마지막 레코드를 읽은 횟수 (min(), max()와 같이 제일 큰 값 또는 제일 작은 값만 읽는 경우 증가하는 상태 값)
Handler_read_next - 인덱스 정순으로 읽은 레코드 건수
Handler_read_prev - 인덱스 역순으로 읽은 레코드 건수
-> 3번 단계는 구분하지 않음.

인덱스 풀 스캔 (그리 효율적인 방식은 아니며, 일반적으로 인덱스를 생성하는 목적은 아니다)
인덱스를 사용하지만 레인지 스캔과는 달리 인덱스의 처음부터 끝까지 모두 읽는 방식이다. 
대표적으로 쿼리의 조건절에 사용된 칼럼이 인덱스의 첫 번째 칼럼이 아닌 경우 인덱스 풀 스캔 방식이 사용된다.
ex) 인덱스는 (A,B,C) 칼럼의 순서로 만들어져 있지만 쿼리의 조건절은 B 칼럼이나 C 칼럼으로 검색하는 경우다.
쿼리가 인덱스에 명시된 칼럼만으로 조건을 처리할 수 있는 경우 주로 이 방식이 사용된다. 인덱스 뿐만 아니라 데이터 레코드까지 모두 읽어야 한다면 절대 이 방식으로 처리되지 않는다.
인덱스 레인지 스캔보다는 빠르지 않지만 테이블 풀 스캔보다는 효율적이다. 

루스 인덱스 스캔
오라클의 인덱스 스킵 스캔과 작동 방식이 비슷하다. 5.7까지는 기능이 많이 제한적이었고, 8.0부터 다른 상용 DBMS에서 지원하는 인덱스 스킵 스캔과 같은 최적화를 조금씩 지원하기 시작했다.
타이트 인덱스 스캔으로 분류. 느슨하게 또는 듬성듬성하게 인덱스를 읽는 것을 의미
인덱스 레인지 스캔과 비슷하게 작동하지만 중간에 필요치 않은 인덱스 키 값은 무시하고 다음으로 넘어가는 형태로 처리한다. (그림 p236)
일반적으로 GROUP BY 또는 집합 함수 가운데 MAX() 또는 MIN() 함수에 대해 최적화를 하는 경우에 사용된다. 
루스 인덱스 스캔을 사용하려면 여러 가지 조건을 만족해야 한다. (10장 실행 계획 참고)

인덱스 스킵 스캔
데이터베이스 서버에서 인덱스의 핵심은 값이 정렬돼 있다는 것이며, ** 이로 인해 인덱스를 구성하는 칼럼의 순서가 매우 중요하다. ** 
ex) 
# 인덱스 생성
ALTER TABLE employees ADD INDEX ix_gender_birthdate (gender, birth_date);

# 인덱스 사용 못하는 쿼리
SELECT * FROM employees WHERE birth_date>='1965-02-01';

# 인덱스 사용 하는 쿼리
SELECT * FROM employees WHERE gender='M' AND birth_date>='1965-02-01';

첫 번째 쿼리의 경우 birth_date 칼럼부터 시작하는 인덱스를 새로 생성해야만 한다.
8.0부터는 옵티마이저가 gender 칼럼을 건너뛰어서 birth_date 칼럼만으로도 인덱스 검색이 가능하게 해주는 인덱스 스킵 스캔 최적화 기능이 도입됐다.
물론 8.0이전에도 비슷한 기능인 최적화를 수행하는 루스 인덱스 스캔이 있었지만, GROUP BY 작업을 처리하기 위해 인덱스를 사용하는 경우에만 적용할 수 있었다.

8.0에서 skip_scan을 off하고 확인 할 경우 
첫 번째 쿼리의 실행 계획을 보면 type 부분에 index라 표시된다. 이는 인덱스 풀 스캔을 의미하는 것으로 비효율적으로 사용한 것이다. 
8.0에서 skip_scan을 on하고 확인 할 경우 
type부분에 range라 표시된다. 필요한 부분만 읽었다는 의미이다.

위의 첫번째 쿼리를 8.0의 skip_scan을 한 그림(p 238)
-> SELECT gender, birth_date FROM employees WHERE gender = 'M' AND birth_date>='1965-02-01'; 
-> SELECT gender, birth_date FROM employees WHERE gender = 'F' AND birth_date>='1965-02-01';
이것과 같은 의미

인덱스 스킵 스캔의 단점 
1) WHERE 조건절에 조건이 없는 인덱스의 선행 칼럼의 유니크한 값의 개수가 적어야 함
유니크한 값의 개수가 매우 많다면 인덱스에서 스캔해야 할 시작 시점을 검색하는 작업이 많이 필요해진다.

2) 쿼리가 인덱스에 존재하는 칼럼만으로 처리 가능해야 함(커버링 인덱스)
SELECT * FROM employees WHERE birth_date>='1965-02-01';
-> select절의 모든 칼럼이 필요하기에 풀 테이블 스캔으로 바뀜 


다중 칼럼 인덱스
2개 이상의 칼럼으로 구성된 인덱스, Concatenated Index라고 한다. 구조 (그림 p240)
인덱스의 두 번째 칼럼은 첫 번째 칼럼에 의존해서 정렬돼 있다는 것. 두 번째 칼럼의 정렬은 첫 번째 칼럼이 똑같은 레코드에서만 의미가 있다는 것이다.
다중 칼럼 인덱스에서는 인덱스 내에서 각 칼럼의 위치(순서)가 상당히 중요하며, 그것을 아주 신중히 결정해야 한다.

B-Tree 인덱스의 정렬 및 스캔 방향
인덱스의 정렬
5.7까지는 칼럼 단위로 정렬 순서를 혼합해서 인덱스를 생성할 수 없었다. (숫자의 경우 -1을 곱한 값을 저장하여 우회)
8.0부터는 정렬 순서를 혼합한 인덱스도 생성할 수 있게 됐다.
ex) CREATE INDEX ix_teamname_userscore ON employees (team_name ASC, user_score DESC);
** 5.7에서도 ASC, DESC를 혼합한 인덱스가 에러 없이 생성됐다고 기억할 수 있다. 이는 추후 사용될 호환성에 대해 문법상으로만 제공 된 것이고, 실제로 모두 오름차순으로 인덱스가 생성됐다.

인덱스 스캔 방향
ex) SELECT * FROM employees ORDER BY first_name DESC Limit 1;
-> 위의 쿼리는 인덱스 전체를 읽어 마지막 레코드값을 가져오는게 아닌 옵티마이저가 오름차순 인덱스를 최대값으로 접근하여 첫번째 레코드 읽어 하나만 가져오는 방법을 사용한다.

내림차순 인덱스 (8.0부터 지원하는)
ex) limit, offset 부분으로 인해 모든 레코드를 스캔, 조건(p244)
SELECT * FROM t1 ORDER BY tid ASC LIMIT 12619775, 1;  // 오름차순으로 가장 큰 레코드 1건 반환
result : 1 row in set (4.15 sec)
SELECT * FROM t1 ORDER BY tid DESC LIMIT 12619775, 1;  // 내림차순으로 가장 작은 레코드 1건 반환
result : 1 row in set (5.35 sec)
-> 역순 정렬 쿼리가 28.9% 더 시간이 걸린다.
실제 내부적으로 InnoDB에서 인덱스 역순 스캔이 인덱스 정순 스캔에 비해 느릴 수 밖에 없는 2가지 이유
1) 페이지 잠금이 인덱스 정순 스캔에 적합한 구조
2) 페이지 내에서 인덱스 세코드가 단방향으로만 연결된 구조 (InnoDB 페이지는 힙처럼 사용되기 때문에 물리적으로 저장이 순서대로 배치되지 않는다)

SELECT * FROM tab WHERE userid=??? ORDER BY score DESC LIMIT 10;
소량의 레코드에 드물게 실행되는 경우 -> 내림차순 인덱스를 굳이 고려할 필요는 없다
대량의 레코드에 빈번한 실행일 경우 -> 내림차순 인덱스가 효율적일 수 있다.

B-Tree 인덱스의 가용성과 효율성
쿼리의 WHERE 조건이나 GROUP BY 또는 ORDER BY 절이 어떤 경우에 인덱스를 사용할 수 있고 어떤 방식으로 사용할 수 있는지 식별할 수 있어야 한다.
그래야만 쿼리의 조건을 최적화하거나, 역으로 쿼리에 맞게 인덱스를 최적으로 생성할 수 있다. 

비교 조건의 종류와 효율성
다중 칼럼 인덱스에서 각 칼럼의 순서와 그 칼럼에 사용된 조건이 동등 비교(=)인지 아니면 크다(>) 작다(<) 같은 범위 조건인지에 따라 각 인덱스 칼럼의 활용 형태가 달라지면 그 효율 또한 달라진다.
SELECT * FROM dept_emp WHERE dept_no='d002' AND emp_no >= 10114;
case A) INDEX(dept_no, emp_no)          //      case B) INDEX(emp_no, dept_no)
작업 범위 결정 조건 - 작업의 범위를 결정하는 조건   ==> case A의 (dept_no='d002', emp_no>=10144),    case B의 (emp_no>=10144)
필터링 조건 or 체크 조건 - 비교 작업의 범위를 줄이지 못하고 단순히 거름종이 역할만 하는 조건 ==> case B의 (dept_no='d002')
-> 동등조건일 경우 앞 인덱스로 설정 ?? 
** 작업 범위를 결정하는 조건은 많으면 많을수록 쿼리의 처리 성능을 높이지만 체크 조건은 많다고 해서 쿼리의 처리 성능을 높이지는 못한다. 오히려 실행을 느리게 함

인덱스의 가용성
B-Tree 인덱스의 특징은 왼쪽 값에 기준해서 오른쪽 값이 정렬돼 있다는 것이다. 여기서 왼쪽이란 하나의 칼럼 내에서뿐만 아니라 다중 칼럼 인덱스의 칼럼에 대해서도 함께 적용된다.
인덱스 키 값의 정렬 특성은 빠른 검색의 전제 조건이다. 하나의 칼럼으로 검색해도 값의 왼쪽 부분이 없으면 인덱스 레인지 스캔 방식의 검색이 불가능하다 (그림 p249)
또한 다중 칼럼 인덱스에서도 통념된다.
ex1) SELECT * FROM employees WHERE first_name LIKE '%mer';
이 쿼리는 인덱스 레인지 스캔 방식으로 인덱스를 이용할 수는 없다. 이유는 조건절에 주어진 상숫값에는 왼쪽 부분이 고정되지 않았기 때문이다. 정렬 우선수위가 낮은 뒷부분의 값만으로는
왼쪽 기준 정렬 기반의 인덱스인 B-Tree에서는 인덱스의 효과를 얻을 수 없다

ex2) SELECT * FROM dept_emp WHERE emp_no>=10144;
인덱스가 (dept_no, emp_no) 칼럼 순서대로 생성돼 있다면 인덱스의 선행 칼럼인 dept_no 조건 없이 emp_no 값으로만 검색하면 인덱스를 효율적으로 사용할 수 없다.
GROUP BY, ORDER BY 절에도 똑같이 적용된다. 

가용성과 효율성 판단
기본적으로 B-Tree 인덱스의 특성상 다음 조건에서는 사용할 수 없다. 여기서 사용할 수 없다는 것은 작업 범위 결정 조건으로 사용할 수 없다는 것을 의미하며, 경우에 따라서는 체크 조건으로
인덱스를 사용할 수는 있다.
* NOT-EQUAL로 비교된 경우(<>, NOT IN, NOT BETWEEN, IS NOT NULL)
// Mysql은 NULL 값도 인덱스에 저장된다.

* LIKE '%??' 형태로 문자열 패턴이 비교된 경우

* 스토어드 함수나 다른 연산자로 인덱스 칼럼이 변형된 후 비교된 경우
ex) WHERE SUBSTRING(column,1,1) = 'x'

* NOT-DETERMINISTIC 속성의 스토어드 함수가 비교 조건에 사용된 경우
ex) WHERE column = deterministic_function()
// 비결정적 함수 - 액세스하는 데이터베이스의 상태가 동일하게 유지되더라도 특정 입력 값 집합으로 호출될 때마다 다른 결과를 반환할 수 있습니다.
ex) 날짜를 가져오는 함수일 경우 

* 데이터 타입이 서로 다른 비교(인덱스 칼럼의 타입을 변환해야 비교가 가능한 경우)

* 문자열 데이터 타입의 콜레이션이 다른 경우 
ex) WHERE utf8_bin_char_column = euckr_bin_char_column

다중 칼럼으로 만들어진 인덱스의 경우
INDEX ix_test ( column_1, column_2, column_3, ... , column_n )
* 작업 범위 결정 조건으로 인덱스를 사용하지 못하는 경우
 column_1 칼럼에 대한 조건이 없는 경우
 column_1 칼럼의 비교 조건이 위의 인덱스 사용 불가 조건 중 하나인 경우
 
* 작업 범위 결정 조건으로 인덱스를 사용하는 경우(i는 2보다 크고 n보다 작은 임의의 값을 의미)
 column_1 ~ column(i-1) 칼럼까지 동등 비교 형태( = , IN )로 비교
 column_i 칼럼에 대해 다음 연산자 중 하나로 비교
 - 동등 비교( =, IN )
 - 크다 작다 형태 ( >, < )
 - LIKE로 좌측 일치 패턴(LIKE '승환%')
위의 두가지 조건을 만족하는 쿼리는 column_1부터 column_i까지 작업 범위 결정 조건으로 사용되고, column_(i+1)부터 column_n까지의 조건은 체크 조건으로 사용된다.
 
ex) ... WHERE column_1 AND column_2=2 AND column_3 IN (10,20,30) AND column_4 <> 100
column_1,2,3은 범위 결정 조건, column_4는 체크 조건으로 사용됨
 
R-Tree 인덱스
공간 인덱스(Spatial Index)는 R-Tree 인덱스 알고리즘을 이용해 2차원의 데이터를 인덱싱하고 검색하는 목적의 인덱스다.
기본적인 내부 메커니즘은 B-Tree와 흡사하며, 인덱스를 구성하는 칼럼의 값이 1차원의 스칼라 값인 B-Tree와 다르게 R-Tree 인덱스는 2차원의 공간 개념 값이라는 것이다.
위치 기반의 서비스를 구현하는 방법 중 하나 
Mysql의 공간 확장 3가지 기능
* 공간 데이터를 저장할 수 있는 데이터 타입
* 공간 데이터의 검색을 위한 공간 인덱스(R-Tree 알고리즘)
* 공간 데이터의 연산 함수(거리 또는 포함 관계의 처리)
 
구조 및 특성
Mysql은 공간 정보와 저장 및 검색을 위해 여러 가지 기하학적 도형(Geometry) 정보를 관리할 수 있는 데이터 타입을 제공한다. (그림 p254)
POINT - 점
LINE - 점들의 연결 
POLYGON - 점들의 연결 (전부 이어짐)
GEOMETRY - 위의 3객체를 모두 저장 가능함

R-Tree 알고리즘을 이해하려면 MBR이라는 개념을 알고 있어야 한다.
MBR - Minimum Bounding Rectangle, 해당 도형을 감싸는 최소 크기의 사각형
이 사각형들의 포함 관계를 B-Tree 형태로 구현한 인덱스가 R-Tree 인덱스다.

최상위 레벨의 MBR - R-Tree의 루트 노드에 저장되는 정보 (그림 p256)
차상위 레벨의 MBR - R-Tree의 브랜치 노드에 저장되는 정보
최하위 레벨의 MBR - R-Tree의 리프 노드에 저장되는 정보

R-Tree 인덱스의 용도
R-Tree는 앞에서 언급한 MBR 정보를 이용해 B-Tree 형태로 인덱스를 구축하므로 Rectangle의 'R'과 B-Tree의 'Tree를 섞어서 R-Tree라는 이름이 붙여졌으며, 공간 인덱스라고도 한다.
일반적으로 WGS84(GPS) 기준의 위도, 경도 좌표 저장에 주로 사용된다. 하지만 위도, 경도 좌표뿐 아니라 CAD/CAM 소프트웨어 또는 회로 디자인 등과 같이 좌표 시스템에 기반을 둔 정보에
대해서는 모두 적용할 수 있다.
R-Tree는 ST_Contains() 또는 ST_Within() 등과 같은 포함 관계를 비교하는 함수로 검색을 수행하는 경우에만 인덱스를 이용할 수 있다.
대표적으로 '현재 사용자의 위치로부터 반경 5km 이내의 음식점 검색' 등과 같은 검색에 사용할 수 있다.
현재 출시되는 버전 Mysql에서는 ST_Distance(), ST_Distance_Sphere() 함수는 공간 인덱스를 효율적으로 사용 못하기에 ST_Contains() 또는 ST_Within() 이용해 거리 기반의 검색을 해야 한다.

기준점 P를 기준으로 한 반경 거리 5km 이내의 위치 검색
사각상자 안까지 포함 할 경우
1) SELECT * FROM tb_location WHERE ST_Contains(사각 상자, px); // 1st_param에 포함 경계를 가진 도형을 명시 , 2nd_param에 포함되는 도형(점좌표)를 명시
2) SELECT * FROM tb_location WHERE ST_Within(px, 사각 상자); // 1st_param에 포함되는 도형(점좌표)를 명시 , 2nd_param에 포함 관계를 가진 도형을 명시

5km 반경 이상이지만 사각상자 안에 있을 경우
SELECT * FROM tb_location WHERE ST_Contains(사각 상자, px)
                           AND ST_Distance_Sphere(p, px)<=5*1000 /* 5km */; // 비교 결과를 ST_Distance_Sphere() 함수를 이용해 다시 한번 필터링
                           
전문 검색 인덱스
Mysql의 B-Tree 인덱스는 실제 칼럼의 값이 1MB이더라도 1MB 전체의 값을 인덱스 키로 사용하는 것이 아니라 1,000바이트(MyISAM) 또는 3072바이트(InnoDB)까지만 잘라서 인덱스 키로 사용한다.
문서의 내용 전체를 인덱스화해서 특정 키워드가 포함된 문서를 검색하는 전문(Full Text) 검색에는 InnoDB나 MyISAM 스토리지 엔진에서 제공하는 일반적인 용도의 B-Tree 인덱스를 사용할 수 없다.

전문 검색에서는 문서 본문의 내용에서 사용자가 검색하게 될 키워드를 분석해 내고, 빠른 검색용으로 사용할 수 있게 이러한 키워드로 인덱스를 구축한다. 어근 분석, n-gram 알고리즘으로 구분

어근 분석 알고리즘*
Mysql 서버의 전문 검색 인덱스는 불용어 처리, 어근 분석의 과정을 거쳐서 색인 작업이 수행된다.
불용어 처리는 검색에서 별 가치가 없는 단어를 모두 필터링해서 제거하는 작업을 의미한다.
어근 분석은 검색어로 선정된 단어의 뿌리인 원형을 찾는 작업이다. 
한글의 경우 오픈소스 형태소 분석 라이브러리 MeCab을 플러그인 형태로 사용할수 있게 지원하며, 서구권 언어를 위한 형태소 분석기는 MongoDB에서 사용되는 Snowball이라는 오픈소스가 있다.
MeCab이 제대로 작동하려면 우선 단어 사전이 필요하며, 문장을 해체해서 각 단어의 품사를 식별할 수 있는 문장의 구조 인식이 필요하다.
MeCab을 Mysql 서버에 적용하는 방법은 어렵지 않지만 한글에 맞게 완성도를 갖추는 작업은 많은 시간과 노력이 필요하다.

n-gram 알고리즘*
단순히 키워드를 검색해내기 위한 인덱싱 알고리즘. 본문을 무조건 몇 글자씩 잘라서 인덱싱하는 방법이다. 국가별 언어에 대한 이해와 준비 작업이 필요 없는 반면, 만들어진 인덱스의 크기는 상당히 큰 편이다.
n은 인덱싱할 키워드의 최소 글자 수를 의미하는데, 일반적으로는 2글자 단위로 키워드를 쪼개서 인덱싱하는 2-gram(=Bi-gram) 방식이 많이 사용된다.
ex) To be or not to be. That is the question
각 단어는 띄어쓰기(공백), 마침표(.) 기준으로 10개의 단어로 구분되고, 2글자씩 중첩해서 토큰으로 분리 된다. 10글자라면 (10-1)개의 토큰으로 구분된다.
-> not // no ot 저장       That // Th ha at 저장
이렇게 생성된 토큰들에 대해 불용어를 걸러내는 작업을 수행하는데, 이때 불용어와 동일하거나 불용어를 포함하는 경우 걸러서 버린다. 
Mysql 내장 불용어는 information_schema.innodb_ft_default_stopword 테이블을 통해 확인할 수 있다.
이렇게 구분된 토큰을 단순한 B-Tree 인덱스에 저장한다.

불용어 변경 및 삭제
전문 검색 인덱스의 불용어 처리 무시 
1) 스토리지 엔진에 관계없이 모든 전문 검색 인덱스에 대해 불용어를 완전히 제거하는 것
ft_stopword_file='' // 경로를 지정할 경우 사용자 불용어를 사용할 수 있다.

2) InnoDB 스토리지 엔진을 사용하는 테이블의 전문 검색 인덱스에 대해서만 불용어 처리를 무시
innodb_ft_enable_stopword=OFF // 다른 스토리지 엔진을 사용하는 테이블은 여전히 내장 불용어 처리를 사용한다.

사용자 정의 불용어 사용
1) ft_stopword_file='/data/my_custom_stopword.txt'

2) InnoDB 스토리지 엔진을 사용하는 테이블의 전문 검색 엔진에서만 사용할 수 있는데, 불용어의 목록을 테이블로 저장하는 방식이다.
CREATE TABLE my_stopword(value VARCHAR(30)) ENGINE = INNODB;         // 불용어 테이블 생성
INSERT INTO my_stopword(value) VALUES ('Mysql');                     // 불용어 추가
SET GLOBAL innodb_ft_server_stopword_table='mydb/my_stopword';       // 시스템 변수에 테이블 설정
ALTER TABLE tb_bi_gram ADD FULLTEXT INDEX fx_title_body(title, body) WITH PARSER ngram; // * 전문 검색 인덱스 생성 (목록 변경 이후에*)
//여러 전문 검색 인덱스가 서로 다른 불용어를 사용해야 하는 경우 innodb_ft_user_stopword_table 사용

전문 검색 인덱스의 가용성
전문 검색 인덱스를 사용하기 위한 2가지 조건
1) 쿼리 문장이 전문 검색을 위한 문법을 사용(MATCH ... AGAINST ...)
2) 테이블이 전문 검색 대상 칼럼에 대해서 전문 인덱스 보유
예제) 
CREATE TABLE tb_test ( // 테이블, 인덱스 생성
   ... ...
   FULLTEXT KEY fx_docbody (doc_body) WITH PARSER ngram
) ENGINE=InnoDB;

1. SELECT * FROM tb_test WHERE doc_body LIKE '%애플%';
-> 전문 검색 인덱스를 이용한 것이 아닌 풀 테이블 스캔으로 쿼리를 처리함
2. SELECT * FROM tb_test WHERE MATCH(doc_body) AGAINST('애플' IN BOOLEAN MODE);
-> 전문 검색 인덱스 사용 ( MATCH ... AGAINST ... 구문으로 검색 쿼리 작성 )

함수 기반 인덱스 
일반적인 인덱스는 칼럼의 값 일부(칼럼의 값 앞부분) 또는 전체에 대해서만 인덱스 생성이 허용된다. 
하지만 때로는 칼럼의 값을 변형해서 만들어진 값에 대해 인덱스를 구축해야 할 때도 있는데, 이러한 경우 함수 기반의 인덱스를 활용하면 된다.
8.0부터 함수 기반 인덱스를 지원하기 시작했는데 구현방법에는 2가지가 있다.
Mysql 함수 기반 인덱스는 인덱싱할 값을 계산하는 과정의 차이만 있을 뿐, 실제 인덱스의 내부적인 구조 및 유지관리 방법은 B-Tree 인덱스와 동일하다.

ex) first_name, last_name을 합쳐서 검색해야 하는 요건이 생겼을 경우

1) 가상 칼럼을 이용한 인덱스
ALTER TABLE user ADD full_name VARCHAR(30) AS (CONCAT(first_name,' ',last_name)) VIRTUAL,
                 ADD INDEX ix_fullname (full_name);
8.0부터 위와 같이 가상 칼럼을 추가하고 그 가상 칼럼에 인덱스를 생성할 수 있게 됐다. VIRTUAL말고 STORED도 가능
단점 - 테이블에 새로운 칼럼을 추가하는 것과 같은 효과를 내기 때문에 실제 테이블의 구조가 변경된다.

2) 함수를 이용한 인덱스
CREATE TABLE user (
       ... ...
       INDEX ix_fullname ((CONCAT(first_name,' ',last_name)))
);
8.0부터는 함수를 직접 인덱스 생성 구문에 사용할 수 있다.
함수 기반 인덱스를 제대로 활용하려면 반드시 조건절에 함수 기반 인덱스에 명시된 표현식이 그대로 사용돼야 한다. (결과가 같더라 하더라도 표현식이 다르면 안됨)

만약 EXPLAIN으로 실행 계획을 보았을 떄 ix_fullname을 사용하지 않는 것으로 표시된다면 CONCAT 함수에 사용된 문자 리터럴 때문일 가능성이 높다.
이 경우 collation_connection, collation_database, collation_server 시스템 변수 값을 동일 콜레이션으로 일치 시킨 후 테스트 수행해보면 된다.

멀티 밸류 인덱스
전문 검색 인덱스를 제외한 모든 인덱스는 레코드 1건이 1개의 인덱스 키 값을 가진다. 즉 인덱스 키와 데이터 레코드는 1:1의 관계를 가진다. 하지만 멀티밸류 인덱스는 하나의 데이터 레코드가
여러 개의 키 값을 가질 수 있는 형태의 인덱스다. 일반적으로 RDBMS를 기준으로 생각하면 이러한 인덱스는 정규화에 위배되는 형태다. 하지만 최근 RDBMS들이 JSON 데이터 타입을 지원하기 시작하면서
JSON의 배열 타입의 필드에 저장된 원소들에 대한 인덱스 요건이 발생한 것이다.
MongoDB는 이런 형태의 인덱스를 지원하고 있었고, Mysql은 8.0부터 JSON 관리 기능으로 지원하게 된다. 

예) 신용 정보 점수를 배열로 JSON 타입 칼럼에 저장하는 테이블
CREATE TABLE user (
       user_id BIGINT AUTO_INCREMENT PRIMARY KEY,
       first_name VARCHAR(10),
       last_name VARCHAR(10),
       credit_info JSON,
       INDEX mx_creditscores ( (CAST(credit_info->'$.credit_scores' AS UNSIGNED ARRAY)) )
);
INSERT INTO user VALUES (1, 'Matt', 'Lee', '{"credit_scores":[360, 353, 351]}');

멀티 밸류 인덱스를 활용하기 위해서는 일반적인 조건 방식을 사용하지 않고, 반드시 다음 함수들을 사용해야 옵티마이저가 인덱스를 활용한 실행 계획을 수립한다.
MEMBER OF(),  JSON_CONTAINS(),  JSON_OVERLAPS()

SELECT * FROM user WHERE 360 MEMBER OF(credit_info->'$.credit_scores');

클러스터링 인덱스
클러스터링은 테이블의 레코드를 비슷한 것(프라이머리 키를 기준으로)들끼리 묶어서 저장하는 형태로 구현되는데, 이는 주로 비슷한 값들을 동시에 조회하는 경우가 많다는 점에 착안한 것이다.
InnoDB 스토리지 엔진에서만 지원한다.

테이블의 프라이머리 키에 대해서만 적용된다. 중요한 것은 프라이머리 키 값에 의해 레코드의 저장 위치가 결정된다는 것이다. 또한 프라이머리 키 값이 변경된다면 
그 레코드의 물리적인 저장 위치가 바뀌어야 한다는 것을 의미하기도 한다. 프라이머리 키 값 자체에 대한 의존도가 상당히 크기 때문에 신중히 프라이머리 키를 결정해야 한다.

클러스터링의 기준이 되는 프라이머리 키는 클러스터링 키라고도 표현한다. 일반적으로 InnoDB와 같이 항상 클러스터링 인덱스로 저장되는 테이블은 프라이머리 키 기반의 검색이 매우 빠르며,
대신 레코드의 저장이나 프라이머리 키의 변경이 상대적으로 느리다.
* 테이블의 레코드가 프라이머리 키 값으로 정렬되어 저장된 경우만 클러스터링 인덱스 또는 클러스터링 테이블 이라고 한다. 
클러스터링 인덱스의 리프 노드에는 레코드의 모든 칼럼이 같이 저장돼 있음을 알 수 있다. (하나의 거대한 인덱스 구조로 관리) (그림 p271)

클러스터링 테이블로 구성되는 클러스터링 키 선택 우선 순위
1) 프라이머리 키가 있으면 프라이머리 키를 클러스터링 키로 선택
2) NOT NULL 옵션의 유니크 인덱스 중에서 첫 번째 인덱스를 클러스터링 키로 선택
3) 자동으로 유니크한 값을 가지도록 증가되는 칼럼을 내부적으로 추가한 후, 클러스터링 키로 선택

InnoDB 스토리지 엔진이 적절한 클러스터링 키 후보를 찾지 못하는 경우 내부적으로 레코드의 일련번호 칼럼을 생성한다. 사용자에게 노출되지 않고, 쿼리 문장에 명시적으로 사용할 수 없다.
아무 의미 없는 숫자 값으로 클러스터링되는 것이며, 아무런 혜택을 주지 않는다. 테이블당 단 하나만 가질 수 있기에, 가능하다면 프라이머리 키를 명시적으로 생성하는 것이 좋다.

세컨더리 인덱스에 미치는 영향

프라이머리 키로 클러스터링된 InnoDB와 그렇지 않은 MyISAM의 차이
InnoDB : ix_firstname 인덱스를 검색해 레코드의 프라이머리 키 값을 확인한 후, 프라이머리 키 인덱스를 검색해서 최종 레코드를 가져옴 (조금 더 복잡하지만 큰 장점이 있다)
MyISAM : ix_firstname 인덱스를 검색해서 레코드의 주소를 확인한 후, 레코드의 주소를 이용해 최종 레코드를 가져옴

클러스터링 인덱스의 장점과 단점
장점 : 프라이머리 키(클러스터링 키)로 검색할 때 처리 성능이 매우 빠름(특히, 프라이머리 키를 범위 검색하는 경우 매우 빠름)
       테이블의 모든 세컨더리 인덱스가 프라이머리 키를 가지고 있기 때문에 인덱스만으로 처리될 수 잇는 경우 많음(=커버링 인덱스)

단점 : 테이블의 모든 세컨더리 인덱스가 클러스터링 키를 갖기 때문에 클러스터링 키 값의 크기가 클 경우 전체적으로 인덱스의 크기가 커짐
       세컨더리 인덱스를 통해 검색할 때 프라이머리 키로 다시 한번 검색해야 하므로 처리 성능이 느림
       INSERT할 때 프라이머리 키에 의해 레코드의 저장 위치가 결정되기 때문에 처리 성능이 느림
       프라이머리 키를 변경할 때 레코드를 DELETE하고 INSERT하는 작업이 필요하기 때문에 처리 성능이 느림
장 - 빠른 읽기 단 - 느린 쓰기

클러스터링 테이블 사용 시 주의사항




