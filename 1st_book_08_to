< 인덱스 >

디스크 읽기 방식
데이터베이스의 성능 튜닝은 어떻게 디스크 I/O를 줄이느냐가 관건일 때가 상당히 많다.

하드 디스크 드라이브(HDD)와 솔리드 스테이트 드라이브(SSD)
메모리와 디스크의 처리속도 10만 배 이상의 차이 / 메모리와 SSD 1000배 가량의 차이
한 번에 많은 데이터를 읽는 순차 I/O - SSD와 HDD 거의 비슷하거나 SSD가 조금 빠름
랜덤 I/O - SSD가 훨씬 빠름

랜덤 I/O, 순차 I/O 
(그림 p216)  HDD에서 순차 I/O는 디스크 기록을 위해 1번 시스템 콜 요청
랜덤 I/O는 3번 시스템콜을 요청 
-> 디스크의 헤드를 움직이는 횟수 
-> 순차가 랜덤보다 3배 빠르다

헤드의 유무로 원판을 가지지 않는 SSD는 랜덤, 순차 I/O 차이가 없을 것으로 예측하지만,
실제로 랜덤I/O는 순차 I/O보다 전체 스루풋이 떨어진다.
** 쿼리를 튜닝하는 것은 랜덤 I/O 자체를 줄여주는 것이 목적이라고 할 수 있다.(쿼리를 처리하는데 꼭 필요한 데이터만 읽도록 쿼리를 개선하는 것을 의미)

인덱스 레인지 스캔 - 랜덤 I/O 
풀 테이블 스캔 - 순차 I/O (큰 테이블의 레코드 대부분을 읽는 작업에서는 인덱스를 사용하지 않고 풀 테이블 스캔을 사용하도록 유도할 때도 있다) // 데이터 웨어하우스, 통계 작업

인덱스란
책의 맨 끝 찾아보기 - 인덱스
책의 내용 - 데이터 파일
페이지 번호 - 레코드의 주소
책의 ㄱㄴㄷ정렬 - 인덱스의 정렬 보관

SortedList - 인덱스 (저장되는 값을 항상 정렬된 상태로 유지하는 자료 구조)
ArrayList - 데이터 파일 (저장된 순서대로 별도의 정렬 없이 그대로 저장)

인덱스가 많은 테이블은 INSERT, UPDATE, DELETE 문장의 처리가 느려진다. BUT, SELECT는 매우 빠르게 처리

인덱스는 INSERT, UPDATE, DELETE 성능을 희생하고 읽기 속도를 높이는 기능 

프라이머리 키는 이미 잘 아는 것처럼 그 레코드를 대표하는 칼럼의 값으로 만들어진 인덱스를 의미한다. 이 칼럼은 테이블에서 해당 레코드를 식별할 수 있는 기준값이 되기 때문에 
우리는 이를 식별자라고도 부른다. 프라이머리 키는 NULL 값을 허용하지 않으며 중복을 허용하지 않는 것이 특징이다.

프라이머리 키를 제외한 나머지 모든 인덱스는 세컨더리 인덱스로 분류한다. 유니크 인덱스는 프라이머리 키와 성격이 비슷하고 프라이머리 키를 대체해서 사용할 수도 있다고 해서 대체 키라고도 하는데,
별도로 분류하기도 하고 그냥 세컨더리 인덱스로 분류하기도 한다.

알고리즘 별 분류
B-Tree 알고리즘 - 가장 일반적으로 사용되는 인덱스 알고리즘으로서, 상당히 오래전에 도입된 알고리즘이며 그만큼 성숙해진 상태다. B-Tree 인덱스는 칼럼의 값을 변형하지 않고
원래의 값을 이용해 인덱싱하는 알고리즘이다. Mysql 서버에서는 위치 기반 검색을 지원하기 위한 R-Tree 인덱스 알고리즘도 있지만, 결국 R-Tree 인덱스는 B-Tree의 응용 알고리즘으로 볼 수 있다.

Hash 인덱스 알고리즘 - 칼럼의 값으로 해시값을 계산해서 인덱싱하는 알고리즘으로, 매우 빠른 검색을 지원한다. 하지만 값을 변형해서 인덱싱하므로 전방(Prefix) 일치와 같이
값의 일부만 검색하거나 범위를 검색할 때는 해시 인덱스를 사용할 수 없다. Hash 인덱스는 주로 메모리 기반의 데이터베이스에서 많이 사용한다.

이외에 Fractal-Tree 인덱스, 로그 기반의 Merge-Tree 인덱스와 같은 알고리즘 사용하는 DBMS도 개발되고 있다.

데이터의 중복 허용 여부별 분류
Unique, Non-Unique

인덱스의 기능별 분류
전문 검색용 인덱스, 공간 검색용 인덱스 등

* B-Tree 인덱스 (Balanced Tree)
가장 일반적, 가장 먼저 도입, 가장 범용적인 목적으로 사용되는 인덱스 알고리즘 (p221 구조 그림)
루트노드 - 최상위 노드
브랜치노드 - 중간 노드
리프노드 - 최하위 노드 / 항상 실제 데이터 레코드를 찾아가기 위한 주솟값을 가짐
/// 대부분의 RDBMS는 정렬되지 않고 임의의 순서로 저장 but, InnoDB 테이블에서는 클러스터링 되어 프라이머리 키 순서로 정렬되어 저장(=오라클의 IOT(index organized table), MS-SQL의 클러스터 테이블)
( p222 - B-tree와 MyISAM, InnoDB 관계 그림 )
MyISAM, InnoDB 스토리지 엔진의 인덱스에서 가장 큰 차이점은 세컨더리 인덱스를 통해 데이터 파일의 레코드를 찾아가는 방법에 있다.
MyISAM 테이블은 세컨더리 인덱스가 물리적인 주소를 가지는 반면 
InnoDB 테이블은 프라이머리 키를 주소처럼 사용하기 때문에 논리적인 주소를 가진다고 볼 수 있다.
-> InnoDB 테이블에서 인덱스를 통해 레코드를 읽을 때는 데이터 파일을 바로 찾아가지 못하고, 인덱스에 저장돼 있는 프라이머리 키 값을 이용해 프라이머리 키 인덱스를 한 번 더 검색한 후
프라이머리 키 인덱스의 리프 페이지에 저장돼 있는 레코드를 읽는다. 즉, 반드시 프라이머리 키를 저장하고 있는 B-Tree를 다시 한번 검색해야 한다.

인덱스 키 추가


