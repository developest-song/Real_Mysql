< 인덱스 >

디스크 읽기 방식
데이터베이스의 성능 튜닝은 어떻게 디스크 I/O를 줄이느냐가 관건일 때가 상당히 많다.

하드 디스크 드라이브(HDD)와 솔리드 스테이트 드라이브(SSD)
메모리와 디스크의 처리속도 10만 배 이상의 차이 / 메모리와 SSD 1000배 가량의 차이
한 번에 많은 데이터를 읽는 순차 I/O - SSD와 HDD 거의 비슷하거나 SSD가 조금 빠름
랜덤 I/O - SSD가 훨씬 빠름

랜덤 I/O, 순차 I/O 
(그림 p216)  HDD에서 순차 I/O는 디스크 기록을 위해 1번 시스템 콜 요청
랜덤 I/O는 3번 시스템콜을 요청 
-> 디스크의 헤드를 움직이는 횟수 
-> 순차가 랜덤보다 3배 빠르다

헤드의 유무로 원판을 가지지 않는 SSD는 랜덤, 순차 I/O 차이가 없을 것으로 예측하지만,
실제로 랜덤I/O는 순차 I/O보다 전체 스루풋이 떨어진다.
** 쿼리를 튜닝하는 것은 랜덤 I/O 자체를 줄여주는 것이 목적이라고 할 수 있다.(쿼리를 처리하는데 꼭 필요한 데이터만 읽도록 쿼리를 개선하는 것을 의미)

인덱스 레인지 스캔 - 랜덤 I/O 
풀 테이블 스캔 - 순차 I/O (큰 테이블의 레코드 대부분을 읽는 작업에서는 인덱스를 사용하지 않고 풀 테이블 스캔을 사용하도록 유도할 때도 있다) // 데이터 웨어하우스, 통계 작업

인덱스란
책의 맨 끝 찾아보기 - 인덱스
책의 내용 - 데이터 파일
페이지 번호 - 레코드의 주소
책의 ㄱㄴㄷ정렬 - 인덱스의 정렬 보관

SortedList - 인덱스 (저장되는 값을 항상 정렬된 상태로 유지하는 자료 구조)
ArrayList - 데이터 파일 (저장된 순서대로 별도의 정렬 없이 그대로 저장)

인덱스가 많은 테이블은 INSERT, UPDATE, DELETE 문장의 처리가 느려진다. BUT, SELECT는 매우 빠르게 처리

인덱스는 INSERT, UPDATE, DELETE 성능을 희생하고 읽기 속도를 높이는 기능 

프라이머리 키는 이미 잘 아는 것처럼 그 레코드를 대표하는 칼럼의 값으로 만들어진 인덱스를 의미한다. 이 칼럼은 테이블에서 해당 레코드를 식별할 수 있는 기준값이 되기 때문에 
우리는 이를 식별자라고도 부른다. 프라이머리 키는 NULL 값을 허용하지 않으며 중복을 허용하지 않는 것이 특징이다.

프라이머리 키를 제외한 나머지 모든 인덱스는 세컨더리 인덱스로 분류한다. 유니크 인덱스는 프라이머리 키와 성격이 비슷하고 프라이머리 키를 대체해서 사용할 수도 있다고 해서 대체 키라고도 하는데,
별도로 분류하기도 하고 그냥 세컨더리 인덱스로 분류하기도 한다.

알고리즘 별 분류
B-Tree 알고리즘 - 가장 일반적으로 사용되는 인덱스 알고리즘으로서, 상당히 오래전에 도입된 알고리즘이며 그만큼 성숙해진 상태다. B-Tree 인덱스는 칼럼의 값을 변형하지 않고
원래의 값을 이용해 인덱싱하는 알고리즘이다. Mysql 서버에서는 위치 기반 검색을 지원하기 위한 R-Tree 인덱스 알고리즘도 있지만, 결국 R-Tree 인덱스는 B-Tree의 응용 알고리즘으로 볼 수 있다.

Hash 인덱스 알고리즘 - 칼럼의 값으로 해시값을 계산해서 인덱싱하는 알고리즘으로, 매우 빠른 검색을 지원한다. 하지만 값을 변형해서 인덱싱하므로 전방(Prefix) 일치와 같이
값의 일부만 검색하거나 범위를 검색할 때는 해시 인덱스를 사용할 수 없다. Hash 인덱스는 주로 메모리 기반의 데이터베이스에서 많이 사용한다.

이외에 Fractal-Tree 인덱스, 로그 기반의 Merge-Tree 인덱스와 같은 알고리즘 사용하는 DBMS도 개발되고 있다.

데이터의 중복 허용 여부별 분류
Unique, Non-Unique

인덱스의 기능별 분류
전문 검색용 인덱스, 공간 검색용 인덱스 등

* B-Tree 인덱스 (Balanced Tree)
가장 일반적, 가장 먼저 도입, 가장 범용적인 목적으로 사용되는 인덱스 알고리즘 (p221 구조 그림)
루트노드 - 최상위 노드
브랜치노드 - 중간 노드
리프노드 - 최하위 노드 / 항상 실제 데이터 레코드를 찾아가기 위한 주솟값을 가짐
/// 대부분의 RDBMS는 정렬되지 않고 임의의 순서로 저장 but, InnoDB 테이블에서는 클러스터링 되어 프라이머리 키 순서로 정렬되어 저장(=오라클의 IOT(index organized table), MS-SQL의 클러스터 테이블)
( p222 - B-tree와 MyISAM, InnoDB 관계 그림 )
MyISAM, InnoDB 스토리지 엔진의 인덱스에서 가장 큰 차이점은 세컨더리 인덱스를 통해 데이터 파일의 레코드를 찾아가는 방법에 있다.
MyISAM 테이블은 세컨더리 인덱스가 물리적인 주소를 가지는 반면 
InnoDB 테이블은 프라이머리 키를 주소처럼 사용하기 때문에 논리적인 주소를 가진다고 볼 수 있다.
-> InnoDB 테이블에서 인덱스를 통해 레코드를 읽을 때는 데이터 파일을 바로 찾아가지 못하고, 인덱스에 저장돼 있는 프라이머리 키 값을 이용해 프라이머리 키 인덱스를 한 번 더 검색한 후
프라이머리 키 인덱스의 리프 페이지에 저장돼 있는 레코드를 읽는다. 즉, 반드시 프라이머리 키를 저장하고 있는 B-Tree를 다시 한번 검색해야 한다.

인덱스 키 추가
새로운 키 값이 B-Tree에 저장될 때 테이블의 스토리지 엔진에 따라 새로운 키 값이 즉시 인덱스에 저장될 수도 있고 그렇지 않을 수도 있다. B-Tree에 저장될 때는 저장될 키 값을 이용해 B-Tree상의
적절한 위치를 검색해야 한다. 저장될 위치가 결정되면 레코드의 키 값과 대상 레코드의 주소 정보를 B-Tree의 리프노드에 저장한다 .리프 노드가 꽉차서 더는 저장할 수 없을 때는 리프 노드가 분리 돼야 하는데,
이는 상위 브랜치 노드까지 처리의 범위가 넓어진다. 이러한 작업 탓에 B-Tree는 상대적으로 쓰기작업에 비용이 많이 드는 것으로 알려졌다.

대략적 비용 계산 (디스크로부터 인덱스 페이지를 읽고 쓰기를 해야 해서 걸리는 시간)
테이블에 레코드를 추가하는 작업 비용을 1이라 가정, 해당 테이블의 인덱스에 키를 추가하는 작업 비용을 1.5 정도로 예측
if) 테이블의 모든 인덱스가 B-Tree인 경우
테이블에 인덱스가 하나도 없는 경우 작업비용 = 1
테이블에 인덱스가 3개인 경우 ( 3 * 1.5 + 1 ) = 5.5 

InnoDB 스토리지 엔진의 경우 필요하다면 인덱스 키 추가 작업을 지연시켜 나중에 처리 (체인지 버퍼를 활용) //  MyISAM, MEMORY 경우 즉시 키 값을 변경 

인덱스 키 삭제
해당 키 값이 저장된 B-Tree의 리프 노드를 찾아서 그냥 삭제 마크만 하면 작업이 완료 된다. ( 삭제 마킹도 디스크 I/O이 필요함 )
5.5 이상 InnoDB 경우 추가와 같이 지연 처리 가능 

인덱스 키 변경
단순히 인덱스 상의 키 값만 변경하는 것이 아닌, 삭제 후 추가 작업을 한다. InnoDB의 경우 체인지 버퍼를 활용해 지연 처리 가능하다.

인덱스 키 검색
인덱스를 검색하는 작업은 B-Tree의 루트 노드부터 시작해 브랜치 노드를 거쳐 최종 리프 노드까지 이동하면서 비교 작업을 수행하는데, 이 과정을 '트리 검색'이라고 한다.
SELECT의 경우, UPDTAE, DELETE를 처리하기 위해 항상 해당 레코드를 먼저 검색해야 할 경우 사용
B-Tree 인덱스를 이용한 검색은 100% 일치 또는 값의앞부분만 일치하는 경우 사용. 부등호 비교 조건 가능. 
하지만 키 값의 뒷부분만 검색하는 용도로는 사용 불가하다.
* 인덱스의 키 값에 변형이 가해진 후 비교하는 경우 B-Tree의 빠른 검색 기능을 사용할 수 없다. ( 함수나 연산을 수행한 결과로 정렬, 검색 하는 경우 )

* InnoDB 테이블에서 지원하는 레코드 잠금이나 넥스트 키락(갭락)이 검색을 수행한 인덱스를 잠근 후 테이블의 레코드를 잠그는 방식으로 구현돼 있다.
따라서 UPDATE나 DELETE문장이 실행될 때 테이블에 적절히 사용할 수 있는 인덱스가 없으면 불필요하게 많은 레코드를 잠근다. 테이블의 모든 레코드를 잠글 수 있다. 설계가 중요하다.

B-Tree 인덱스 사용에 영향을 미치는 요소
B-Tree 인덱스는 인덱스를 구성하는 칼럼의 크기와 레코드의 건수, 그리고 유니크한 인덱스 키 값의 개수 등에 의해 검색이나 변경 작업의 성능이 영향을 받는다.

인덱스 키 값의 크기
InnoDB 스토리지 엔진은 디스크에 데이터를 저장하는 가장 기본 단위를 페이지 또는 블록이라고 하며, 디스크의 모든 읽기 및 쓰기 작업의 최소 작업 단위가 된다. 
또한 페이지는 InnoDB 스토리지 엔진의 버퍼 풀에서 데이터를 버퍼링하는 기본 단위이기도 하다. 인덱스도 결국은 페이지 단위로 관리되며, 루트와 브랜치, 리프 노드를 구분한 기준이 페이지다.
DBMS의 B-Tree는 자식 노드의 개수가 가변적인 구조다. 자식 노드의 갯수는 인덱스의 페이지 크기와 키 값의 크기에 따라 결정된다. 
페이지의 크기는 5.7 부터 innodb_page_size - 4KB ~ 64KB 선택 가능 default는 16KB이다.
인덱스 페이지의 구성(default 16KB)
if) 인덱스의 키 - 16byte , 자식 노드 주소 영역 12byte (6~12byte)
하나의 인덱스 페이지(16KB)에 몇 개의 키 저장할 수 있을까? 16*1024/(16+12) = 585 / 자식노드 585개를 가질 수 있는 B-Tree
만약 인덱스의 키가 32byte로 커진다면 16*1024/(32+12) = 372개 B-Tree
-> SELECT의 쿼리가 레코드 500개를 읽어야 한다면 전자의 경우 인덱스 페이지 한 번으로 해결될 수도 있지만, 후자의 경우는 최소 두번 디스크로부터 읽어야 한다

인덱스 키 값의 길이가 길어진다는 것은 전체적인 인덱스의 크기가 커진다는 것을 의미한다. 하지만 인덱스를 캐시해 두는 InnoDB의 버퍼 풀이나 MyISAM의 키 캐시 영역은 크기가 제한적이기 때문에
하나의 레코드를 위한 인덱스 크기가 커지면 커질수록 메모리에 캐시해 둘 수 있는 레코드 수는 줄어든다. 
-> 메모리의 효율이 떨어지는 결과

B-Tree 깊이
B-Tree 인덱스의 깊이는 상당히 중요하지만 직접 제어할 방법은 없다. 
깊이가 3, 키 값이 16byte(585개)인 경우 585*585*585 = 최대 2억개의 키 값을 담을 수 있지만
깊이가 3, 키 값이 32byte(372개)인 경우 372*372*372 = 최대 5천만개로 줄어 든다.
-> 결론적으로 키 값이 커지면 인덱스 페이지가 담을 수 있는 키 값의 개수가 적어지고, 같은 레코드의 건수 일 경우 깊이(depth)가 깊어져 더 많은 읽기가 필요하게 된다.
-> 실제론 아무리 대용량 데이터베이스라도 B-Tree의 깊이가 5단계 이상까지 깊어지는 경우는 흔치 않다.

선택도(기수성)
모든 인덱스 키 값 가운데 유니크한 값의 수를 의미. 전체 인덱스 키값은 100개 인데, 그 중에서 유니크한 값의 수는 10개라면 기수성은 10이다. 
중복된 값이 많아지면, 기수성, 선택도가 낮아진다. 인덱스는 선택도가 높을수록 검색 대상이 줄어들기 때문에 그만큼 빠르게 처리된다.
* 선택도가 좋지 않다고 하더라도 정렬이나 그루핑과 같은 작업을 위해 인덱스를 만드는 것이 훨씬 나은 경우도 많다. (항상 검색에만 사용되는 것은 아니므로)

p228 유니크한 값의 개수는 인덱스나 쿼리의 효율성에 큰 영향을 미친다
-> 전체 레코드 개수/ 유니크한 값의 개수 = 대략적으로 하나의 키 값으로 검색 시 나올 레코드 개수

읽어야 하는 레코드의 개수 
ex) 100만 건의 레코드 ( 효율 찾기 )
1) 전체 테이블을 읽어 절반을 버리는 것 ?
2) 인덱스를 통해 50만건만 읽어오는 것 ?

인덱스를 이용한 읽기의 손익 분기점 찾기
일반적인 DBMS의 옵티마이저에서 인덱스를 통해 레코드 1건을 읽는 것이 테이블에서 직접 레코드 1건을 읽는 것 보다 4~5배 정도 비용이 더 많이 드는 작업인 것으로 예측한다. 
즉 인덱스로 읽어야 할 레코드의 건수가 전체 건수의 20~25%가 넘어서면 테이블을 모두 직접 읽어서 필요한 레코드만 가려내는 방식으로 처리하는 것이 효율적이다 .
-> 위의 경우 Mysql 옵티마이저가 인덱스를 이용하지 않고 직접 테이블 전체를 읽어서 처리 할 것이다. (힌트도 무시)

B-Tree 인덱스를 통한 데이터 읽기 - 인덱스 유도 여부 판단하기 위한 인덱스 사용 방법

인덱스 레인지 스캔

인덱스 풀 스캔

루스 인덱스 스캔

인덱스 스킵 스캔







