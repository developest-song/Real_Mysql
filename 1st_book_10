실행계획
대부분의 DBMS는 많은 데이터를 안전하게 저장 및 관리하고 사용자가 원하는 데이터를 빠르게 조회 할 수 있게 해주는 것이 주목적이다.
이러한 목적을 달성하려면 옵티마이저가 사용자의 쿼리를 최적으로 처리될 수 있게 하는 쿼리의 실행 계획을 수립할 수 있어야 한다.
하지만 옵티마이저가 관리자나 사용자의 개입 없이 항상 좋은 실행 계획을 만들어낼 수 있는 것은 아니다. DBMS 서버는 이러한 문제점을
관리자나 사용자가 보완할 수 있도록 EXPLAIN 명령으로 옵티마이저가 수립한 실행 계획을 확인할 수 있게 해준다.

하지만 Mysql 서버에서 보여주는 실행 계획을 읽고 이해하려면 Mysql 서버가 데이터를 처리하는 로직을 이해할 필요가 있다.

통계 정보
Mysql 서버는 5.7 버전까지 테이블과 인덱스에 대한 개괄적인 정보를 가지고 실행 계획을 수립했다.
하지만 이는 테이블 칼럼의 값들이 실제 어떻게 분포돼 있는지에 대한 정보가 없기 때문에 실행 계획의 정확도가 떨어지는 경우가 많았다.
그래서 8.0 부터는 인덱스되지 않은 칼럼들에 대해서도 데이터 분포도를 수집해서 저장하는 히스토그램 정보가 도입됐다. 히스토그램이
도입됐다고 해서 기존의 테이블이나 인덱스의 통계 정보가 필요치 않은 것은 아니다.

테이블 및 인덱스 통계 정보
비용 기반 최적화에서 가장 중요한 것은 통계 정보다. 통계 정보가 정확하지 않다면 전혀 엉뚱한 방향으로 쿼리를 실행할 수 있기 때문이다.
예를 들어, 1억 건의 레코드가 저장된 테이블의 통계 정보가 갱신되지 않아서 레코드가 10건 미만인 것처럼 돼 있다면 옵티마이저는 실제
쿼리를 실행할 때 인덱스 레인지 스캔이 아니라 테이블을 처음부터 끝까지 읽는 방식(풀 테이블 스캔)으로 실행해 버릴 수도 있다. 

Mysql 또한 다른 DBMS와 같이 비용 기반의 최적화를 사용하지만, 다른 DBMS보다 통계 정보의 정확도가 높지 않고 통계 정보의 휘발성이 강했다.
그래서 Mysql 서버에서는 쿼리의 실행 계획을 수립할 때 실제 테이블의 데이터를 일부 분석해서 통계 정보를 보완해서 사용했다. 
이러한 이유로 5.6 부터는 통계 정보의 정확성을 높일 수 있는 방법이 제공되기 시작했지만 아직도 많은 사용자가 기존 방식을 그대로 사용한다.

Mysql 서버의 통계 정보
5.6 버전부터는 InnoDB 스토리지 엔진을 사용하는 테이블에 대한 통계 정보를 영구적으로 관리할 수 있게 개선됐다. 
5.5 버전까지는 각 테이블의 통계 정보가 메모리에만 관리되고, SHOW INDEX 명령으로만 테이블의 인덱스 칼럼의 분포도를 볼 수 있었다.
이처럼 통계 정보가 메모리에 관리될 경우 Mysql 서버가 재시작되면 지금까지 수집된 통계 정보가 모두 사라진다. 
5.6 버전부터는 각 테이블의 통계 정보를 mysql 데이터베이스의 innodb_index_stats 테이블과 innodb_table_stats 테이블로 관리할 수
있게 개선됐다. 이렇게 통계 정보를 테이블로 관리함으로써 Mysql 서버가 재시작돼도 기존의 통계 정보를 유지할 수 있게 됐다.

5.6에서 테이블을 생성할 때는 STATS_PERSISTENT 옵션을 설정할 수 있는데, 이 설정값에 따라 테이블 단위로 영구적인 통계 정보를 
보관할지 말지를 결정할 수 있다.

CREATE TABLE tab_test (fd1 INT, fd2 VARCHAR(20), PRIMARY KEY(fd1))
  ENGINE=InnoDB
  STATS_PERSISTENT={ DEFAULT | 0 | 1 }
-> 0 : 테이블의 통계 정보를 Mysql 5.5 이전의 방식대로 관리하며, mysql.(innodb_index_stats, innodb_table_stats)에 저장하지 않음
   1 : 테이블의 통계 정보를 mysql.(innodb_index_stats, innodb_table_stats)에 저장함
   DEFAULT : 테이블을 생성할 때 별도로 STATS_PERSISTENT 옵션을 설정하지 않은 것과 동일하며, 테이블의 통계를 영구적으로 관리할지 말지를
   innodb_stats_persistent 시스템 변수의 값으로 결정한다.
innodb_stats_persistent는 기본적으로 ON(1)이며, STATS_PERSISTENT 옵션 없이 테이블 생성 시 영구적인 통계 정보를 사용하며,
 mysql.(innodb_index_stats, innodb_table_stats)에 통계 정보를 저장한다.
 
영구적 (1), 단기적 (0) 변경 가능
ALTER TABLE employees.employees STATS_PERSISTENT=1; 처럼 변경가능 

통계 정보의 각 칼럼의 의미
