실행계획
대부분의 DBMS는 많은 데이터를 안전하게 저장 및 관리하고 사용자가 원하는 데이터를 빠르게 조회 할 수 있게 해주는 것이 주목적이다.
이러한 목적을 달성하려면 옵티마이저가 사용자의 쿼리를 최적으로 처리될 수 있게 하는 쿼리의 실행 계획을 수립할 수 있어야 한다.
하지만 옵티마이저가 관리자나 사용자의 개입 없이 항상 좋은 실행 계획을 만들어낼 수 있는 것은 아니다. DBMS 서버는 이러한 문제점을
관리자나 사용자가 보완할 수 있도록 EXPLAIN 명령으로 옵티마이저가 수립한 실행 계획을 확인할 수 있게 해준다.

하지만 Mysql 서버에서 보여주는 실행 계획을 읽고 이해하려면 Mysql 서버가 데이터를 처리하는 로직을 이해할 필요가 있다.

통계 정보
Mysql 서버는 5.7 버전까지 테이블과 인덱스에 대한 개괄적인 정보를 가지고 실행 계획을 수립했다.
하지만 이는 테이블 칼럼의 값들이 실제 어떻게 분포돼 있는지에 대한 정보가 없기 때문에 실행 계획의 정확도가 떨어지는 경우가 많았다.
그래서 8.0 부터는 인덱스되지 않은 칼럼들에 대해서도 데이터 분포도를 수집해서 저장하는 히스토그램 정보가 도입됐다. 히스토그램이
도입됐다고 해서 기존의 테이블이나 인덱스의 통계 정보가 필요치 않은 것은 아니다.

테이블 및 인덱스 통계 정보
비용 기반 최적화에서 가장 중요한 것은 통계 정보다. 통계 정보가 정확하지 않다면 전혀 엉뚱한 방향으로 쿼리를 실행할 수 있기 때문이다.
예를 들어, 1억 건의 레코드가 저장된 테이블의 통계 정보가 갱신되지 않아서 레코드가 10건 미만인 것처럼 돼 있다면 옵티마이저는 실제
쿼리를 실행할 때 인덱스 레인지 스캔이 아니라 테이블을 처음부터 끝까지 읽는 방식(풀 테이블 스캔)으로 실행해 버릴 수도 있다. 

Mysql 또한 다른 DBMS와 같이 비용 기반의 최적화를 사용하지만, 다른 DBMS보다 통계 정보의 정확도가 높지 않고 통계 정보의 휘발성이 강했다.
그래서 Mysql 서버에서는 쿼리의 실행 계획을 수립할 때 실제 테이블의 데이터를 일부 분석해서 통계 정보를 보완해서 사용했다. 
이러한 이유로 5.6 부터는 통계 정보의 정확성을 높일 수 있는 방법이 제공되기 시작했지만 아직도 많은 사용자가 기존 방식을 그대로 사용한다.

Mysql 서버의 통계 정보
5.6 버전부터는 InnoDB 스토리지 엔진을 사용하는 테이블에 대한 통계 정보를 영구적으로 관리할 수 있게 개선됐다. 
5.5 버전까지는 각 테이블의 통계 정보가 메모리에만 관리되고, SHOW INDEX 명령으로만 테이블의 인덱스 칼럼의 분포도를 볼 수 있었다.
이처럼 통계 정보가 메모리에 관리될 경우 Mysql 서버가 재시작되면 지금까지 수집된 통계 정보가 모두 사라진다. 
5.6 버전부터는 각 테이블의 통계 정보를 mysql 데이터베이스의 innodb_index_stats 테이블과 innodb_table_stats 테이블로 관리할 수
있게 개선됐다. 이렇게 통계 정보를 테이블로 관리함으로써 Mysql 서버가 재시작돼도 기존의 통계 정보를 유지할 수 있게 됐다.

5.6에서 테이블을 생성할 때는 STATS_PERSISTENT 옵션을 설정할 수 있는데, 이 설정값에 따라 테이블 단위로 영구적인 통계 정보를 
보관할지 말지를 결정할 수 있다.

CREATE TABLE tab_test (fd1 INT, fd2 VARCHAR(20), PRIMARY KEY(fd1))
  ENGINE=InnoDB
  STATS_PERSISTENT={ DEFAULT | 0 | 1 }
-> 0 : 테이블의 통계 정보를 Mysql 5.5 이전의 방식대로 관리하며, mysql.(innodb_index_stats, innodb_table_stats)에 저장하지 않음
   1 : 테이블의 통계 정보를 mysql.(innodb_index_stats, innodb_table_stats)에 저장함
   DEFAULT : 테이블을 생성할 때 별도로 STATS_PERSISTENT 옵션을 설정하지 않은 것과 동일하며, 테이블의 통계를 영구적으로 관리할지 말지를
   innodb_stats_persistent 시스템 변수의 값으로 결정한다.
innodb_stats_persistent는 기본적으로 ON(1)이며, STATS_PERSISTENT 옵션 없이 테이블 생성 시 영구적인 통계 정보를 사용하며,
 mysql.(innodb_index_stats, innodb_table_stats)에 통계 정보를 저장한다.
 
영구적 (1), 단기적 (0) 변경 가능
ALTER TABLE employees.employees STATS_PERSISTENT=1; 처럼 변경가능 

통계 정보의 각 칼럼의 의미
innodb_index_stats.stat_name='n_diff_pfx%' : 인덱스가 가진 유니크한 값의 개수
innodb_index_stats.stat_name='n_leaf_pages' : 인덱스의 리프 노드 페이지 개수
innodb_index_stats.stat_name='size' : 인덱스 트리의 전체 페이지 개수
innodb_table_stats.n_rows : 테이블의 전체 레코드 건수
innodb_table_stats.clustered_index_size : 프라이머리 키의 크기(InnoDB 페이지 개수)
innodb_table_stats.sum_of_other_index_sizes : 프라이머리 키를 제외한 인덱스의 크기(InnoDB 페이지 개수)
* sum_of_other_index_sizes의 값은 STATS_AUTO_RECALC 옵션에 따라 0으로 보일 수 있는데 
 이 경우 ANALYZE TABLE employees.employees; 하면 통곗값이 저장된다.
 
STATS_AUTO_RECALC = 1 (테이블의 통계 정보를 5.5이전의 방식대로 자동 수집) (5.5 갱신 p398)
                    0 (ANALYZE TABLE 명령을 실행할 때만 수집)
                    DEFAULT ( innodb_stats_auto_recalc 시스템 설정 변수의 값으로 결정, 설정하지 않은 것과 동일 )
innodb_stats_auto_recalc = ON (default이며, 자동 갱신)
                           OFF (통계 정보가 자동으로 갱신되지 않음)

innodb_stats_transient_sample_pages : default 8, 자동으로 통계 정보 수집이 실행될 때 8개 페이지만 
                                      임의로 샘플링해서 분석하고 그 결과를 통계 정보로 활용함
innodb_stats_persistent_sample_pages : default 20, ANALYZE TABLE 명령 실행 시 임의로 20개 페이지만 
                                       샘플링해서 분석, 그 결과를 영구적인 통계 정보 테이블에 저장 및 활용함

더 정확한 통계 정보를 수집하고자 한다면 innodb_stats_persistent_sample_pages에 높은 값을 설정하면 된다. (정보 수집시간 길어짐)

히스토그램
5.7 까지의 통계 정보는 단순히 인덱스된 칼럼의 유니크한 값의 개수 정도만 가지고 있었는데, 이는 옵티마이저가 최적의 실행 계획을 수립하기에는 
많이 부족했다. 그래서 옵티마이저는 이러한 부족함을 메우기 위해 실행 계회긍ㄹ 수립할 때 실제 인덱스의 일부 페이지를 랜덤으로 가져와 참조하는
방식을 사용했다. 8.0 버전으로 업그레이드 되면서 Mysql 서버도 드디어 칼럼의 데이터 분포도를 참조할 수 있는 히스토그램 정보를 
활용할 수 있게 됐다.

히스토그램 정보 수집 및 삭제
8.0 버전에서 히스토그램 정보는 칼럼 단위로 관리되는데, 이는 자동으로 수집되지 않고 ANALYZE TABLE ... UPDATE HISTOGRAM 명령을 실행해
수동으로 수집 및 관리된다. 수집된 히스토그램 정보는 시스템 딕셔너리에 함께 저장되고, Mysql 서버가 시작될 때 딕셔너리의 히스토그램 정보를 
information_schema 데이터베이스의 column_statistics 테이블로 로드한다. 그래서 실제 히스토그램 정보를 조회하며녀 column_statistics
테이블을 SELECT해서 참조할 수 있다.
ex) 
ANALYZE TABLE employees.employees UPDATE HISTOGRAM ON gender, hire_date;

SELECT *
  FROM INFORMATION_SCHEMA.COLUMN_STATISTICS 
 WHERE SCHEMA_NAME='employees' 
   AND TABLE_NAME ='employees'\G

8.0 버전에서는 다음과 같이 2종류의 히스토그램 타입이 지원된다.
Singleton(싱글톤 히스토그램): 칼럼값 개별로 레코드 건수를 관리하는 히스토그램으로, 
                             Value-Based 히스토그램 또는 도수 분포라고도 불린다.
Equi-Height(높이 균형 히스토그램) : 칼럼값의 범위를 균등한 개수로 구분해서 관리하는 히스토그램으로, 
                                  Height-Balanced 히스토그램이라고도 불린다.

히스토그램은 버킷(Bucket) 단위로 구분되어 레코드 건수나 칼럼값의 범위가 관리되는데, 싱글톤 히스토그램은 칼럼이 가지는 값별로 
버킷이 할당되며 높이 균형 히스토그램에서는 개수가 균등한 칼럼값의 범위별로 하나의 버킷이 할당된다. 싱글톤 히스토그램은 각 버킷이 
칼럼의 값과 발생 빈도의 비율의 2개 값을 가진다. 반면 높이 균형 히스토그램은 각 버킷이 범위 시작 값과 마지막 값, 그리고 발생 빈도율과
각 버킷에포함된 유니크한 값의 개수 등 4개의 값을 가진다.
(p 402, 10.1 - gender 칼럼에 생성된 싱글톤 히스토그램, 10.2 hire_date 칼럼에 생성된 높이 균형 히스토그램)
gender - enum('M', 'F'), hire_date - date

싱글톤 히스토그램은 주로 코드 값과 같이 유니크한 값의 개수가 상대적으로 적은(히스토그램의 버킷 수보다 적은) 경우 사용된다. 
싱글톤 히스토그램에서 gender 칼럼의 값이 'M'인 레코드의 비율은 0.5998정도이며, 'F'인 레코드의 비율은 1로 표시된다. 
그런데 히스토그램의 모든 레코드 건수 비율은 누적으로 표시된다. 그래서 gender 칼럼의 값이 'F'인 레코드의 비율은 1-0.5998이 된다.

높이 균형 히스토그램은 칼럼값의 각 범위에 대해 레코드 건수 비율이 누적으로 표시된다. 그래서 히스토그램의 버킷 범위가 뒤로 갈 수록
비율이 높아지는 것으로 보이지만, 사실은 범위별로 비율이 같은 수준에서 hire_date 칼럼의 범위가 선택된 것이다.* 
그래프의 기울기가 일정한 것을 보면 각 범위가 비슷한 값(레코드의 건수)을 가진다는 것을 알 수 있다.

 information_schema.column_statistics 테이블의 HISTOGRAM 칼럼이 가진 나머지 필드들의 의미
sampling-rate : 히스토그램 정보를 수집하기 위해 스캔한 페이지의 비율을 저장한다.
    샘플링 비율이 0.35라면 전체 데이터 페이지의 35%를 스캔해서 이 정보가 수집됐다는 것을 의미한다. 물론 샘플링 비율이 높아질수록 더 정확한
    히스토그램이 되겠지만, 테이블을 전부 스캔하는 것은 부하가 높으며 시스템의 자원을 많이 소모한다. 그래서 Mysql 서버는 
    histogram_generation_max_mem_size 시스템 변수에 설정된 메모리 크기에 맞게 적절히 샘플링 한다.
    histogram_generation_max_mem_size 시스템 변수의 메모리 크기는 20MB로 초기화돼 있다.
histogram-type : 히스토그램의 종류를 저장
number-of-buckets-specified : 히스토그램을 생성할 때 설정했던 버킷의 개수를 저장. 별도로 개수를 지정하지 않았다며 기본으로 100를 사용한다.
    버킷은 최대 1024개를 설정할 수 있지만, 일반적으로 100개의 버킷이면 충분하다고 알려져 있다.

8.0.19 미만의 버전까지는 히스토그램 생성 시 sampling-rate, histogram_generation_max_mem_size 시스템 변수의 크기에 관계없이 Mysql서버는
풀 스캔을 통해 데이터 페이지를 샘플링해서 히스토그램을 생성했다. 하지만 8.0.19 버전부터 InnoDB 스토리지 엔진 자체적으로 샘플링 알고리즘을
구현했으며, 더이상 히스토그램 수집 시 풀 테이블 스캔이 필요치 않게 됐다.

생성된 히스토그램은 다음과 같이 삭제할 수 있다. 히스토그램의 삭제 작업은 테이블의 데이터를 참조하는 것이 아니라 딕셔너리의 내용만 삭제하기
때문에 다른 쿼리 처리의 성능에 영향을 주지 않고 즉시 완료된다. 하지만 히스토그램이 사라지면 쿼리의 실행 계획이 달라질 수 있다.
ANALYZE TABLE employees.employees DROP HISTOGRAM ON gender, hire_date;

히스토그램을 삭제하지 않고 Mysql 옵티마이저가 히스토그램을 사용하지 않게 하려면 다음과 같이 optimizer_switch 시스템 변수의 값을 변경하면 된다.
SET GLOBAL optimizer_switch='condition_fanout_filter=off';

특정 커넥션 또는 특정 쿼리에서만 히스토그램을 사용하지 않고자 한다면 다음과 같은 방법을 사용하면 된다.
현재 커넥션만 해당
SET SESSION optimizer_switch='condition_fanout_filter=off';

현재 쿼리만 해당
SELECT /*+ SET_VAR(optimizer_switch='condition_fanout_filter=off') */ * FROM ...

히스토그램의 용도
Mysql 서버에 히스토그램이 도입되기 이전에도 테이블과 인덱스에 대한 통계 정보는 존재했다. 하지만 기존 Mysql 서버가 가지고 있던 통계 정보는
테이블의 전체 레코드 건수와 인덱스된 칼럼이 가지는 유니크한 값의 개수 정도였다. 예를 들어, 테이블의 레코드가 1000건이고 어떤 칼럼의 유니크한
값 개수가 100개였다면 Mysql 서버는 이 칼럼에 대해 다음과 같은 동등 비교 검색을 하면 대략 10개의 레코드가 일치할 것이라고 예측한다.
ex) SELECT * FROM order WHERE user_id='matt.lee';

하지만 실제 응용 프로그램의 데이터는 항상 균등한 분포도를 가지지 않는다. 어떤 사용자는 주문 레코드를 많이 가지고 있고 또 다른 사용자들은
주문 정보가 하나도 없을 수 있다. 그렇지만 Mysql 서버의 기존 통계 정보는 이런 부분을 고려하지 못했다. 이러한 단점을 보완하기 위해 히스토그램이
도입됐다. 히스토그램은 특정 칼럼이 가지는 모든 값에 대한 분포도 정보를 가지지는 않지만 각 범위(버킷)별로 레코드의 건수와 유니크한 값의 개수
정보를 가지기 때문에 훨씬 정확한 예측을 할 수 있다. 

예제)
간단히 employees 테이블의 birth_date 칼럼에 대해 히스토그램이 없을 때와 히스토그램이 있을 때의 예측치가 얼마나 달라지는지 한 번 살펴보자.
EXPLAIN SELECT * FROM employees WHERE first_name='Zita' AND birth_date BETWEEN '1950-01-01' AND '1960-01-01';
-> key: ix_firstname으로 인한 rows 224건 그 중 filtered 11.11% 

ANALYZE TABLE employees UPDATE histogram ON first_name, birth_date; 
EXPLAIN SELECT * FROM employees WHERE first_name='Zita' AND birth_date BETWEEN '1950-01-01' AND '1960-01-01';
-> key: ix_firstname으로 인한 rows 224건 그 중 filtered 60.82%

실제값
SELECT SUM(CASE WHEN birth_date between '1950-01-01' and '1960-01-01' THEN 1 ELSE 0 END) / COUNT(*) as ratio
  FROM employees WHERE first_name='Zita';  // ratio : 0.6384
-> 11.11% / 60.82% // 63.84%의 결과 : birth_date 로 인한 예측 값이 히스토그램의 유무에 따른 큰 차이를 볼 수 있다.

히스토그램 정보가 없으면 옵티마이저는 데이터가 균등하게 분포돼 있을 것으로 예측한다. 하지만 히스토그램이 있으면 특정 범위의 데이터가
많고 적음을 식별할 수 있다. 다음 예제는 2개의 테이블을 조인하는데, 옵티마이저 힌트를 이용해 강제로 조인의 순서를 바꿔 성능을 살펴본 것이다. 
SELECT /*+ JOIN_ORDER(e, s) */ * 
  FROM salaries s INNER JOIN employees e ON e.emp_no=s.emp_no
   AND e.birth_date BETWEEN '1950-01-01' AND '1950-02-01'
  WHERE s.salary BETWEEN 40000 AND 70000;

SELECT /*+ JOIN_ORDER(s, e) */ * 
  FROM salaries s INNER JOIN employees e ON e.emp_no=s.emp_no
   AND e.birth_date BETWEEN '1950-01-01' AND '1950-02-01'
  WHERE s.salary BETWEEN 40000 AND 70000;

두 쿼리 모두 동일한 결과를 만들어 내지만 employees 테이블을 먼저 읽은 경우 조인을 해야 할 건수가 salaries 테이블을 먼저 읽은 경우보다 훨씬
적다. birth_date 칼럼과 salary 칼럼은 인덱스되지 않은 칼럼이어서 이 칼럼들에 히스토그램이 없다면 옵티마이저는 이 칼럼들의 데이터 분포를 전혀
알지 못하고 실행 계획을 수립하게 된다. 때문에 옵티마이저 힌트를 제거했을 때 옵티마이저는 테이블의 전체 레코드 건수가 크기 등의 단순한 정보만으로
조인의 드라이빙 테이블을 결정하게된다. 상황에 따라 어떤 테이블이라도 조인의 드라이빙 테이블이 될 수 있는 것이다. 

이러한 차이로 인해 쿼리의 성능은 10배 정도 차이를 보일 수 있으며, InnoDB 버퍼 풀에 데이터가 존재하지 않아서 디스크에서 데이터를 읽어야 하는 
경우라면 몇 배의 차이가 발생할 수도 있다. 각 칼럼에 대해 히스토그램 정보가 있으면 어느 테이블을 먼저 읽어야 조인의 횟수를 줄일 수 있을지 
옵티마이저가 더 정확히 판단할 수 있다.

히스토그램과 인덱스
히스토그램과 인덱스는 완전히 다른 객체이기 때문에 서로 비교할 대상은 아니지만, Mysql 서버에서 인덱스는 부족한 통계 정보를 수집하기 위해
사용된다는 측면에서 어느 정도 공통점을 가진다고 볼 수 있다. Mysql 서버에서는 쿼리의 실행 계획을 수립할 때 사용 가능한 인덱스들로부터 조건절에
일치하는 레코드 건수를 대략 파악하고 최종적으로 가장 나은 실행 계획을 선택한다. 이때 조건절에 일치하는 레코드 건수를 예측하기 위해 옵티마이저는
실제 인덱스의 B-Tree를 샘플링해서 살펴본다. 이 작업을 메뉴얼에서는 "인덱스 다이브"라고 표현한다.

쿼리의 검색 조건으로 많이 사용되는 칼럼에 대해서는 일반적으로 인덱스를 생성한다. 그런데 이렇게 인덱스된 칼럼에 대해 히스토그램 정보를 수집해
두는 것이 좋을지 고민스러울 수 있다. 다음 쿼리를 한번 생각해보자.
SELECT * 
  FROM employees 
 WHERE first_name='Tonny' 
   AND birth_date BETWEEN '1954-01-01' AND '1955-01-01';
   
옵티마이저는 테이블 풀 스캔을 할지 first_name 칼럼의 인덱스를 이용할지 고민할 것이다. birth_date 칼럼에는 인덱스가 없으므로
이 쿼리에서 birth_date 칼럼은 실행 계획에 큰 영향을 미치지 않을 것이다. first_name 칼럼에 히스토그램이 수집돼 있었다면 Mysql 옵티마이저는
그 히스토그램을 이용하게 될까? 8.0서버에서는 인덱스된 칼럼을 검색 조건으로 사용하는 경우 그 칼럼의 히스토그램은 사용하지 않고 실제 인덱스 다이브를
통해 직접 수집한 정보를 활용한다. 이는 실제 검색 조건의 대상 값에 대한 샘플링을 실행하는 것이므로 항상 히스토그램보다 정확한 결과를 기대할 수 있기
때문이다. 그래서 8.0 버전에서 히스토그램은 주로 인덱스되지 않은 칼럼에 대한 데이터 분포도를 참조하는 용도로 사용된다. *

하지만 인덱스 다이브 작업은 어느 정도의 비용이 필요하며, 때로는 (IN 절에 값이 많이 명시된 경우) 실행 계획 수립만으로도 상당한 인덱스 다이브를
실행하고 비용도 그만큼 커진다. 아마 조만간 실제 인덱스 다이브를 실행하기보다는 히스토그램을 활용하는 최적화 기능도 Mysql 서버에 추가되지 않을까
생각된다.

코스트 모델(Cost Model)
Mysql 서버가 쿼리를 처리하려면 다음과 같은 다양한 작업을 필요로 한다.
- 디스크로부터 데이터 페이지 읽기
- 메모리(InnoDB 버퍼 풀)로부터 데이터 페이지 읽기
- 인덱스 키 비교
- 레코드 평가
- 메모리 임시 테이블 작업
- 디스크 임시 테이블 작업

Mysql 서버는 사용자의 쿼리에 대해 이러한 다양한 작업이 얼마나 필요한지 예측하고 전체 작업 비용을 계산할 결과를 바탕으로 최적의 실행 계획을 찾는다.
이렇게 전체 쿼리의 비용을 계산하는 데 필요한 단위 작업들의 비용을 코스트 모델이라고 한다. 5.7이전까지는 이런 작업들의 비용을 Mysql 서버 소스 코드에
상수화해서 사용했다. 하지만 이 작업들의 비용은 Mysql 서버가 사용하는 하드웨어에 따라 달라질 수 있기 때문에 예전 버전처럼 고정된 비용을 일률적으로
적용하는 것은 최적의 실행 계획 수립에 있어서 방행 요소였다.

이런 단점을 보완하기 위해 5.7버전부터 Mysql 서버의 소스 코드에 상수화돼 있던 각 단위 작업의 비용을 DBMS 관리자가 조정할 수 있게 개선됐다.
하지만 5.7버전에서는 인덱스되지 않은 칼럼의 데이터 분포(히스토그램)나 메모리에 상주 중인 페이지의 비율 등 비용 계산과 연관된 부분의 정보가 부족한
상태였다. 8.0 버전으로 업그레이드되면서 비로소 칼럼의 데이터 분포를 위한 히스토그램과 각 인덱스별 메모리에 적재된 페이지의 비율이 관리되고
옵티마이저의 실행 계획 수립에 사용되기 시작했다.

8.0 서버의 코스트 모델은 다음 2개 테이블에 저장돼 있는 설정값을 사용하는데, 두 테이블 모두 mysql DB에 존재한다.
server_cost : 인덱스를 찾고 레코드를 비교하고 임시 테이블 처리에 대한 비용 관리 
engine_cost : 레코드를 가진 데이터 페이지를 가져오는 데 필요한 비용 관리

server_cost 테이블과 engine_cost 테이블은 공통으로 다음 5개의 칼럼을 가지고 있다. 참고로 last_updated와 comment 칼럼의 값은 Mysql 서버
옵티마이저에 영향을 미치는 정보는 아니며, 단순 정보성으로 관리되는 칼럼이다.
cost_name : 코스트 모델의 각 단위 작업
default_value : 각 단위 작업의 비용(기본값이며, 이 값은 Mysql 서버 소스 코드에 설정된 값)
cost_value : DBMS 관리자가 설정한 값(이 값이 NULL이면 Mysql 서버는 default_value 칼럼의 비용 사용)
last_updated : 단위 작업의 비용이 변경된 시점
comment : 비용에 대한 추가 설명

engine_cost 테이블은 위의 5개 칼럼에 추가로 다음 2개 칼럼을 더 가지고 있다
engine_name : 비용이 적용된 스토리지 엔진
device_type : 디스크 타입

engine_name 칼럼은 스토리지 엔진별로 각 단위 작업의 비용을 설정할 수 있는데, 기본값은 "default"다. 여기서 default는 특정 스토리지 엔진의 비용이
설정되지 않았다면 해당 스토리지 엔진의 비용으로 이 값을 적용한다는 의미이다. MEMORY, MyISAM, InnoDB 스토리지 엔진에 대해 단위 작업의 비용을
달리 설정하고자 한다면 engine_name 칼럼을 이용하면 된다. device_type은 디스크의 타입을 설정할 수 있는데, 8.0에서는 아직 이 칼럼의 값을 활용하지
않는다. 그래서 8.0에서는 "0"만 설정가능하다.

8.0 버전의 코스트 모델에서 지원하는 단위 작업
              cost_name            default_value  설명
engine_cost - io_block_read_cost           1.00   디스크 데이터 페이지 읽기
              memory_block_read_cost       0.25   메모리 데이터 페이지 읽기
server_cost - disk_temptable_create_cost  20.00   디스크 임시 테이블 생성
              disk_temptable_row_cost      0.50   디스크 임시 테이블의 레코드 읽기
              key_compare_cost             0.05   인덱스 키 비교
              memory_temptable_create_cost 1.00   메모리 임시 테이블 생성
              memory_temptable_row_cost    0.10   메모리 임시 테이블의 레코드 읽기
              row_evaluate_cost            0.10   레코드 비교

row_evaluate_cost는 스토리지 엔진이 반환한 레코드가 쿼리의 조건에 일치하는지를 평가하는 단위 작업을 의미하는데, row_evaluate_cost 값이 증가할수록
풀 테이블 스캔과 같이 많은 레코드를 처리하는 쿼리의 비용이 높아지고 반대로 레인지 스캔과 같이 상대적으로 적은 수의 레코드를 처리하는 쿼리의 비용이
낮아진다. key_compare_cost는 키 값의 비교 작업에 필요한 비용을 의미하는데, key_compare_cost 값이 증가할수록 레코드 정렬과 같이 키 값 비교
처리가 많은 경우 쿼리의 비용이 높아진다.
EXPLAIN FORMAT=TREE
 SELECT *
   FROM employees WHERE first_name='Matt'\G

EXPLAIN FORMAT=JSON
 SELECT *
   FROM employees WHERE first_name='Matt'\G

각 단위 작업의 비용을 이용해 Mysql 서버의 실행 계획에 표시되는 비용을 직접 계산해보고 싶을 수 있지만, 해당 정보들이 모두 사용자에게 표시되지 않기
때문에 직접 계산하는 것은 상당히 어렵다.

코스트 모델에서 중요한 것은 각 단위 작업에 설정되는 비용 값이 커지면 어떤 실행 계획들이 고비용으로 바뀌고 어떤 실행 계획들이 저비용으로 바뀌는지를
파악하는 것이다. 대표적으로 각 단위 작업의 비용이 변경되면 예상할 수 있는 결과들은 다음과 같다. 물론 다음 예시가 Mysql 서버 옵티마이저의
실행 계획에 미치는 영향의 전부는 아니지만, 대략 코스트 모델을 이해하고 각 단위 작업의 비용 조절을 연습해볼 수 있는 기준은 될 것이다.

- key_compare_cost 비용을 높이면 Mysql 서버 옵티마이저가 가능하면 정렬을 수행하지 않는 방향의 실행 계획을 선택할 가능성이 높아진다.            
- row_evaluate_cost 비용을 높이면 풀 스캔을 실행하는 쿼리들의 비용이 높아지고, Mysql 서버 옵티마이저는 가능하면 인덱스 레인지 스캔을 사용하는
  실행 계획을 선택할 가능성이 높아진다.
- disk_temptable_create_cost와 disk_temptable_row_cost 비용을 높이면 Mysql 옵티마이저는 디스크에 임시 테이블을 만들지 않는 방향의 실행 계획을
  선택할 가능성이 높아진다.
- memory_temptable_create_cost와 memory_temptable_row_cost 비용을 높이면 Mysql 서버 옵티마이저는 메모리 임시 테이블을 만들지 않는 방향의 
  실행 계획을 선택할 가능성이 높아진다.
- io_block_read_cost 비용이 높아지면 Mysql 서버 옵티마이저는 가능하면 InnoDB 버퍼 풀에 데이터 페이지가 많이 적재돼 있는 인덱스를 사용하는
  실행 계획을 선택할 가능성이 높아진다.
- memory_block_read_cost 비용이 높아지면 Mysql 서버는 InnoDB 버퍼 풀에 적재된 데이터 페이지가 상대적으로 적다고 하더라도 그 인덱스를 사용할
  가능성이 높아진다.
  
** 코스트 모델은 Mysql 서버가 사용하는 하드웨어와 Mysql 서버 내부적인 처리 방식에 대한 깊이 있는 지식을 필요로 한다. 이런 부분에 대해 전문적인
지식을 가지고 있지 않다면 서비스에 사용되는 Mysql 서버의 engine_cost 테이블과 server_cost 테이블의 기본값을 함부로 변경하지 않는 게 좋다.
기본값으로도 Mysql 서버는 20년이 넘는 시간 동안 수많은 응용 프로그램에서 잘 사용돼 왔다.

실행 계획 확인
실행 계획은 DESC, EXPLAIN으로 확인할 수 있다. 8.0부터 EXPLAIN 명령에 사용할 수 있는 새로운 옵션이 추가됐다. 

실행 계획 출력 포맷
이전 버전에서는 EXPLAIN EXTENDED, EXPLAIN PARTITIONS 명령이 구분돼 있었지만 8.0부터 통합되어 보이도록 개선되어 문법에서 제거됐다.
8.0부터는 FORMAT 옵션을 사용하여 실행 계획의 표시 방법을 JSON, TREE, 단순 테이블 형태로 선택할 수 있다.
ex)
EXPLAIN             // 단순 테이블
 SELECT * ...
EXPLAIN FORMAT=TREE // 트리
 SELECT * ...
EXPLAIN FORMAT=JSON // JSON
 SELECT * ...
 
쿼리의 실행 시간 확인
8.0.18 버전부터는 쿼리의 실행 계획과 단계별 소요된 시간 정보를 확인할 수 있는 EXPLAIN ANALYZE 기능이 추가됐다. 물론 SHOW PROFILE 명령으로
어떤 부분에서 시간이 많이 소요되는지 확인 할 수 있지만 SHOW PROFILE 명령의 결과는 실행 계획의 단계별로 소요된 시간 정보를 보여주진 않는다.
EXPLAIN ANALYZE 명령은 항상 결과를 TREE 포맷으로 보여주기 때문에 EXPLAIN 명령에 FORMAT 옵션을 사용할 수 없다. (예제 p414)

TREE 포맷의 실행 계획에서 들여쓰기는 호출 순서를 의미하며, 실제 실행 순서는 다음 기준으로 읽으면 된다.

들여쓰기가 같은 레벨에서는 상단에 위치한 라인이 먼저 실행
들여쓰기가 다른 레벨에서는 가장 안쪽에 위치한 라인이 먼저 실행

EXPLAIN ANALYZE 명령의 결과에는 단계별로 실제 소요된 시간(actual time)과 처리한 레코드 건수(rows), 반복 횟수(loops)가 표시된다.
- actual time=0.007..0.009 : employees 테이블에서 읽은 emp_no 값을 기준으로 salaries 테이블에서 일치하는 레코드를 검색하는 데 걸린 시간(밀리초)을
  의미한다. 이때 숫자 값이 2개가 표시되는데, 첫 번째 숫자 값은 첫 번째 레코드를 가져오는데 걸린 평균 시간(밀리초)을 의미한다. 두 번째 숫자 값은
  마지막 레코드를 가져오는 데 걸린 평균 시간(밀리초)을 의미한다.
- rows=10 : employees 테이블에서 읽은 emp_no에 일치하는 salaries 테이블의 평균 레코드 건수를 의미한다.
- loops=233 : employees 테이블에서 읽은 emp_no를 이용해 salaries 테이블의 레코드를 찾는 작업이 반복된 횟수를 의미한다.
  결국 여기서는 employees 테이블에서 읽은 emp_no의 개수가 233개임을 의미한다.

actual time - 평균시간, rows - 평균 레코드 건수 -> loops 필드의 값이 1이상이기 때문에.
매번 salaries 테이블에서 첫 번째 레코드를 가져오는 데 평균 0.007밀리초가 걸렸으며, 마지막 레코드를 읽는 데는 평균 0.009밀리초가 걸린 것을 의미한다.
rows 필드의 값이 10이므로, 여기서는 salaries 테이블에서 emp_no를 검색해서 10개의 레코드를 모두 가져오는 데 평균 0.009밀리초가 걸린 것이다.

EXPLAIN ANALYZE 명령은 EXPLAIN 명령과 달리 실행 계획만 추출하는 것이 아니라 실제 쿼리를 실행하고 사용된 실행 계획과 소요된 시간을 보여주는 것이다.
그래서 쿼리의 실행 시간이 아주 많이 걸리는 쿼리라면 EXPLAIN ANALYZE 명령을 사용하면 쿼리가 완료돼야 실행 계획의 결과를 확인할 수 있다.
쿼리의 실행 계획이 아주 나쁜 경우라면 EXPLAIN 명령으로 먼저 실행 계획만 확인해서 어느 정도 튜닝한 후 EXPLAIN ANALYZE 명령을 실행하는 것이 좋다. **

실행 계획 분석
Mysql 8.0 버전부터는 EXPLAIN 명령의 결과로 출력되는 실행 계획의 포맷을 기존 테이블 포맷과 JSON, TREE 형태로 선택할 수 있다. 사실 실행 계획의
출력 포맷보다는 실행 계획이 어떤 접근 방법을 사용해서 어떤 최적화를 수행하는지, 그리고 어떤 인덱스를 사용하는지 등을 이해하는 것이 더 중요하다. 
기존 테이블 포맷으로 출력되던 실행 계획을 이해할 수 있다면 포맷이 바뀌어도 어렵지 않게 실행 계획을 이해할 수 있을 것이다. 

아무런 옵션 없이 EXPLAIN 명령을 실행하면 쿼리 문장의 특성에 따라 표 형태로 된 1줄 이상의 결과가 표시된다.
표의 각 라인(레코드)은 쿼리 문장에서 사용된 테이블(서브쿼리로 임시 테이블을 생성한 경우 그 임시 테이블까지 포함)의 개수만큼 출력된다.
실행 순서는 위에서 아래로 순서대로 표시된다. (UNION, 상관 서브 쿼리와 같은 경우 순서대로 표시 되지 않을 수 있음) 출력된 실행 계획에서 위쪽에 출력된
결과일수록(id 칼럼의 값이 작을수록) 쿼리의 바깥(Outer) 부분이거나 먼저 접근한 테이블이고, 아래쪽에 출력된 결과일수록(id 칼럼의 값이 클수록) 쿼리의
안쪽(Inner) 부분 또는 나중에 접근한 테이블에 해당한다.

id 칼럼
하나의 SELECT 문장은 다시 1개 이상의 하위(SUB) SELECT 문장을 포함할 수 있다.
SELECT ...
  FROM (SELECT ... FROM tb_test1) tb1, tb_test2 tb2
 where tb1.id=tb2.id;
-> SELECT를 분리. SELECT 키워드 단위로 구분한 것을 이 책에서 '단위 쿼리'라 표현
SELECT ... FROM tb_test1;
SELECT ... FROM tb1, tb_test2 tb2 WHERE tb1.id=tb2.id;

실행 계획에서 가장 왼쪽에 표시되는 id 칼럼은 단위 SELECT 쿼리별로 부여되는 식별자 값이다. 이 예제 쿼리의 경우 실행 계획에서 최소 2개의 id값이 
표시될 것이다. 하나의 SELECT문장 안에서 여러 개의 테이블을 조인하면 조인되는 테이블의 개수만큼 실행 계획 레코드가 출력되지만 같은 id 값이 부여된다.

반대로 쿼리 실행 계획에서 쿼리 문장이 3개의 단위 SELECT 쿼리로 구성돼 있으면 실행 계획의 각 레코드가 각기 다른 id 값을 지닌 것을 확인할 수 있다.
EXPLAIN
 SELECT ( (SELECT COUNT(*) FROM employees) + (SELECT COUNT(*) FROM departments) ) AS total_count;
-> id 1(NULL), 3(departments), 2(employees)으로 구별됨
여기서 한 가지 주의해야 할 것은 실행 계획의 id 칼럼이 테이블의 접근 순서를 의미하지는 않는다는 것이다. 

EXPLAIN FORMAT=TREE
 SELECT * FROM dept_emp de
  WHERE de.emp_no=(SELECT ... FROM employees e WHERE ...); 
-> 이 경우 쿼리 실행순서는 서브쿼리인 e를 먼저 읽고 de 테이블을 실행하지만 id 칼럼은 de 1, e 2로 결정된 것을 알 수 있다.

select_type 칼럼
각 단위 SELECT 쿼리가 어떤 타입의 쿼리인지 표시되는 칼럼이다. select_type 칼럼에 표시될 수 있는 값은 다음과 같다.

SIMPLE
UNION이나 서브쿼리를 사용하지 않는 단순한 SELECT 쿼리인 경우(쿼리에 조인이 포함된 경우에도). 쿼리 문장이 아무리 복잡하더라도 실행 계획에서 SIMPLE인
'단위 쿼리'는 하나만 존재한다. 일반적으로 제일 바깥 SELECT 쿼리의 select_type이 SIMPLE로 표시된다.

PRIMARY
UNION이나 서브쿼리를 가지는 SELECT 쿼리의 실행 계획에서 가장 바깥쪽(Outer)에 있는 단위 쿼리의 경우. SIMPLE과 마찬가지로 하나만 존재하며, 쿼리의 제일
바깥쪽에 있는 SELECT 단위 쿼리가 PRIMARY로 표시된다.

UNION
UNION으로 결합하는 단위 SELECT 쿼리 가운데 첫 번째를 제외한 두 번째 이후 단위 SELECT 쿼리의 경우. UNION의 첫 번째 단위 SELECT은 UNION되는 쿼리 결과들을
모아서 저장하는 임시 테이블(DERIVED)이 select_type으로 표시된다.

DEPENDENT UNION
UNION select_type과 같이 UNION이나 UNION ALL로 집합을 결합하는 쿼리에서 표시된다. 그리고 여기서 DEPENDENT는 UNION이나 UNION ALL로 결합된 단위 쿼리가
외부 쿼리에 의해 영향을 받는 것을 의미한다. 다음의 예제 쿼리를 보면 두 개의 SELECT 쿼리가 UNION으로 결합됐으므로 select_type에 UNION이 표시된 것을 
알 수 있다. IN 이하 서브쿼리에서는 두 개의 쿼리가 UNION으로 연결된 것을 알 수 있다. 예제 쿼리의 경우 Mysql 옵티마이저는 IN 내부의 서브 쿼리를
먼저 처리하지 않고, 외부의 employees 테이블을 먼저 읽은 다음 서브쿼리를 실행하는데 이때 employees 테이블의 칼럼값이 서브쿼리에 영향을 준다.
이렇게 내부 쿼리가 외부의 값을 참조해서 처리될 때 select_type에 DEPENDENT 키워드가 표시된다.
ex)
EXPLAIN
 SELECT *
   FROM employees e1 WHERE e1.emp_no IN ( SELECT e2.emp_no FROM employees e2 WHERE e2.first_name='Matt'
                                           UNION
                                          SELECT e3.emp_no FROM employees e3 WHERE e3.first_name='Matt' );
결국 내부적으로는 UNION에 사용된 SELECT 쿼리의 WHERE 조건에 "e2.emp_no=e1.emp_no"와 "e3.emp_no=e1.emp_no"라는 조건이 자동으로 추가되어 실행된다.
외부에 정의된 employees 테이블의 emp_no 칼럼이 서브쿼리에 사용되기 때문에 DEPENDENT UNION이 select_type에 표시된 것이다.
id   select_type         table        ..., ... 
1    PRIMARY             e1
2    DEPENDENT SUBQUERY  e2              ~
3    DEPENDENT UNION     e3
NULL UNION RESULT        <union2,3>   ..., ...

UNION RESULT
UNION RESULT는 UNION 결과를 담아두는 테이블을 의미한다. 8.0 이전 버선에서는 UNION ALL이나 UNION 쿼리는 모두 UNION의 결과를 임시 테이블로 생성했는데,
8.0 버전부터는 UNION ALL의 경우 임시 테이블을 사용하지 않도록 기능이 개선됐다. 하지만 UNION은 8.0 버전에서도 여전히 임시 테이블에 결과를 버퍼링한다.
실행 계획상에서 임시 테이블을 가리키는 라인의 select_type이 UNION RESULT다. 단위 쿼리가 아니기 대문에 별도의 id 값은 부여되지 않고 NULL로 표시 된다.
table에 <union1,2>로 표시 된 것은 id 값이 1인 단위 쿼리의 조회 결과와 id 값이 2인 단위 쿼리의 조회 결과를 UNION 했다는 것을 의미한다.
+ UNION대신 UNION ALL을 사용하면 임시 테이블을 버퍼링하지 않기 때문에 UNION RESULT이 필요치 않게 된다.

SUBQUERY 
여기서의 SUBQUERY는 FROM 절 이외에서 사용되는 서브쿼리만을 의미한다.
Mysql 서버의 실행 계획에서 FROM 절에 사용된 서브쿼리는 select_type이 DERIVED로 표시되고, 그 밖의 위치에서 사용된 서브쿼리는 전부 SUBQUERY라고 표시된다.
'파생 테이블' 이라는 단어는 DERIVED와 같은 의미로 이해하면 된다. 

중첩된 쿼리(Nested Query) : SELECT에서 사용된 경우
서브쿼리(Subquery) : WHERE 절에 사용된 경우
파생 테이블(Derived Table) : FROM절에 사용된 경우. 일반적으로 RDBMS에서는 인라인 뷰 or 서브 셀렉트라고 부른다

DEPENDENT SUBQUERY
서브쿼리가 바깥쪽 SELECT 쿼리에서 정의도니 칼럼을 사용하는 경우 표시됨
EXPLAIN
 SELECT e.first_name, (SELECT COUNT(*) FROM dept_emp de, dept_manager dm WHERE de.emp_no=e.emp_no) AS cnt
   FROM employees e
  WHERE e.first_name='Matt';
  
내부 서브쿼리 결과가 외부 SELECT 쿼리의 칼럼에 의존적이기 때문에 DEPENDENT라는 키워드가 붙는다. DEPENDENT UNION과 같이 외부 쿼리가 먼저 수행된 후
내부 쿼리가 실행돼야 하므로 일반 서브쿼리보다는 처리 속도가 느릴 때가 많다.

DERIVED
5.5까지는 서브쿼리가 FROM 절에 사용된 경우 항상 select_type이 DERIVED인 실행 계획을 만든다. 하지만 5.6부터는 옵티마이저 옵션에 따라 FROM절의
서브쿼리를 외부 쿼리와 통합하는 형태의 최적화가 수행되고도 한다. 5.5까지는 파생 테이블에는 인덱스가 전혀 없으므로 다른 테이블과 조인할 때 성능상
불리할 때가 많다. 그러나 5.6부터는 옵티마이저 옵션에 따라 쿼리의 특성에 맞게 임시테이블에도 인덱스를 추가해서 만들 수 있게 최적화됐다.

* Mysql 서버는 버전이 업그레이드되면서 조인 쿼리에 대한 최적화는 많이 성숙된 상태다. 그래서 파생 테이블에 대한 최적화가 부족한 버전의 Mysql서버를
사용 중일 경우, 가능하다면 DERIVED 형태의 실행 계획을 조인으로 해결할 수 있게 쿼리를 바꿔주는 것이 좋다. 8.0부터는 FROM절의 서브쿼리에 대한
최적화도 많이 개선되어 가능하다면 불필요한 서브쿼리는 조인으로 쿼리를 재작성해서 처리한다. 하지만 옵티마이저가 처리할 수 있는 것은 한계가 있으므로 
여전히 최적화된 쿼리를 작성하는 것은 중요하다.

***** 서브쿼리를 사용하는 것보다 조인으로 사용하는 습관을 들여야 한다. *****

DEPENDENT DERIVED 
8.0 이전 버전에서는 FROM 절의 서브쿼리는 외부 칼럼을 사용할 수가 없었는데, 8.0버전부터는 래터럴 조인(LATERAL JOIN) 기능이 추가되면서 FROM 절의
서브쿼리에서도 외부 칼럼을 참조할 수 있게 됐다. 다음 쿼리는 래터럴 조인의 가장 대표적인 활용 예제로서, employees 테이블의 레코드 1건당 salaries
테이블의 레코드를 최근 순서대로 최대 2건까지만 가져와서 조인을 실행한다.
ex)
SELECT
  FROM employees e LEFT JOIN LATERAL (SELECT *
                                        FROM salaries s
                                       WHERE s.emp_no=e.emp_no
                                       ORDER BY s.from_date DESC LIMIT 2) AS s2 
    ON s2.emp_no=e.emp_no;
* EXPLAIN 
id  select_type         table        type    key          Extra
1   PRIMARY             e            ALL     NULL         Rematerialize (<derived2>)
1   PRIMARY             <derived2>   ref     <auto_key0>  NULL
2   DEPENDENT DERVIED   s            ref     PRIMARY      Using filesort
- DEPENDENT DERIVED 는 래터럴 조인이 사용된 것을 의미한다. 

UNCACHEABLE SUBQUERY
하나의 쿼리 문장에 서브쿼리가 하나만 있더라도 실제 그 서브쿼리가 한 번만 실행되는 것은 아니다. 그런데 조건이 똑같은 서브쿼리가 실행될 때는 다시
실행하지 않고 이전의 실행 결과를 그대로 사용할 수 있게 서브쿼리의 결과를 내부적인 캐시 공간에 담아둔다. 여기서 언급하는 서브쿼리 캐시는 쿼리 캐시나
파생 테이블과는 전혀 무관한 기능이다. 

- SUBQUERY는 바깥쪽의 영향을 받지 않으므로 처음 한 번만 실행해서 그 결과를 캐시하고 필요할 때 캐시된 결과를 이용한다 (p427)
- DEPENDENT SUBQUERY는 의존하는 바깥쪽 쿼리의 칼럼의 값 단위로 캐시해두고 사용한다.
  (딱 한 번만 캐시되는 것이 아니라 외부 쿼리의 값 단위로 캐시가 만들어지는 방식으로 처리된다.)
  
UNCACHEABLE SUBQUERY는 이 캐시를 사용할 수 있느냐 없느냐의 차이가 있다. 
캐시를 사용하지 못하게 하는 요소)
- 사용자 변수가 서브쿼리에 사용된 경우
- NOT-DETERMINISTIC 속성의 스토어드 루틴이 서브쿼리 내에 사용된 경우
- UUID()나 RAND()와 같이 결괏값이 호출할 때마다 달라지는 함수가 서브쿼리에 사용된 경우
ex) @status(사용자 변수)가 사용된 경우 UNCACHEABLE SUBQUERY로 표시(p428)

UNCACHEABLE UNION
UNION, UNCACHEABLE 두 개 키워드의 속성이 혼합된 select_type을 의임

MATERIALIZED - 쿼리의 내용을 임시테이블로 생성 *
5.6부터 도입된 select_type으로, 주로 FROM절이나 IN(subquery) 형태의 쿼리에 사용된 서브쿼리의 최적화를 위해 사용된다. 
5.7부터는 서브쿼리의 내용을 임시 테이블로 구체화한 후, 임시 테이블과 employees 테이블을 조인하는 형태로 최적화되어 처리된다.

table 칼럼
Mysql 서버의 실행 계획은 단위 SELECT 쿼리 기준이 아니라 테이블 기준으로 표시된다. 테이블의 이름에 별칭이 부여된 경우에는 별칭이 표시된다.

table 칼럼에 <derived N>, <union M,N> 과 같이 "<>"로 둘러싸인 이름이 명시되는 경우가 많은데, 이 테이블은 임시 테이블을 의미한다. 
"<>" 안에 항상 표시되는 숫자는 단위 SELECT 쿼리의 id 값을 지칭한다. (p430) <derived 2> id 2의 파생 테이블

id  select_type     table
1    PRIMARY      <derived 2>
1    PRIMARY          e
2    DERIVED       dept_emp

1. id 2인 dept_emp로 파생 테이블이 만들어짐(DERIVED)
2. id 값이 1로 같은 두 테이블은 조인된 것이며, <derived 2>가 윗 줄이므로 드라이빙 테이블, e 테이블이 드리븐 테이블이다.

실제쿼리)
SELECT *
  FROM (SELECT de.emp_no FROM dept_emp de GROUP BY de.emp_no) tb,
       employees e
 WHERE e.emp_no=tb.emp_no;
 
select_type이 MATERIALIZED인 실행 계획에서는 "<subquery N>"과 같은 값이 table 칼럼에 표시된다. 이는 서브쿼리의 결과를 구체화해서
임시 테이블로 만들었다는 의미이며, 실제로는 <derived N>과 같은 방법으로 해석하면 된다.

partitions 칼럼
5.7까지는 옵티아미저가 사용하는 파티션들의 목록은 EXPLAIN PARITION 명령을 이용해 확인 가능했지만 8.0부터는 EXPLAIN 명령으로 파티션 관련
실행 계획까지 모두 확인할 수 있게 변경됐다. 
우선 파티션 고나련된 실행 계획을 확인하기 전에 간단히 다음과 같은 파티션 테이블을 생성, employees 테이블의 모든 레코드를 복사한다.
employees_2 테이블은 hire_date 칼럼값을 기준으로 5년 단위로 나누어진 파티션을 가진다. 그런데 파티션 생성 시 제약 사항(파티션 키로 사용되는
칼럼은 프라이머리 키를 포함한 모든 유니크 인덱스의 일부여야 함)으로 인해 프라이머리 키에 emp_no 칼럼과 함께 hire_date 칼럼을 추가해서 테이블을 생성

CREATE TABLE employees_2 (
   emp_no int NOT NULL,
   birth_date DATE NOT NULL,
   first_name VARCHAR(14) NOT NULL,
   last_name VARCHAR(16) NOT NULL,
   gender ENUM('M','F') NOT NULL,
   hire_date DATE NOT NULL,
   PRIMARY KEY (emp_no, hire_date)
) PARTITION BY RANGE COLUMNS(hire_date)
( PARTITION p1986_1990 VALUES LESS THAN ('1990-01-01'),
  PARTITION p1991_1995 VALUES LESS THAN ('1996-01-01'),
  PARTITION p1996_2000 VALUES LESS THAN ('2000-01-01'),
  PARTITION p2001_2005 VALUES LESS THAN ('2006-01-01'),

INSERT INTO employees_2 SELECT * FROM employees;

ex)
EXPLAIN
 SELECT *
   FROM employees_2
  WHERE hire_date BETWEEN '1999-11-15' AND '2000-01-15';

테이블 생성 구문에서 파티션 목록을 살펴보면 조회 데이터는 p1996_2000과 p2001_2005 파티션에 저장돼 있음을 알 수 있다.
실제 옵티마이저는 해당 파티션에만 있다는 것을 알게 되어 실행 계획에서도 나머지 파티션에 대해서는 어떻게 접근할지 데이터 분포가 어떠한지 등의 분석을
실행하지 않는다. 이처럼 파티션이 여러 개인 테이블에서 불필요한 파티션을 빼고 쿼리를 수행 하기 위해 접근해야 할 것으로 판단되는 테이블만 골라내는 과정을
파티션 프루닝(Partition pruning)이라고 한다.

위의 실행계획의 partitions 칼럼은 p1996_2000,p2001_2005 type칼럼은 ALL 이라고 적혀있다.
type의 ALL은 풀 테이블 스캔을 의미한다. Mysql을 포함한 대부분의 RDBMS에서 지원하는 파티션은 물리적으로 개별 테이블처럼 별도의 저장 공간을 가지기 때문에
모든 파티션이 아니라 p1996_2000,p2001_2005 파티션만 풀 스캔을 실행하게 된다.

type 칼럼
Mysql 서버가 각 테이블의 레코드를 어떤 방식으로 읽었는지를 나타낸다. (방식 - 인덱스사용 여부, 풀 테이블 스캔 여부)
일반적으로 쿼리를 튜닝할 때 인덱스를 효율적으로 사용하는지 확인하는 것이 중요하므로
실행 계획에서 type 칼럼은 반드시 체크해야 할 중요한 정보다.

Mysql 메뉴얼에서는 type 칼럼을 "조인 타입"으로 소개한다. 또한 Mysql에서는 하나의 테이블로부터 레코드를 읽는 작업도 조인처럼 처리한다. 
그래서 SELECT 쿼리의 테이블 개수에 관계없이 실행 계획의 type 칼럼은 "조인 타입"이라고 명시하고 있다. 하지만 조인과 직접 연관 지어 생각하지 말고,
각 테이블의 접근 방법으로 해석하면 된다.

표시되는 값
- system, const, eq_ref, ref, fulltext, ref_or_null, unique_subquery, index_subquery, range, index_merge, index, ALL
이 순서가 일반적인 처리 성능 순서(데이터 분포, 레코드 건수에 따라 달라질 수 있음)

ALL을 제외한 나머지는 모두 인덱스를 사용하는 접근 방법이다. ALL은 풀 테이블 스캔
index_merge를 제외한 나머지 접근 방법은 하나의 인덱스를 사용한다. index_merge 이외의 type에서는 인덱스 항목에도 단 하나의 인덱스 이름만 표시된다.

system
레코드가 1건만 존재하는 테이블 또는 한 건도 존재하지 않는 테이블을 참조하는 형태의 접근 방법을 system. InnoDB 스토리지 엔진에서는 나타나지 않고,
MyISAM, MEMORY 테이블에서만 사용되는 접근 방법이다. (p 435) InnoDB로 table로 1건만 존재하는 테이블의 type은 ALL이나 index로 나타날 가능성이 크다.

const
테이블의 레코드 건수와 관계없이 쿼리가 프라이머리 키나 유니크 키 칼럼을 이용하는 WHERE 조건절을 가지고 있으며, 반드시 1건을 반환하는 쿼리의 처리 방식을
const라고 한다. 다른 DBMS에서는 이를 유니크 인덱스 스캔이라고도 표현한다.

다중 칼럼으로 구성된 프라이머리 키나 유니크 키 중에서 인덱스의 일부 칼럼만 조건으로 사용할 때는 const가 아닌 ref가 표시된다.
하지만 프라이머리 키나 유니크 인덱스의 모든 칼럼을 동등 조건으로 WHERE 절에 명시하면 const 접근 방법을 사용한다.

* type 칼럼이 const인 실행 계획은 옵티마이저가 쿼리를 최적화하는 단계에서 쿼리를 먼저 실행해 통째로 상수화한다. 

eq_ref
여러 테이블이 조인되는 쿼리의 실행 계획에서만 표시된다. 조인에서 처음 읽은 테이블의 칼럼값을, 그다음 읽어야 할 테이블의 프라이머리 키나 유니크 키 칼럼의
검색 조건에 사용할 때를 가리켜 eq_ref라고 한다. 이때 두 번째 이후에 읽는 테이블의 type 칼럼에 eq_ref가 표시된다. 또한 두 번째 이후에 읽히는 테이블을
유니크 키로 검색할 때 그 유니크 인덱스는 NOT NULL이어야 하며, 다중 칼럼으로 만들어진 프라이머리 키나 유니크 인덱스라면 인덱스의 모든 칼럼이 비교 조건에
사용돼야만 eq_ref 접근 방법이 사용될 수 있다. 즉, 조인에서 두 번째 이후에 읽는 테이블에서 반드시 1건만 존재한다는 보장이 있어야 사용할 수 있는 접근 방법이다.

EXPLAIN
 SELECT * FROM dept_emp de, employees e
  WHERE e.emp_no=de.emp_no AND de.dept_no='d005';

id select_type table type     key      key_len  rows
1   SIMPLE     de    ref      PRIMARY  16       165571
1   SIMPLE     e     eq_ref   PRIMARY  4        1

id값이 1로 값으므로 두 테이블이 조인으로 실행된다. 그리고 de 테이블이 실행 계획의 위쪽에 있으므로 먼저 읽고, e.emp_no=de.emp_no 조건을 이용해 e 테이블을
검색한다. e 테이블의 emp_no는 프라이머리 키라서 실행 계획의 두 번째 라인은 type 칼럼이 eq_ref로 표시된다.

ref
eq_ref와는 달리 조인의 순서와 관계없이 사용되며, 또한 프라이머리 키나 유니크 키 등의 제약 조건도 없다. 인덱스의 종류와 관계없이 동등 조건으로 검색할 때는
ref 접근 방법이 사용된다. ref 타입은 반환되는 레코드가 반드시 1건이라는 보장이 없으므로 const나 eq_ref보다는 빠르지 않다. 하지만 동등한 조건으로만
비교되므로 매우 빠른 레코드 조회 방법의 하나다.

정리
const - 조인의 순서와 관계없이 프라이머리 키나 유니크 키의 모든 칼럼에 대해 동등 조건으로 검색(반드시 1건의 레코드만 반환)
eq_ref - 조인에서 첫 번째 읽은 테이블의 칼럼값을 이용해 두 번째 테이블을 프라이머리 키나 유니크 키로 동등 조건 검색(두 번째 테이블은 반드시 1건의 레코드만 반환)
ref - 조인의 순서와 인덱스의 종류에 관계없이 동등 조건으로 검색(1건의 레코드만 반환된다는 보장이 없어도 됨)
동등 비교 연산자 = "=", "<=>" ("<=>" 연산자는 NULL에 대한 비교까지 한다)

fulltext
Mysql 서버의 전문 검색 인덱스를 사용해 레코드를 읽는 접근 방법.
전문 검색 인덱스는 통계 정보가 관리되지 않으며, 전문 검색 인덱스를 사용하려면 전혀 다른 SQL 문법을 사용해야 한다.

Mysql 서버에서 전문 검색 조건은 우선순위가 상당히 높다. 쿼리에서 전문 인덱스를 사용하는 조건과 그 이외의 일반 인덱스를 사용하는 조건을 함께 사용하면 
일반 인덱스의 접근 방법이 const나 eq_ref, ref가 아니면 일반적으로 Mysql은 전문 인덱스를 사용하는 조건을 선택해서 처리한다.
전문 검색은 "MATCH (...) AGAINST (...)" 구문을 사용해서 실행하는데, 이때 반드시 해당 테이블에 전문 검색용 인덱스가 준비돼 있어야만 한다.
테이블에 전문 인덱스가 없다면 쿼리는 오류를 발생하고 중지될 것이다. 전문 검색 인덱스를 사용하기 위해서는 다음과 같이 전문 검색 인덱스가 테이블에 정의돼 있어야한다.
테이블 생성)
CREATE TABLE employees_name (
  emp_no int NOT NULL,
  first_name varchar(14) NOT NULL,
  last_name varchar(16) NOT NULL,
  PRIMARY KEY (emp_no),
  FULLTEXT KEY fx_name (first_name,last_name) WITH PARSER ngram
  ) ENGINE=InnoDB;
전문검색 조회)
EXPLAIN
 SELECT *
   FROM employee_name
  WHERE emp_no=10001
    AND emp_no BETWEEN 10001 AND 10005
    AND MATCH(first_name, last_name) AGAINST('Facello' IN BOOLEAN MODE);
-> 3개의 조건을 가지고 있음.
1. employee_name 테이블의 프라이머리 키를 1건만 조회하는 const 타입의 조건
2. range 타입의 조건
3. 전문검색 조건
최종적으로 옵티마이저는 const 타입의 조건을 선택한다. 만약 const 타입 조건이 없다면 fulltext 조건을 선택한다.
지금까지의 경험으로 보면 전문 검색 인덱스를 이용하는 fulltext보다 일반 인덱스를 이용하는 range 접근 방법이 더 빨리 처리되는 경우가 더 많았다. ***
따라서 전문 검색 쿼리를 사용할 때는 조건별로 성능을 확인해 보는 편이 좋다. *** 

ref_or_null
이 접근 방법은 ref 접근 방법과 같은데, NULL 비교가 추가된 형태다. 접근 방법의 이름 그대로 ref 방식 또는 NULL 비교(IS NULL) 접근 방법을 의미한다.
실제 업무에서 많이 활용되지 않지만, 만약 사용된다면 나쁘지 않은 접근 방법 정도로 기억해 두면 충분하다.
EXPLAIN 
 SELECT * FROM titles
  WHERE to_date='1985-03-01' OR to_date IS NULL;
-> type : ref_or_null

unique_subquery
WHERE 조건절에서 사용될 수 있는 IN (subquery) 형태의 쿼리를 위한 접근 방법이다. unique_subquery의 의미 그대로 서브쿼리에서 중복되지 않는 유니크한
값만 반환할 때 이 접근 방법을 사용한다.
EXPLAIN
 SELECT * FROM departments
  WHERE dept_no IN (SELECT dept_no FROM dept_emp WHERE emp_no=10001);

unique_subquery와 index_subquery는 8.0에서 세미조인 최적화 옵션을 비활성화한 상태에서 만들어진 실행 계획이다.

index_subquery
IN 연산자의 특성상 IN (subquery) 또는 IN (상수 나열) 형태의 조건은 괄호 안에 있는 값의 목록에서 중복된 값이 먼저 제거돼야 한다.
전의 unique_subquery 접근 방법은 중복 제거가 필요 하지 않았지만 중복된 값을 반환할 수도 있다.
이때 서브쿼리 결과의 중복된 값을 인덱스를 이용해서 제거할 수 있을때 index_subquery 접근 방법이 사용된다.

정리
unique_subquery : IN (subquery) 형태의 조건에서 subquery의 반환 값에는 중복이 없으므로 별도의 중복 제거 작업이 필요하지 않음
index_subquery : IN (subquery) 형태의 조건에서 subquery의 반환 값에 중복된 값이 있을수 있지만 인덱스를 이용해 중복된 값을 제거할 수 있음

range
range는 인덱스를 하나의 값이 아니라 범위로 검색하는 경우를 의미하는데, 주로 "<, >, IS NULL, BETWEEN, IN, LIKE" 등의 연산자를 이용해 인덱스를
검색할 때 사용된다. 일반적으로 애플리케이션의 쿼리가 가장 많이 사용하는 접근 방법인데, 이 책에서 소개하는 접근 방법의 순서상 Mysql 서버가 가지고 있는
접근 방법 중에서 상당히 우선순위가 낮다는 것을 알 수 있다. 얼마나 많은 레코드를 필요로 하느냐에 따라 차이는 있겠지만 range 접근 방법도 상당히 빠르며,
모든 쿼리가 이 접근 방법만 사용해도 최적의 성능이 보장된다고 볼 수 있다. 

*** const, ref, range = 인덱스 레인지 스캔(인덱스를 효율적으로 사용, 작업 범위 결정 조건으로 인덱스를 사용)

index_merge
지금까지 설명한 다른 접근 방법과는 달리 index_merge 접근 방법은 2개 이상의 인덱스를 이용해 각각의 검색 결과를 만들어낸 후, 그 결과를 병합해서 처리하는
방식이다. 하지만 index_merge 접근 방법이 사용되는 경우를 생각해보면 이름만큼 그렇게 효율적으로 작동하는 것은 아니다.
특징) 
- 여러 인덱스를 읽어야 하므로 일반적으로 range 접근 방법보다 효율성이 떨어진다.
- 전문 검색 인덱스를 사용하는 쿼리에서는 index_merge가 적용되지 않는다.
- index_merge 접근 방법으로 처리된 결과는 항상 2개 이상의 집합이 되기 때문에 그 두 집합의 교집합이나 합집합, 또는 중복 제거와 같은 부가적인 작업이 더 필요하다.

Mysql 메뉴얼에서는 index_merge 접근 방법이 ref_or_null 바로 다음이지만 이 책에서는 위의 특징으로 range 접근 방법 아래로 옮겼다.
index_merge이 사용될 때는 실행 계획에 조금 더 보완적인 내용이 표시된다. Extra 부분에서 자세히 설명.
ex) 
EXPLAIN
 SELECT * FROM employees
  WHERE emp_no BETWEEN 10001 AND 11000
     OR first_name='Smith';
emp_no은 PRIMARY로 조회, first_name은 ix_firstname 인덱스로 조회 후 두 결과를 병합하는 형태로 실행 계획을 만들어 낸다.

index
index 접근 방법은 이름이 index라서 많은 사람들이 "효율적으로 인덱스를 사용한다"라고 오해하게 한다.
하지만 index 접근 방법은 인덱스를 처음부터 끝까지 읽는 인덱스 풀 스캔을 의미한다. range와 다르다.

index 접근 방법은 풀 테이블 스캔 방식과 레코드 건수가 같지만 일반적으로 데이터 파일 전체보다 크기가 작으므로 인덱스 풀 스캔 시 풀 테이블 스캔보다 빠르게
처리되며, 쿼리의 내용에 따라 정렬된 인덱스의 장점을 이용할 수 있으므로 훨씬 효율적이라 할 수 있다.
index 접근 방법은 다음 조건 가운데 1 + 2, 1 + 3 의 조건을 충족하는 쿼리에서 사용되는 읽기 방식이다.
1. range나 const, ref 같은 접근 방법으로 인덱스를 사용하지 못하는 경우
2. 인덱스에 포함된 칼럼만으로 처리할 수 있는 쿼리인 경우(즉, 데이터 파일을 읽지 않아도 되는 경우)
3. 인덱스를 이용해 정렬이나 그루핑 작업이 가능한 경우(즉, 별도의 정렬 작업을 피할 수 있는 경우)

EXPLAIN 
 SELECT * FROM departments ORDER BY dept_name DESC LIMIT 10;
LIMIT이 있기 때문에 상당히 효율적이다.

ALL
풀 테이블 스캔을 의미하는 접근 방법이다. 테이블을 처음부터 끝까지 전부 읽어서 불필요한 레코드를 제거(체크 조건이 존재할 때)하고 반환한다.
가장 마지막에 선택하는 가장 비효율적인 방법이다.

다른 DBMS와 같이 InnoDB도 풀 테이블 스캔이나 인덱스 풀 스캔과 같은 대량의 디스크 I/O를 유발하는 작업을 위해 한꺼번에 많은 페이지를 읽어 들이는 기능을 
제공한다. 이 기능은 Read ahead라 하며, 한 번에 여러 페이지를 읽어서 처리할 수 있다. 데이터 웨어하우스나 배치 프로그램처럼 대용량의 레코드를 처리하는
쿼리에서는 잘못 튜닝된 쿼리보다 더 나은 접근 방법이기도 하다. 쿼리를 튜닝한다는 것이 무조건 인덱스 풀 스캔이나 테이블 풀 스캔을 사용하지 못하게 하는 것은
아니라는 점을 기억하자. 

innodb_read_ahead_threshold, innodb_random_read_ahead 시스템 변수를 이용해 read ahead를 언제 실행할지 제어할 수 있다.
innodb_parallel_read_threads 시스템 변수를 이용해 동시에 몇 개의 스레드를 사용할지 설정할 수 있다. (p 447)

possible_keys 칼럼
사용자의 오해를 자주 불러일으키는 칼럼. 이 칼럼에 있는 내용은 옵티마이저가 최적의 실행 계획을 만들기 위해 후보로 선정했던 접근 방법에서 사용되는 인덱스의
목록일 뿐이다. "사용될법했던 인덱스의 목록". 특별한 경우를 제외하고는 그냥 무시해도 된다. 이 칼럼에 인덱스 이름이 나열됐다고 해서 그 인덱스를
사용한다고 판단하지 않도록 주의해야 한다.

key 칼럼
최종 선택된 실행 계획에서 사용하는 인덱스를 의미한다. type 칼럼이 index_merge가 아닌 경우에는 반드시 테이블 하나당 하나의 인덱스만 이용할 수 있다.
type이 ALL일 때와 같이 인덱스를 전혀 사용하지 못하면 key 칼럼은 NULL로 표시된다.

key_len
매우 중요한 정보 중 하나. 실제 업무에서 사용하는 테이블은 단일 칼럼으로만 만들어진 인덱스보다 다중 칼럼으로 만들어진 인덱스가 더 많다.
실행 계획의 key_len 칼럼의 값은 쿼리를 처리하기 위해 다중 칼럼으로 구성된 인덱스에서 몇 개의 칼럼까지 사용했는지 우리에게 알려준다.
더 정확하게는 인덱스의 각 레코드에서 몇 바이트까지 사용했는지 알려주는 값이다. 그래서 다중 칼럼 인덱스뿐 아니라 단일 칼럼으로 만들어진 인덱스에서도 같은
지표를 제공한다.

EXPLAIN SELECT * FROM dept_emp WHERE dept_no='d005';
-> key_len : 16 (dept_no, emp_no) 중 dept_no - CHAR(4)만 사용했으므로 4*4바이트 = 16바이트로 표시된 것이다. (utf8mb4)

EXPLAIN SELECT * FROM dept_emp WHERE dept_no='d005' AND emp_no=10001;
-> key_len : 20 둘다 사용, dept_no + emp_no 길이의 합인 20 표시

to_date date DEFAULT NULL 이 포함된 테이블 생성 후 WHERE to_date<='1985-10-10'; 조건 사용 시 
-> key_len : 4  date 타입이 3바이트를 사용하므로 3이 표시되어야 하지만 NULL을 사용함으로써 1바이트가 추가로 붙음

ref 칼럼
접근 방법이 ref면 참조 조건(Equal 비교 조건)으로 어떤 값이 제공됐는지 보여준다. 상숫값을 지정했다면 ref 칼럼의 값은 const로 표시되고, 다른 테이블의 
칼럼값이면 그 테이블명과 칼럼명이 표시된다. 이 칼럼에 출력되는 내용은 크게 신경 쓰지 않아도 무방한데, 다음과 같은 케이스는 조금 주의해서 볼 필요가 있다.

가끔 쿼리의 실행 계획에서 ref 칼럼의 값이 func라고 표시될 때가 있다. 참조용으로 사용되는 값을 그대로 사용한 것이 아니라 콜레이션 변환이나 값 자체의
연산을 거쳐서 참조됐다는 것을 의미한다.
ex)
EXPLAIN 
 SELECT *
   FROM employees e, dept_emp de
  WHERE e.emp_no=de.emp_no;
-> 변환이나 가공을 수행하지 않아 ref 칼럼에 조인 대상 칼럼의 이름이 그대로 표시된다. ref employees.de.emp_no


EXPLAIN 
 SELECT *
   FROM employees e, dept_emp de
  WHERE e.emp_no=(de.emp_no-1);
-> dept_emp emp_no에서 1뺀 값을 employees 테이블과 조인한다. ref는 func이라 표시된다.

이렇게 사용자가 명시적으로 값을 변환할 때뿐만 아니라 Mysql 서버가 내부적으로 값을 변환해야 할 때도 ref 칼럼에는 func가 출력된다.
-> 대표적 : 숫자 타입의 칼럼과 문자열 타입의 칼럼으로 조인할 때

rows 칼럼
Mysql 옵티마이저는 각 조건에 대해 가능한 처리 방식을 나열하고, 각 처리 방식의 비용을 비교해 최종적으로 하나의 실행 계획을 수립한다. 이때 각 처리 방식이
얼마나 많은 레코드를 읽고 비교해야 하는지 예측해서 비용을 산정한다. 대상 테이블에 얼마나 많은 레코드가 포함돼 있는지 또는 각 인덱스 값의 분포도가 어떤지를
통계 정보를 기준으로 조사해서 예측한다.

Mysql 실행 계획의 rows 칼럼값은 실행 계획의 효율성 판단을 위해 예측했던 레코드 건수를 보여준다. 이 값은 각 스토리지 엔진별로 가지고 있는 통계 정보를 
참조해 Myslq 옵티마이저가 산출해 낸 예상값이라서 정확하지는 않다. 또한 rows 칼럼에 표시되는 값은 반환하는 레코드의 예측치가 아니라 쿼리를 처리하기 위해
얼마나 많은 레코드를 읽고 체크해야 하는지를 의미한다. 그래서 실행 계획의 rows 칼럼에 출력되는 값과 실제 쿼리 결과 반환된 레코드 건수는 일치하지 않는
경우가 많다. -> 제대로 예측하지 못하는 경우를 위해 8.0에서는 히스토그램이 도입 됐다.

filtered 칼럼
옵티마이저는 각 테이블에서 일치하는 레코드 개수를 가능하면 정확히 파악해야 좀 더 효율적인 실행 계획을 수립할 수 있다. 실행 계획에서 rows 칼럼의 값은
인덱스를 사용하는 조건에만 일치하는 레코드 건수를 예측한 것이다. 하지만 대부분 쿼리에서 WHERE 절에 사용되는 조건이 모두 인덱스를 사용할 수 있는 것은
아니다. 특히 조인이 사용되는 경우에는 WHERE 절에서 인덱스를 사용할 수 있는 조건도 중요하지만 인덱스를 사용하지 못하는 조건에 일치하는 레코드 건수를
파악하는 것도 매우 중요하다 .
(p454)
ex) employees e, salaries s가 조인될 때 각각 s, e테이블에 있는 조건에 의한 rows, filtered 계산 후 실행 계획이 결정된다
실행계획을 확인할 때 옵티마이저에 의해 결정된 rows filtered 산출 값으로 조인 건 수를 대략 알 수 있다.
e테이블을 선행 테이블로 선택한 조건에 의한 결과
rows : 233 / filtered 16.03 -> 233*0.1603 = 약 37건 
s테이블을 선행 테이블로 선택한 조건에 의한 결과
rows : 3314 / filtered 11.11 -> 3314*0.1111 = 약 368건

다른 요소들도 충분히 감안하여 결과가 산출되었겠지만 위의 대상 건수가 적은 테이블을 선행 테이블로 선택할 가능성이 높다
8.0에서는 filtered 칼럼 값을 더 정확히 예측할 수 있도록 히스토그램 기능이 도입됐다. 

Extra 칼럼
칼럼의 이름과는 달리, 쿼리의 실행 계획에서 성능에 관련된 중요한 내용이 Extra 칼럼에 자주 표시된다. Extra 칼럼에는 고정된 몇 개의 문장이 표시되는데,
일반적으로 2~3개씩 함께 표시된다. Extra 칼럼에는 주로 내부적인 처리 알고리즘에 대해 조금 더 깊이 있는 내용을 보여주는 경우가 많다. 
그래서 Mysql 서버의 버전이 업그레이드되고 최적화 기능이 도입될수록 새로운 내용이 더 추가될 것으로 보인다. 
여기서 설명하는 순서는 성능과는 무관하므로 각 문장의 순서 자체는 의미가 없다.

const row not found
쿼리의 실행 계획에서 const 접근 방법으로 테이블을 읽었지만 실제로 해당 테이블에 레코드가 1건도 존재하지 않으면 Extra 칼럼에 이 내용이 표시된다.
Extra 칼럼에 이런 메시지가 표시되는 경우에는 테이블에 적절히 테스트용 데이터를 저장하고 다시 한번 쿼리의 실행 계획을 확인해 보는 것이 좋다.

Deleting all rows
MyISAM 스토리지 엔진과 같이 스토리지 엔진의 핸들러 차원에서 테이블의 모든 레코드를 삭제하는 기능을 제공하는 스토리지 엔진 테이블인 경우 Extra 칼럼에
"Deleting all rows" 문구가 표시된다. 이 문구는 WHERE 조건절이 없는 DELETE 문장의 실행 계획에서 자주 표시되며, 이 문구는 테이블의 모든 레코드를
삭제하는 핸들러 기능(API)을 한번 호출함으로써 처리됐다는 것을 의미한다. 기존에는 테이블의 레코드를 삭제하기 위해 각 스토리지 엔진의 핸들러 함수를
레코드 건수만큼 호출해서 삭제해야 했는데, "Deleting all rows" 처리 방식은 한 번의 핸들러 함수 호출로 아주 간단하고 빠르게 처리할 수 있다.
* 8.0 버전에서는 InnoDB, MyISAM 모두 실행 계획에 Deleting all rows 가 표시되지 않는다.
  테이블의 모든 레코드를 삭제하고자 한다면 WHERE 없는 DELETE 보다 TRUNCATE TABLE을 추천한다.

Distinct
ex)
EXPLAIN
 SELECT DISTINCT d.dept_no
   FROM departments d, dept_emp de WHERE de.dept_no=d.dept_no;
   
id select_type  table type  key          Extra
1  SIMPLE       d     index ux_deptname  Using index; Using temporary
1  SIMPLE       de    ref   PRIMARY      Using index; Distinct

쿼리의 Distinct를 처리하기 위해 조인하지 않아도 되는 항목은 모두 무시하고 꼭 필요한 것만 조인했으며, dept_emp 테이블에서는 꼭 필요한 레코드만 
읽었다는 것을 표현하고 있다.

FirstMatch
세미 조인의 여러 최적화 중 하나이다. FirstMatch(table_name)으로 메시지 출력
( p458 )
FirstMatch 메시지에 함께 표시되는 테이블명은 기준 테이블을 의미하는데, 드라이빙 테이블을 기준으로 드리븐 테이블에서 첫 번째로 일치하는 한 건만 
검색한다.

Full scan on Null key
이 처리는 "col1 IN (SELECT col2 FROM ...)" 과 같은 조건을 가진 쿼리에서 자주 발생할 수 있는데, col1의 값이 NULL이 된다면 결과적으로 조건은 
"NULL IN (SELECT col2 FROM ...)"과 같이 바뀐다. SQL 표준에서 NULL을 "알 수 없는 값"으로 정의하고 있으며, NULL에 대한 연산의 규칙까지 정의하고
있다. 그 정의대로 연산을 수행하기 위해 이 조건은 다음과 같이 비교돼야 한다.
- 서브쿼리가 1건이라도 결과 레코드를 가진다면 최종 비교 결과는 NULL
- 서브쿼리가 1건도 결과 레코드를 가지지 않는다면 최종 비교 결과는 FALSE

이 비교 과정에서 col1이 NULL이면 서브쿼리에 사용된 테이블에 대해서 풀 테이블 스캔을 해야만 결과를 알아낼 수 있다. 
Extra 칼럼의 "Full scan on Null key"은 Mysql 서버가 쿼리를 실행하는 중 col1이 NULL을 만나면 차선책으로 서브쿼리 테이블에 대해서 
풀 테이블 스캔을 사용할 것이라는 사실을 알려주는 키워드이다.
"col1 IN (SELECT col2 FROM ...)" 조건에서 col1이 NOT NULL로 정의된 칼럼이라면 이러한 차선책은 사용되지 않고 Extra 칼럼에도 표시되지 않을 것이다.

칼럼이 NOT NULL로 정의되지는 않았지만 이러한 NULL 비교 규칙을 무시해도 된다면 col1이 절대 NULL은 될 수 없다는 것을 옵티마이저에게 알려주면 된다.
-> col1 IS NOT NULL 뒤에 col1 IN (SELECT col2 FROM tb_test2) 조건 작성  
Extra 칼럼에 Full scan on Null key가 표시되면서, IN 이나 NOT IN 연산자의 왼쪽이 실제로 NULL이라면 상당한 성능 문제가 발생하고
그렇지 않다면, 풀 테이블 스캔은 발생하지 않으니 걱정하지 않아도 된다.

Impossible HAVING
쿼리에 사용된 HAVING 절의 조건을 만족하는 레코드가 없을 때 실행 계획의 Extra 칼럼에 해당 키워드가 표시된다.
애플리케이션의 쿼리 중에서 실행 계획의 Extra 칼럼에 "Impossible HAVING" 메시지가 출력된다면 쿼리가 제대로 작성되지 못한 경우가 대부분이므로
쿼리의 내용을 다시 점검하는 것이 좋다.

Impossible WHERE
Impossible HAVING과 비슷하며, WHERE 조건이 항상 FALSE가 될 수 밖에 없는 경우 표시된다.

LooseScan
세미 조인 최적화 중에서 LooseScan 최적화 전략이 사용될 경우 표시 된다.

No matching min/max row
쿼리의 WHERE 조건절을 만족하는 레코드가 한 건도 없는 경우 일반적으로 "Impossible WHERE ..." 문장이 Extra 칼럼에 표시된다.
MIN(), MAX() 같은 집합 함수가 있는 쿼리의 조건절에 일치하는 레코드가 한 건도 없을 때는 Extra 칼럼에 "No matching min/max row" 라는 메시지가 
출력된다. 그리고 MIN(), MAX()의 결과로 NULL이 반환된다.

Impossible WHERE이나 No matching min/max row등의 메시지는 잘못 생각하면 쿼리 자체가 오류인 것처럼 오해하기 쉽지만, 단지 쿼리의 실행 계획을
산출하기 위한 기초 자료가 없음을 표현하는 것뿐이다. 실제 쿼리가 문법적으로 오류가 있는 것은 아니니 비즈니스적으로 잘못된 것인지 확인해볼 필요는 있다.

no matching row in const table
조인에 사용된 테이블에서 const 방법으로 접근할 때 일치하는 레코드가 없으면 나오는 메시지이다.
Impossible WHERE와 같은 종류로 실행계획을 위한 기초자료가 없는 것이지 문법적 오류는 없다.

no matching rows after partition pruning
이 메시지는 파티션된 테이블에 대한 UPDATE 또는 DELETE 명령의 실행 계획에서 표시될 수 있는데, 해당 파티션에서 UPDDATE하거나 DELETE할 대상 레코드가 없을 때
표시 된다. (p 463)

No tables used
FROM 절이 없는 쿼리 문장이나 "FROM DUAL" 형태의 쿼리 실행 계획에서는 Extra 칼럼에 "No tables used"라는 메시지가 출력된다. 다른 DBMS와는 달리
Mysql 서버는 FROM 절이 없는 쿼리도 허용된다. 이처럼 FROM 절 자체가 없거나 FROM 절에 상수 테이블을 의미하는 DUAL(칼럼과 레코드를 각각 1개씩만 가지는
가상의 상수 테이블)이 사용될 때는 Extra칼럼에 "No tables used"라는 메시지가 표시된다.
ex) EXPLAIN SELECT 1 FROM dual;

Not exists
프로그램을 개발하다 보면 A 테이블에는 존재하지만 B 테이블에는 없는 값을 조회해야 하는 쿼리가 자주 사용된다. 이럴 때는 주로 NOT IN(subquery) 형태나
NOT EXISTS 연산자를 주로 사용한다. 이러한 형태의 조인을 안티-조인이라고 한다. 똑같은 처리를 아우터 조인을 이용해서도 구현할 수 있다.
일반적으로 NOT IN, NOT EXISTS 등의 연산자를 사용하는 안티-조인으로 처리해야 하지만 레코드 건수가 많을 때는 아우터 조인을 이용하면 빠른 성능을 낼 수 있다.

EXPALIN
 SELECT * 
   FROM dept_emp de LEFT OUTER JOIN departments d 
     ON de.dept_no=d.dept_no
  WHERE d.dept_no IS NULL; # d 테이블에 없는 것만 출력
  
이렇게 아우터 조인을 이용해 안티-조인을 수행하는 쿼리에서는 실행 계획의 Extra 칼럼에 "Not exists" 메시지가 표시된다. 
이 메시지는 옵티마이저가 de 테이블의 레코드를 이용해 d 테이블을 조인할 때 d 테이블의 레코드가 존재하는지 아닌지만 판단하는 것을 의미한다.
즉 d 테이블에 조인 조건에 일치하는 레코드가 여러 건이 있다고 하더라도 딱 1건만 조회해보고 처리를 완료하는 "최적화"를 의미한다.

Plan isn't ready yet
8.0 버전에서는 다음과 같이 다른 커넥션에서 실행 중인 쿼리의 실행 계획을 살펴볼 수 있다. 우선 다음과 같이 employees 테이블을 풀 스캔하는 쿼리가
실행 중인 상태에서 다른 커넥션을 통해 이 쿼리가 정말 풀 스캔을 실행하고 있는지를 한 번 확인해보자 
ex)
EXPLAIN FOR CONNECTION 8; 
실제 커넥션 id(프로세스 번호)가 8인 커넥션에서 실행하고 있는 쿼리의 실행 계획을 살펴볼 수 있다.
EXPLAIN FOR CONNECTION 명령으 Mysql 옵티마이저가 의도된 인덱스를 사용하지 못해서 풀 스캔을 한다거나 잘못된 실행 계획을 선택한 것이 아닌지
확인할 때 유용하게 사용할 수 있는 명령어다.

이렇게 이 명령을 실행했을 때 Extra 칼럼에 "Plan is nor ready yet" 이라는 메시지가 표시될 때도 있는데, 이 경우는 해당 커넥션에서 아직 쿼리의
실행 계획을 수립하지 못한 상태*에서 EXPLAIN FOR CONNECTION 명령이 실행된 것을 의미한다. 이 경우에는 대상 커넥션의 쿼리가 실행 계획을 수립할
여유 시간을 좀 더 주고, 다시 명령을 실행하면 된다.

Range checked for each record(index map: N)
두 개의 테이블을 조인하는 다음의 쿼리를 보면서 이 메시지의 의미를 이해해보자. 
조인 조건에 상수가 없고 둘 다 변수(e1.emp_no와 e2.emp_no)인 경우 Mysql 옵티마이저는 e1 테이블을 먼저 읽고 조인을 위해 e2를 읽을 때 
인덱스 레인지 스캔과 풀 테이블 스캔 중에서 어느 것이 효율적일지 판단할 수 없게 된다. 즉, e1 테이블의 레코드를 하나씩 읽을 때마다 e1.emp_no값이
계속 바뀌므로 쿼리의 비용 계산을 위한 기준 값이 계속 변하는 것이다. 그래서 어떤 접근 방법으로 e2 테이블을 읽는 것이 좋을지 판단할 수 없다.
ex)
EXPLAIN
 SELECT * 
   FROM employees e1, employees e2
  WHERE e2.emp_no >= e1.emp_no;

예를 들어 사번이 1번부터 1억 번까지 있다고 가정해 보자. 그러면 e1 테이블을 처음부터 끝까지 스캔하면서 e2 테이블에서 "e2.emp_no >= e1.emp_no"
조건을 만족하는 레코드를 찾아야 하는데, 문제는 e1.emp_no인 경우에는 e2 테이블의 1억 건 전부를 읽어야 한다는 것이다. 하지만 e1.emp_no=100000000
인 경우에는 e1 테이블을 한 검남 읽으면 된다.

그래서 e1 테이블의 emp_no가 작을 때는 e2 테이블을 풀 테이블 스캔으로 접근하고, e1 테이블의 emp_no가 큰 값일 때는 e2 테이블을 인덱스 레인지
스캔으로 접근하는 형태를 수행하는 것이 최적의 조인 방법이다. 
지금까지 설명한 내용을 줄여서 표현하면 "레코드마다 인덱스 레인지 스캔을 체크한다"라고 할 수 있는데, 
이것이 Extra 칼럼에 표시되는 "Range checked for each record"의 의미다. (p 468)

Extra 칼럼의 출력 내용 중에서 "(index map: 0x1)" 은 사용할지 말지를 판단하는 후보 인덱스의 순번을 나타낸다. "index map"은 16진수로 표시되는데,
해석을 위해서는 이진수로 바꿔야 한다. 위의 경우 0x1는 1이므로 이 쿼리는 e2 테이블의 첫 번째 인덱스를 사용할지 아니면 테이블을 풀 스캔할지를
매 레코드 단위로 결정하면서 처리된다. 여기서 테이블 첫 번째 인덱스는 SHOW CREATE TABLE employees 명령으로 테이블의 구조를 조회했을 때
제일 먼저 출력되는 인덱스를 의미한다.

그리고 쿼리 실행 계획의 type 칼럼의 값이 ALL로 표시되어 풀 테이블 스캔으로 처리된 것으로 해석하기 쉽다. 
하지만 Extra 칼럼에 "Range checked for each record"가 표시되면 type 칼럼에는 ALL로 표시된다.
즉 "index map"에 표시된 후보 인덱스를 사용할지 여부를 검토해서 이 후보 인덱스가 별로 도움이 되지 않는다면 최종적으로 풀 테이블 스캔을 사용하기
때문에 ALL로 표시된 것이다. 

ex) index map: 0x19 -> 비트값 11001 -> 5번째 자리 인덱스 ... 첫번째 자리 인덱스, PRIMARY KEY
-> 자리 수 값이 1인 인덱스 후보군 설정
실제 어떤 인덱스가 사용됐는지는 알 수 없다. 단지 각 비트맵의 자릿수가 1인 순번의 인덱스가 대상이라는 것만 알 수 있다.

Recursive
8.0 버전부터는 CTE(Common Table Expression)를 이용해 재귀 쿼리를 작성할 수 있게 됐다. Mysql 서버에서 재귀 쿼리는 다음 예제와 같이 WITH 구문을
이용해 CTE를 사용하면 된다.
WITH RECURSIVE cte (n) AS
  (
    SELECT 1
    UNION ALL
    SEELCT n + 1 FROM cte WHERE n < 5
  )
  SELECT * FROM cte;
위 쿼리의 WITH 절에서 실행하는 작업은 다음과 같다.
1. "n"이라는 칼럼 하나를 가진 cte라는 이름의 내부 임시 테이블을 생성
2. "n"칼럼의 값이 1부터 5까지 1씩 증가하게 해서 레코드 5건을 만들어서 cte 내부 임시 테이블에 저장
EXPLAIN)
id select_type  table       type   key    Extra
1  PRIMARY      <derived2>  ALL    NULL   NULL
2  DERIVED      NULL        NULL   NULL   No tables used
3  UNION        cte         ALL    NULL   Recursive; Using where
-> WITH구문을 이용한 CTE가 사용된다고 Recursive 문구가 표시되는 것은 아니고 WITH 구문이 재귀 CTE로 사용될 경우만 표시된다. 

Rematerialize
8.0부터는 래터럴 조인 기능이 추가됐는데, 이 경우 래터럴로 조인되는 테이블은 선행 테이블의 레코드별로 서브쿼리를 실행해서 그 결과를 임시 테이블에
저장한다. 이 과정을 Rematerializing이라고 한다. (매번 임시 테이블이 새로 생성) 11.4.7.6 래터럴 조인 참조

Select tables optimized away
MIN(), MAX()만 SELECT 절에 사용되거나 GROUP BY로 MIN(), MAX()를 조회하는 쿼리가 인덱스를 오름차순 또는 내림차순으로 1건만 읽는 형태의 최적화가
적용된다면, Extra 칼럼에 "Select tables optimized away"가 표시된다.

또한 MyISAM 테이블에 대해서는 GROUP BY 없이 COUNT(*)만 SELECT할 때도 이런 형태의 최적화가 적용된다. MyISAM 테이블은 전체 레코드 건수를 별도로
관리하기 때문에 인덱스나 데이터를 읽지 않고도 전체 건수를 빠르게 조회할 수 있다. 하지만 MyISAM 테이블에서 WHERE 조건절이 있는 쿼리는 이런
최적화를 사용하지 못한다. 


Start temprorary, End temporary
세미 조인 최적화 중에서 Duplicate Weed-out 최적화 전략이 사용되면 표시된다. 이 전략은 불필요한 중복 건을 제거하기 위해서 내부 임시 테이블을
사용하는데, 이때 조인되어 내부 임시 테이블에 저장되는 테이블을 식별할 수 있게 조인의 첫 번째 테이블에 Start temporary 문구를 보여주고 조인이
끝나는 부분에 End temporary 문구를 표시해준다.

unique row not found
두 개의 테이블이 각각 유니크(PK 키 포함)칼럼으로 아우터 조인을 수행하는 쿼리에서 아우터 테이블에 일치하는 레코드가 존재하지 않을 때 Extra 칼럼에
이 코멘트가 표시된다. ( p474 )

Using filesort
ORDER BY를 처리하기 위해 인덱스를 이용할 수도 있지만 적절한 인덱스를 사용하지 못할 때는 Mysql 서버가 조회된 레코드를 다시 한번 정렬해야 한다.
ORDER BY 처리가 인덱스를 사용하지 못할 때만 실행 계획의 Extra 칼럼에 "Using filesort" 코멘트가 표시되며, 이는 조회된 레코드를 정렬용 메모리
버퍼에 복사해 퀵 소트 또는 힙 소트 알고리즘을 이용해 정렬을 수행하게 된다는 의미다. 
Using filesort는 ORDER BY가 사용된 쿼리의 실행 계획에서만 나타날 수 있다.
-> 많은 부하를 일으키므로 가능하다면 쿼리를 튜닝하거나 인덱스를 생성하는 것이 좋다. 

Using index(커버링 인덱스)
데이터 파일을 전혀 읽지 않고 인덱스만 읽어서 쿼리를 모두 처리할 수 있을 때 표시된다. 인덱스를 이용해 처리하는 쿼리에서 가장 큰 부하를 차지하는
부분은 인덱스 검색에서 일치하는 키 값들의 레코드를 읽기위해 데이터 파일을 검색하는 작업이다. 최악의 경우에는 인덱스를 통해 검색된 결과 레코드
한 건 한 건마다 디스크를 한 번씩 읽어야 할 수도 있다.(인덱스를 사용하는 것보다 풀 테이블 스캔으로 처리하는 편이 더 효율적이라고 판단 할 수 있음)
-> 인덱스만으로 처리되는 것 = 커버링 인덱스

InnoDB의 모든 테이블은 클러스터링 인덱스로 구성돼 있다. 그리고 이 떄문에 InnoDB 테이블의 모든 세컨더리 인덱스는 데이터 레코드의 주솟값으로
프라이머리 키 값을 가진다. 
ex) first_name 인덱스에 레코드 주소가 pk 값인 emp_no 값이 저장 되어 있다.
first_name에 emp_no가 같이 저장되는 효과를 가지며, 이러한 클러스터링 인덱스 특성 때문에 쿼리가 커버링 인덱스로 처리될 가능성이 상당히 높다.

하지만 무조건 커버링 인덱스로 처리하려고 인덱스에 많은 칼럼을 추가하면 더 위험한 상황을 초래할 수 있으며, 너무 과도하게 인덱스의 칼럼이 많아지면
인덱스의 크기가 커져서 메모리 낭비가 심해지고 레코드를 저장하거나 변경하는 작업이 매우 느려질 수 있다.

접근 방법이 (type) eq_ref, ref range, index_merge, index 등과 같이 인덱스를 사용하는 실행 계획에서는 모두 커버링 인덱스가 가능하고 
인덱스 풀 스캔을 실행할 때도 처리될 수 있는데, 이때도 똑같은 인덱스 풀 스캔의 접근 방법이라면 커버링 인덱스가 아닌 경우보다 훨씬 빠르게 처리된다.
* type의 index와 Extra의 Using index는 다른 의미이다 (p479)

Using index condition
Mysql 옵티마이저가 인덱스 컨디션 푸시 다운 최적화를 사용하면 해당 메시지가 표시된다.

Using index for group-by
GROUP BY 처리를 위해 Mysql 서버는 그루핑 기준 칼럼을 이용해 정렬 작업을 수행하고 다시 정렬된 결과를 그루핑하는 형태의 고부하 작업을 필요로 한다.
하지만 GROUP BY 처리가 인덱스(B-TREE)를 이용하면 별도의 추가 정렬 작업 없이 정렬된 인덱스 칼럼을 순서대로 읽으면서 그루핑 작업만 수행한다.
GROUP BY 처리를 위해 인덱스를 읽는 방법을 루스 인덱스 스캔 이라고 한다.

타이트 인덱스 스캔 처리
AVG(), SUM(), COUNT() 처럼 조회하려는 값이 모든 인덱스를 읽어야할 때는 필요한 레코드만 듬성듬성 읽을 수 없어 Using index for group-by 메시지가
출력되지 않는다.

단일 칼럼으로 구성된 인덱스에서는 그루핑 칼럼 말고는 아무것도 조회하지 않는 쿼리에서 루스 인덱스 스캔을 사용할 수 있다. 그리고 다중 칼럼으로
만들어진 인덱스에서는 GROUP BY 절이 인덱스를 사용할 수 있어야 함은 물론이고 MIN(), MAX() 같이 조회하는 값이 인덱스의 첫 번째 또는 마지막 레코드만
읽어도 되는 쿼리는 "루스 인덱스 스캔"이 사용될 수 있다. 이때는 인덱스를 필요한 부분을 듬성듬성 읽는다.
* WHERE 절에서 사용하는 인덱스에 의해서 GROUP BY 절의 인덱스 사용 여부가 영향을 받는다.

- WHERE 조건절이 있지만 검색을 위해 인덱스를 사용하지 못하는 경우
GROUP BY 절은 인덱스를 사용할 수 있지만 WHERE 조건절이 인덱스를 사용하지 못할 때는 먼저 GROUP BY를 위해 인덱스를 읽은 후, WHERE 조건의 비교를
위해 데이터 레코드를 읽어야만 한다. 그래서 이 경우도 "루스 인덱스 스캔"을 이용할 수 없으며, 타이트 인덱스 스캔 과정을 통해 GROUP BY가 처리된다.

- WHERE 절의 조건이 있고, 검색을 위해 인덱스를 사용하는 경우
index_merge 이외의 접근 방법에서는 단 하나의 인덱스만 사용할 수 있다.
WHERE 절의 조건과 GROUP BY 처리가 똑같은 인덱스를 공통으로 사용할 수 있을 때만 루스 인덱스 스캔을 사용할 수 있다.
 * WHERE 조건절이 사용할 수 있는 인덱스와 GROUP BY 절이 사용할 수 있는 인덱스가 다른 경우 일반적으로 옵티마이저는 WHERE 조건절이 인덱스를 
 사용하도록 실행 계획을 수립하는 경향이 있다. 때로는 전혀 작업 범위를 좁히지 못하는 WHERE 조건이라 하더라도 GROUP BY보다는 WHERE 조건이 먼저
 인덱스를 사용할 수 있게 실행 계획이 수립된다.
 
참고.



