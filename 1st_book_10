실행계획
대부분의 DBMS는 많은 데이터를 안전하게 저장 및 관리하고 사용자가 원하는 데이터를 빠르게 조회 할 수 있게 해주는 것이 주목적이다.
이러한 목적을 달성하려면 옵티마이저가 사용자의 쿼리를 최적으로 처리될 수 있게 하는 쿼리의 실행 계획을 수립할 수 있어야 한다.
하지만 옵티마이저가 관리자나 사용자의 개입 없이 항상 좋은 실행 계획을 만들어낼 수 있는 것은 아니다. DBMS 서버는 이러한 문제점을
관리자나 사용자가 보완할 수 있도록 EXPLAIN 명령으로 옵티마이저가 수립한 실행 계획을 확인할 수 있게 해준다.

하지만 Mysql 서버에서 보여주는 실행 계획을 읽고 이해하려면 Mysql 서버가 데이터를 처리하는 로직을 이해할 필요가 있다.

통계 정보
Mysql 서버는 5.7 버전까지 테이블과 인덱스에 대한 개괄적인 정보를 가지고 실행 계획을 수립했다.
하지만 이는 테이블 칼럼의 값들이 실제 어떻게 분포돼 있는지에 대한 정보가 없기 때문에 실행 계획의 정확도가 떨어지는 경우가 많았다.
그래서 8.0 부터는 인덱스되지 않은 칼럼들에 대해서도 데이터 분포도를 수집해서 저장하는 히스토그램 정보가 도입됐다. 히스토그램이
도입됐다고 해서 기존의 테이블이나 인덱스의 통계 정보가 필요치 않은 것은 아니다.

테이블 및 인덱스 통계 정보
비용 기반 최적화에서 가장 중요한 것은 통계 정보다. 통계 정보가 정확하지 않다면 전혀 엉뚱한 방향으로 쿼리를 실행할 수 있기 때문이다.
예를 들어, 1억 건의 레코드가 저장된 테이블의 통계 정보가 갱신되지 않아서 레코드가 10건 미만인 것처럼 돼 있다면 옵티마이저는 실제
쿼리를 실행할 때 인덱스 레인지 스캔이 아니라 테이블을 처음부터 끝까지 읽는 방식(풀 테이블 스캔)으로 실행해 버릴 수도 있다. 

Mysql 또한 다른 DBMS와 같이 비용 기반의 최적화를 사용하지만, 다른 DBMS보다 통계 정보의 정확도가 높지 않고 통계 정보의 휘발성이 강했다.
그래서 Mysql 서버에서는 쿼리의 실행 계획을 수립할 때 실제 테이블의 데이터를 일부 분석해서 통계 정보를 보완해서 사용했다. 
이러한 이유로 5.6 부터는 통계 정보의 정확성을 높일 수 있는 방법이 제공되기 시작했지만 아직도 많은 사용자가 기존 방식을 그대로 사용한다.

Mysql 서버의 통계 정보
5.6 버전부터는 InnoDB 스토리지 엔진을 사용하는 테이블에 대한 통계 정보를 영구적으로 관리할 수 있게 개선됐다. 
5.5 버전까지는 각 테이블의 통계 정보가 메모리에만 관리되고, SHOW INDEX 명령으로만 테이블의 인덱스 칼럼의 분포도를 볼 수 있었다.
이처럼 통계 정보가 메모리에 관리될 경우 Mysql 서버가 재시작되면 지금까지 수집된 통계 정보가 모두 사라진다. 
5.6 버전부터는 각 테이블의 통계 정보를 mysql 데이터베이스의 innodb_index_stats 테이블과 innodb_table_stats 테이블로 관리할 수
있게 개선됐다. 이렇게 통계 정보를 테이블로 관리함으로써 Mysql 서버가 재시작돼도 기존의 통계 정보를 유지할 수 있게 됐다.

5.6에서 테이블을 생성할 때는 STATS_PERSISTENT 옵션을 설정할 수 있는데, 이 설정값에 따라 테이블 단위로 영구적인 통계 정보를 
보관할지 말지를 결정할 수 있다.

CREATE TABLE tab_test (fd1 INT, fd2 VARCHAR(20), PRIMARY KEY(fd1))
  ENGINE=InnoDB
  STATS_PERSISTENT={ DEFAULT | 0 | 1 }
-> 0 : 테이블의 통계 정보를 Mysql 5.5 이전의 방식대로 관리하며, mysql.(innodb_index_stats, innodb_table_stats)에 저장하지 않음
   1 : 테이블의 통계 정보를 mysql.(innodb_index_stats, innodb_table_stats)에 저장함
   DEFAULT : 테이블을 생성할 때 별도로 STATS_PERSISTENT 옵션을 설정하지 않은 것과 동일하며, 테이블의 통계를 영구적으로 관리할지 말지를
   innodb_stats_persistent 시스템 변수의 값으로 결정한다.
innodb_stats_persistent는 기본적으로 ON(1)이며, STATS_PERSISTENT 옵션 없이 테이블 생성 시 영구적인 통계 정보를 사용하며,
 mysql.(innodb_index_stats, innodb_table_stats)에 통계 정보를 저장한다.
 
영구적 (1), 단기적 (0) 변경 가능
ALTER TABLE employees.employees STATS_PERSISTENT=1; 처럼 변경가능 

통계 정보의 각 칼럼의 의미
innodb_index_stats.stat_name='n_diff_pfx%' : 인덱스가 가진 유니크한 값의 개수
innodb_index_stats.stat_name='n_leaf_pages' : 인덱스의 리프 노드 페이지 개수
innodb_index_stats.stat_name='size' : 인덱스 트리의 전체 페이지 개수
innodb_table_stats.n_rows : 테이블의 전체 레코드 건수
innodb_table_stats.clustered_index_size : 프라이머리 키의 크기(InnoDB 페이지 개수)
innodb_table_stats.sum_of_other_index_sizes : 프라이머리 키를 제외한 인덱스의 크기(InnoDB 페이지 개수)
* sum_of_other_index_sizes의 값은 STATS_AUTO_RECALC 옵션에 따라 0으로 보일 수 있는데 
 이 경우 ANALYZE TABLE employees.employees; 하면 통곗값이 저장된다.
 
STATS_AUTO_RECALC = 1 (테이블의 통계 정보를 5.5이전의 방식대로 자동 수집) (5.5 갱신 p398)
                    0 (ANALYZE TABLE 명령을 실행할 때만 수집)
                    DEFAULT ( innodb_stats_auto_recalc 시스템 설정 변수의 값으로 결정, 설정하지 않은 것과 동일 )
innodb_stats_auto_recalc = ON (default이며, 자동 갱신)
                           OFF (통계 정보가 자동으로 갱신되지 않음)

innodb_stats_transient_sample_pages : default 8, 자동으로 통계 정보 수집이 실행될 때 8개 페이지만 
                                      임의로 샘플링해서 분석하고 그 결과를 통계 정보로 활용함
innodb_stats_persistent_sample_pages : default 20, ANALYZE TABLE 명령 실행 시 임의로 20개 페이지만 
                                       샘플링해서 분석, 그 결과를 영구적인 통계 정보 테이블에 저장 및 활용함

더 정확한 통계 정보를 수집하고자 한다면 innodb_stats_persistent_sample_pages에 높은 값을 설정하면 된다. (정보 수집시간 길어짐)

히스토그램
5.7 까지의 통계 정보는 단순히 인덱스된 칼럼의 유니크한 값의 개수 정도만 가지고 있었는데, 이는 옵티마이저가 최적의 실행 계획을 수립하기에는 
많이 부족했다. 그래서 옵티마이저는 이러한 부족함을 메우기 위해 실행 계회긍ㄹ 수립할 때 실제 인덱스의 일부 페이지를 랜덤으로 가져와 참조하는
방식을 사용했다. 8.0 버전으로 업그레이드 되면서 Mysql 서버도 드디어 칼럼의 데이터 분포도를 참조할 수 있는 히스토그램 정보를 
활용할 수 있게 됐다.

히스토그램 정보 수집 및 삭제
8.0 버전에서 히스토그램 정보는 칼럼 단위로 관리되는데, 이는 자동으로 수집되지 않고 ANALYZE TABLE ... UPDATE HISTOGRAM 명령을 실행해
수동으로 수집 및 관리된다. 수집된 히스토그램 정보는 시스템 딕셔너리에 함께 저장되고, Mysql 서버가 시작될 때 딕셔너리의 히스토그램 정보를 
information_schema 데이터베이스의 column_statistics 테이블로 로드한다. 그래서 실제 히스토그램 정보를 조회하며녀 column_statistics
테이블을 SELECT해서 참조할 수 있다.
ex) 
ANALYZE TABLE employees.employees UPDATE HISTOGRAM ON gender, hire_date;

SELECT *
  FROM INFORMATION_SCHEMA.COLUMN_STATISTICS 
 WHERE SCHEMA_NAME='employees' 
   AND TABLE_NAME ='employees'\G

8.0 버전에서는 다음과 같이 2종류의 히스토그램 타입이 지원된다.
Singleton(싱글톤 히스토그램): 칼럼값 개별로 레코드 건수를 관리하는 히스토그램으로, 
                             Value-Based 히스토그램 또는 도수 분포라고도 불린다.
Equi-Height(높이 균형 히스토그램) : 칼럼값의 범위를 균등한 개수로 구분해서 관리하는 히스토그램으로, 
                                  Height-Balanced 히스토그램이라고도 불린다.

히스토그램은 버킷(Bucket) 단위로 구분되어 레코드 건수나 칼럼값의 범위가 관리되는데, 싱글톤 히스토그램은 칼럼이 가지는 값별로 
버킷이 할당되며 높이 균형 히스토그램에서는 개수가 균등한 칼럼값의 범위별로 하나의 버킷이 할당된다. 싱글톤 히스토그램은 각 버킷이 
칼럼의 값과 발생 빈도의 비율의 2개 값을 가진다. 반면 높이 균형 히스토그램은 각 버킷이 범위 시작 값과 마지막 값, 그리고 발생 빈도율과
각 버킷에포함된 유니크한 값의 개수 등 4개의 값을 가진다.
(p 402, 10.1 - gender 칼럼에 생성된 싱글톤 히스토그램, 10.2 hire_date 칼럼에 생성된 높이 균형 히스토그램)
gender - enum('M', 'F'), hire_date - date

싱글톤 히스토그램은 주로 코드 값과 같이 유니크한 값의 개수가 상대적으로 적은(히스토그램의 버킷 수보다 적은) 경우 사용된다. 
싱글톤 히스토그램에서 gender 칼럼의 값이 'M'인 레코드의 비율은 0.5998정도이며, 'F'인 레코드의 비율은 1로 표시된다. 
그런데 히스토그램의 모든 레코드 건수 비율은 누적으로 표시된다. 그래서 gender 칼럼의 값이 'F'인 레코드의 비율은 1-0.5998이 된다.

높이 균형 히스토그램은 칼럼값의 각 범위에 대해 레코드 건수 비율이 누적으로 표시된다. 그래서 히스토그램의 버킷 범위가 뒤로 갈 수록
비율이 높아지는 것으로 보이지만, 사실은 범위별로 비율이 같은 수준에서 hire_date 칼럼의 범위가 선택된 것이다.* 
그래프의 기울기가 일정한 것을 보면 각 범위가 비슷한 값(레코드의 건수)을 가진다는 것을 알 수 있다.

 information_schema.column_statistics 테이블의 HISTOGRAM 칼럼이 가진 나머지 필드들의 의미
sampling-rate : 히스토그램 정보를 수집하기 위해 스캔한 페이지의 비율을 저장한다.
    샘플링 비율이 0.35라면 전체 데이터 페이지의 35%를 스캔해서 이 정보가 수집됐다는 것을 의미한다. 물론 샘플링 비율이 높아질수록 더 정확한
    히스토그램이 되겠지만, 테이블을 전부 스캔하는 것은 부하가 높으며 시스템의 자원을 많이 소모한다. 그래서 Mysql 서버는 
    histogram_generation_max_mem_size 시스템 변수에 설정된 메모리 크기에 맞게 적절히 샘플링 한다.
    histogram_generation_max_mem_size 시스템 변수의 메모리 크기는 20MB로 초기화돼 있다.
histogram-type : 히스토그램의 종류를 저장
number-of-buckets-specified : 히스토그램을 생성할 때 설정했던 버킷의 개수를 저장. 별도로 개수를 지정하지 않았다며 기본으로 100를 사용한다.
    버킷은 최대 1024개를 설정할 수 있지만, 일반적으로 100개의 버킷이면 충분하다고 알려져 있다.

8.0.19 미만의 버전까지는 히스토그램 생성 시 sampling-rate, histogram_generation_max_mem_size 시스템 변수의 크기에 관계없이 Mysql서버는
풀 스캔을 통해 데이터 페이지를 샘플링해서 히스토그램을 생성했다. 하지만 8.0.19 버전부터 InnoDB 스토리지 엔진 자체적으로 샘플링 알고리즘을
구현했으며, 더이상 히스토그램 수집 시 풀 테이블 스캔이 필요치 않게 됐다.

생성된 히스토그램은 다음과 같이 삭제할 수 있다. 히스토그램의 삭제 작업은 테이블의 데이터를 참조하는 것이 아니라 딕셔너리의 내용만 삭제하기
때문에 다른 쿼리 처리의 성능에 영향을 주지 않고 즉시 완료된다. 하지만 히스토그램이 사라지면 쿼리의 실행 계획이 달라질 수 있다.
ANALYZE TABLE employees.employees DROP HISTOGRAM ON gender, hire_date;

히스토그램을 삭제하지 않고 Mysql 옵티마이저가 히스토그램을 사용하지 않게 하려면 다음과 같이 optimizer_switch 시스템 변수의 값을 변경하면 된다.
SET GLOBAL optimizer_switch='condition_fanout_filter=off';

특정 커넥션 또는 특정 쿼리에서만 히스토그램을 사용하지 않고자 한다면 다음과 같은 방법을 사용하면 된다.
현재 커넥션만 해당
SET SESSION optimizer_switch='condition_fanout_filter=off';

현재 쿼리만 해당
SELECT /*+ SET_VAR(optimizer_switch='condition_fanout_filter=off') */ * FROM ...

히스토그램의 용도
Mysql 서버에 히스토그램이 도입되기 이전에도 테이블과 인덱스에 대한 통계 정보는 존재했다. 하지만 기존 Mysql 서버가 가지고 있던 통계 정보는
테이블의 전체 레코드 건수와 인덱스된 칼럼이 가지는 유니크한 값의 개수 정도였다. 예를 들어, 테이블의 레코드가 1000건이고 어떤 칼럼의 유니크한
값 개수가 100개였다면 Mysql 서버는 이 칼럼에 대해 다음과 같은 동등 비교 검색을 하면 대략 10개의 레코드가 일치할 것이라고 예측한다.
ex) SELECT * FROM order WHERE user_id='matt.lee';

하지만 실제 응용 프로그램의 데이터는 항상 균등한 분포도를 가지지 않는다. 어떤 사용자는 주문 레코드를 많이 가지고 있고 또 다른 사용자들은
주문 정보가 하나도 없을 수 있다. 그렇지만 Mysql 서버의 기존 통계 정보는 이런 부분을 고려하지 못했다. 이러한 단점을 보완하기 위해 히스토그램이
도입됐다. 히스토그램은 특정 칼럼이 가지는 모든 값에 대한 분포도 정보를 가지지는 않지만 각 범위(버킷)별로 레코드의 건수와 유니크한 값의 개수
정보를 가지기 때문에 훨씬 정확한 예측을 할 수 있다. 

예제)
간단히 employees 테이블의 birth_date 칼럼에 대해 히스토그램이 없을 때와 히스토그램이 있을 때의 예측치가 얼마나 달라지는지 한 번 살펴보자.
EXPLAIN SELECT * FROM employees WHERE first_name='Zita' AND birth_date BETWEEN '1950-01-01' AND '1960-01-01';
-> key: ix_firstname으로 인한 rows 224건 그 중 filtered 11.11% 

ANALYZE TABLE employees UPDATE histogram ON first_name, birth_date; 
EXPLAIN SELECT * FROM employees WHERE first_name='Zita' AND birth_date BETWEEN '1950-01-01' AND '1960-01-01';
-> key: ix_firstname으로 인한 rows 224건 그 중 filtered 60.82%

실제값
SELECT SUM(CASE WHEN birth_date between '1950-01-01' and '1960-01-01' THEN 1 ELSE 0 END) / COUNT(*) as ratio
  FROM employees WHERE first_name='Zita';  // ratio : 0.6384
-> 11.11% / 60.82% // 63.84%의 결과 : birth_date 로 인한 예측 값이 히스토그램의 유무에 따른 큰 차이를 볼 수 있다.

히스토그램 정보가 없으면 옵티마이저는 데이터가 균등하게 분포돼 있을 것으로 예측한다. 하지만 히스토그램이 있으면 특정 범위의 데이터가
많고 적음을 식별할 수 있다. 다음 예제는 2개의 테이블을 조인하는데, 옵티마이저 힌트를 이용해 강제로 조인의 순서를 바꿔 성능을 살펴본 것이다. 
SELECT /*+ JOIN_ORDER(e, s) */ * 
  FROM salaries s INNER JOIN employees e ON e.emp_no=s.emp_no
   AND e.birth_date BETWEEN '1950-01-01' AND '1950-02-01'
  WHERE s.salary BETWEEN 40000 AND 70000;

SELECT /*+ JOIN_ORDER(s, e) */ * 
  FROM salaries s INNER JOIN employees e ON e.emp_no=s.emp_no
   AND e.birth_date BETWEEN '1950-01-01' AND '1950-02-01'
  WHERE s.salary BETWEEN 40000 AND 70000;

두 쿼리 모두 동일한 결과를 만들어 내지만 employees 테이블을 먼저 읽은 경우 조인을 해야 할 건수가 salaries 테이블을 먼저 읽은 경우보다 훨씬
적다. birth_date 칼럼과 salary 칼럼은 인덱스되지 않은 칼럼이어서 이 칼럼들에 히스토그램이 없다면 옵티마이저는 이 칼럼들의 데이터 분포를 전혀
알지 못하고 실행 계획을 수립하게 된다. 때문에 옵티마이저 힌트를 제거했을 때 옵티마이저는 테이블의 전체 레코드 건수가 크기 등의 단순한 정보만으로
조인의 드라이빙 테이블을 결정하게된다. 상황에 따라 어떤 테이블이라도 조인의 드라이빙 테이블이 될 수 있는 것이다. 

이러한 차이로 인해 쿼리의 성능은 10배 정도 차이를 보일 수 있으며, InnoDB 버퍼 풀에 데이터가 존재하지 않아서 디스크에서 데이터를 읽어야 하는 
경우라면 몇 배의 차이가 발생할 수도 있다. 각 칼럼에 대해 히스토그램 정보가 있으면 어느 테이블을 먼저 읽어야 조인의 횟수를 줄일 수 있을지 
옵티마이저가 더 정확히 판단할 수 있다.

히스토그램과 인덱스
히스토그램과 인덱스는 완전히 다른 객체이기 때문에 서로 비교할 대상은 아니지만, Mysql 서버에서 인덱스는 부족한 통계 정보를 수집하기 위해
사용된다는 측면에서 어느 정도 공통점을 가진다고 볼 수 있다. Mysql 서버에서는 쿼리의 실행 계획을 수립할 때 사용 가능한 인덱스들로부터 조건절에
일치하는 레코드 건수를 대략 파악하고 최종적으로 가장 나은 실행 계획을 선택한다. 이때 조건절에 일치하는 레코드 건수를 예측하기 위해 옵티마이저는
실제 인덱스의 B-Tree를 샘플링해서 살펴본다. 이 작업을 메뉴얼에서는 "인덱스 다이브"라고 표현한다.

쿼리의 검색 조건으로 많이 사용되는 칼럼에 대해서는 일반적으로 인덱스를 생성한다. 그런데 이렇게 인덱스된 칼럼에 대해 히스토그램 정보를 수집해
두는 것이 좋을지 고민스러울 수 있다. 다음 쿼리를 한번 생각해보자.
SELECT * 
  FROM employees 
 WHERE first_name='Tonny' 
   AND birth_date BETWEEN '1954-01-01' AND '1955-01-01';
   
옵티마이저는 테이블 풀 스캔을 할지 first_name 칼럼의 인덱스를 이용할지 고민할 것이다. birth_date 칼럼에는 인덱스가 없으므로
이 쿼리에서 birth_date 칼럼은 실행 계획에 큰 영향을 미치지 않을 것이다. first_name 칼럼에 히스토그램이 수집돼 있었다면 Mysql 옵티마이저는
그 히스토그램을 이용하게 될까? 8.0서버에서는 인덱스된 칼럼을 검색 조건으로 사용하는 경우 그 칼럼의 히스토그램은 사용하지 않고 실제 인덱스 다이브를
통해 직접 수집한 정보를 활용한다. 이는 실제 검색 조건의 대상 값에 대한 샘플링을 실행하는 것이므로 항상 히스토그램보다 정확한 결과를 기대할 수 있기
때문이다. 그래서 8.0 버전에서 히스토그램은 주로 인덱스되지 않은 칼럼에 대한 데이터 분포도를 참조하는 용도로 사용된다. *

하지만 인덱스 다이브 작업은 어느 정도의 비용이 필요하며, 때로는 (IN 절에 값이 많이 명시된 경우) 실행 계획 수립만으로도 상당한 인덱스 다이브를
실행하고 비용도 그만큼 커진다. 아마 조만간 실제 인덱스 다이브를 실행하기보다는 히스토그램을 활용하는 최적화 기능도 Mysql 서버에 추가되지 않을까
생각된다.

코스트 모델(Cost Model)
Mysql 서버가 쿼리를 처리하려면 다음과 같은 다양한 작업을 필요로 한다.
- 디스크로부터 데이터 페이지 읽기
- 메모리(InnoDB 버퍼 풀)로부터 데이터 페이지 읽기
- 인덱스 키 비교
- 레코드 평가
- 메모리 임시 테이블 작업
- 디스크 임시 테이블 작업

Mysql 서버는 사용자의 쿼리에 대해 이러한 다양한 작업이 얼마나 필요한지 예측하고 전체 작업 비용을 계산할 결과를 바탕으로 최적의 실행 계획을 찾는다.
이렇게 전체 쿼리의 비용을 계산하는 데 필요한 단위 작업들의 비용을 코스트 모델이라고 한다. 5.7이전까지는 이런 작업들의 비용을 Mysql 서버 소스 코드에
상수화해서 사용했다. 하지만 이 작업들의 비용은 Mysql 서버가 사용하는 하드웨어에 따라 달라질 수 있기 때문에 예전 버전처럼 고정된 비용을 일률적으로
적용하는 것은 최적의 실행 계획 수립에 있어서 방행 요소였다.

이런 단점을 보완하기 위해 5.7버전부터 Mysql 서버의 소스 코드에 상수화돼 있던 각 단위 작업의 비용을 DBMS 관리자가 조정할 수 있게 개선됐다.
하지만 5.7버전에서는 인덱스되지 않은 칼럼의 데이터 분포(히스토그램)나 메모리에 상주 중인 페이지의 비율 등 비용 계산과 연관된 부분의 정보가 부족한
상태였다. 8.0 버전으로 업그레이드되면서 비로소 칼럼의 데이터 분포를 위한 히스토그램과 각 인덱스별 메모리에 적재된 페이지의 비율이 관리되고
옵티마이저의 실행 계획 수립에 사용되기 시작했다.

8.0 서버의 코스트 모델은 다음 2개 테이블에 저장돼 있는 설정값을 사용하는데, 두 테이블 모두 mysql DB에 존재한다.
server_cost : 인덱스를 찾고 레코드를 비교하고 임시 테이블 처리에 대한 비용 관리 
engine_cost : 레코드를 가진 데이터 페이지를 가져오는 데 필요한 비용 관리

server_cost 테이블과 engine_cost 테이블은 공통으로 다음 5개의 칼럼을 가지고 있다. 참고로 last_updated와 comment 칼럼의 값은 Mysql 서버
옵티마이저에 영향을 미치는 정보는 아니며, 단순 정보성으로 관리되는 칼럼이다.
cost_name : 코스트 모델의 각 단위 작업
default_value : 각 단위 작업의 비용(기본값이며, 이 값은 Mysql 서버 소스 코드에 설정된 값)
cost_value : DBMS 관리자가 설정한 값(이 값이 NULL이면 Mysql 서버는 default_value 칼럼의 비용 사용)
last_updated : 단위 작업의 비용이 변경된 시점
comment : 비용에 대한 추가 설명

engine_cost 테이블은 위의 5개 칼럼에 추가로 다음 2개 칼럼을 더 가지고 있다
engine_name : 비용이 적용된 스토리지 엔진
device_type : 디스크 타입

engine_name 칼럼은 스토리지 엔진별로 각 단위 작업의 비용을 설정할 수 있는데, 기본값은 "default"다. 여기서 default는 특정 스토리지 엔진의 비용이
설정되지 않았다면 해당 스토리지 엔진의 비용으로 이 값을 적용한다는 의미이다. MEMORY, MyISAM, InnoDB 스토리지 엔진에 대해 단위 작업의 비용을
달리 설정하고자 한다면 engine_name 칼럼을 이용하면 된다. device_type은 디스크의 타입을 설정할 수 있는데, 8.0에서는 아직 이 칼럼의 값을 활용하지
않는다. 그래서 8.0에서는 "0"만 설정가능하다.

8.0 버전의 코스트 모델에서 지원하는 단위 작업
              cost_name            default_value  설명
engine_cost - io_block_read_cost           1.00   디스크 데이터 페이지 읽기
              memory_block_read_cost       0.25   메모리 데이터 페이지 읽기
server_cost - disk_temptable_create_cost  20.00   디스크 임시 테이블 생성
              disk_temptable_row_cost      0.50   디스크 임시 테이블의 레코드 읽기
              key_compare_cost             0.05   인덱스 키 비교
              memory_temptable_create_cost 1.00   메모리 임시 테이블 생성
              memory_temptable_row_cost    0.10   메모리 임시 테이블의 레코드 읽기
              row_evaluate_cost            0.10   레코드 비교

row_evaluate_cost는 스토리지 엔진이 반환한 레코드가 쿼리의 조건에 일치하는지를 평가하는 단위 작업을 의미하는데, row_evaluate_cost 값이 증가할수록
풀 테이블 스캔과 같이 많은 레코드를 처리하는 쿼리의 비용이 높아지고 반대로 레인지 스캔과 같이 상대적으로 적은 수의 레코드를 처리하는 쿼리의 비용이
낮아진다. key_compare_cost는 키 값의 비교 작업에 필요한 비용을 의미하는데, key_compare_cost 값이 증가할수록 레코드 정렬과 같이 키 값 비교
처리가 많은 경우 쿼리의 비용이 높아진다.
EXPLAIN FORMAT=TREE
 SELECT *
   FROM employees WHERE first_name='Matt'\G

EXPLAIN FORMAT=JSON
 SELECT *
   FROM employees WHERE first_name='Matt'\G

각 단위 작업의 비용을 이용해 Mysql 서버의 실행 계획에 표시되는 비용을 직접 계산해보고 싶을 수 있지만, 해당 정보들이 모두 사용자에게 표시되지 않기
때문에 직접 계산하는 것은 상당히 어렵다.

코스트 모델에서 중요한 것은 각 단위 작업에 설정되는 비용 값이 커지면 어떤 실행 계획들이 고비용으로 바뀌고 어떤 실행 계획들이 저비용으로 바뀌는지를
파악하는 것이다. 대표적으로 각 단위 작업의 비용이 변경되면 예상할 수 있는 결과들은 다음과 같다. 물론 다음 예시가 Mysql 서버 옵티마이저의
실행 계획에 미치는 영향의 전부는 아니지만, 대략 코스트 모델을 이해하고 각 단위 작업의 비용 조절을 연습해볼 수 있는 기준은 될 것이다.

- key_compare_cost            
- row_evaluate_cost           
- disk_temptable_create_cost  
- memory_temptable_create_cost
- io_block_read_cost          
- memory_block_read_cost      

