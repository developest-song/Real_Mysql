옵티마이저와 힌트
Mysql에서는 EXPLAIN이라는 명령으로 쿼리의 실행 계획을 확인할 수 있는데, EXPLAIN 명령의 결과에는 상당히 많은 정보가 출력된다.
실행계획에 표시되는 내용을 제대로 이해하려면 Mysql 서버 옵티마이저가 실행하는 최적화에 대해 어느 정도 지식을 갖추고 있어야 한다.

어떤 DBMS든지 쿼리의 실행 계획을 수립하는 옵티마이저는 가장 복잡한 부분으로 알려져 있으며, 옵티마이저가 만들어 내는 실행 계획을
이해하는 것 또한 상당히 어려운 부분이다. 하지만 실행 계획을 이해할 수 있어야만 실행 계획의 불합리한 부분을 찾아내고, 더 최적화된
방법으로 실행 계획을 수립하도록 유도할 수 있다.

쿼리 실행 절차
Mysql의 쿼리 실행 과정
1. 사용자로부터 요청된 SQL 문장을 잘게 쪼개서 Mysql 서버가 이해할 수 있는 수준으로 분리(파스 트리)한다.
2. SQL의 파싱 정보(파스 트리)를 확인하면서 어떤 테이블부터 읽고 어떤 인덱스를 이용해 테이블을 읽을지 선택한다.
3. 두 번째 단계에서 결정된 테이블의 읽기 순서나 선택된 인덱스를 이용해 스토리지 엔진으로부터 데이터를 가져온다.

1의 단계를 SQL 파싱이라 하며, SQL 파서라는 모듈로 처리한다.
SQL 문장이 문법적으로 잘못됐다면 이 단계에서 걸러진다. 또한 이 단계에서 SQL 파스 트리가 만들어진다.
Mysql 서버는 SQL 문장 그 자체가 아니라 SQL 파스 트리를 이용해 쿼리를 실행한다.

2의 단계는 1의 단계에서 만들어진 SQL 파스 트리를 참조하면서 다음과 같은 내용을 처리한다.
- 불필요한 조건 제거 및 복잡한 연산의 단순화
- 여러 테이블의 조인이 있는 경우 어떤 순서로 테이블을 읽을지 결정
- 각 테이블에 사용된 조건과 인덱스 통계 정보를 이용해 사용할 인덱스를 결정
- 가져온 레코드들을 임시 테이블에 넣고 다시 한번 가공해야 하는지 결정
2의 단계는 최적화 및 실행 계획 수립 단계 이며, 옵티마이저에서 처리한다

3의 단계는 수립된 실행 계획대로 스토리지 엔진에 레코드를 읽어오도록 요청하고, Mysql 엔진에서는 스토리지 엔진으로부터 받은
레코드를 조인하거나 정렬하는 작업을 수행한다. 

1, 2의 단계는 거의 Mysql 엔진에서 처리하며 3의 단계는 Mysql 엔진과 스토리지 엔진이 동시에 참여해서 처리한다.

옵티마이저의 종류
현재 대부분의 DBMS가 선택하고 있는 비용 기반 최적화(CBO) 방법과 예전 초기 버전의 오라클 DBMS에서 많이 사용했던 규칙 기반 최적화 방법(RBO)으로 크게 나눌 수 있다.

- RBO는 기본적으로 대상 테이블의 레코드 건수나 선택도 등을 고려하지 않고 옵티마이저에 내장된 우선순위에 따라 실행 계획을 수립하는 방식을 의미한다. 이 방식에서는
통계 정보(테이블의 레코드 건수나 칼럼값의 분포도)를 조사하지 않고 실행 계획이 수립되기 때문에 같은 쿼리에 대해서는 거의 항상 같은 실행 방법을 만들어 낸다.
하지만 사용자의 데이터는 분포도가 매우 다양하기 때문에 RBO는 이미 오래전부터 많은 DBMS에서 거의 사용되지 않는다.
- CBO는 쿼리를 처리하기 위한 여러 가지 가능한 방법을 만들고 ,각 단위 작업의 비용(부하) 정보와 대상 테이블의 예측된 통계 정보를 이용해 실행 계획별 비용을 산출한다.
이렇게 산출된 실행 방법별로 비용이 최소로 소요되는 처리 방식을 선택해 최종적으로 쿼리를 실행한다.

대부분의 RDBMS가 CBO를 채택한다.

기본 데이터 처리
결과물은 동일하더라도 RDBMS별로 그 결과를 만들어 내는 과정은 천차만별이다.

풀 테이블 스캔과 풀 인덱스 스캔
풀 테이블 스캔은 인덱스를 사용하지 않고 테이블의 데이터를 처음부터 끝까지 읽어서 요청된 작업을 처리하는 작업을 의미한다.

- 조건
1. 테이블의 레코드 건수가 너무 작아서 인덱스를 통해 읽는 것보다 풀 테이블 스캔을 하는 편이 더 빠른 경우(일반적으로 테이블이 페이지 1개로 구성된 경우)
2. WHERE 절이나 ON 절에 인덱스를 이용할 수 있는 적절한 조건이 없는 경우
3. 인덱스 레인지 스캔을 사용할 수 있는 쿼리라고 하더라도 옵티마이저가 판단한 조건 일치 레코드 건수가 너무 많은 경우(인덱스의 B-Tree를 샘플링해서 조사한 통계 정보 기준)

일반적으로 테이블의 전체 크기는 인덱스보다 훨ㅆ니 크기 때문에 테이블을 처음부터 끝까지 읽는 작업은 상당히 많은 디스크 읽기가 필요하다. 그래서 대부분 DBMS는 풀 테이블 스캔을 
실행할 때 한꺼번에 여러 개의 블록이나페이지를 읽어노느 긴으을 내장하고 있다. 하지만 Mysql에는 풀 테이블 스캔을 실행할 때 한꺼번에 몇 개씩 페이지를 읽어올지 설정하는 
시스템 변수는 없다. 그래서 많은 사람들이 Mysql은 풀 테이블 스캔을 실행할 때 디스크로부터 페이지를 하나씩 읽어 오는 것으로 생각한다.
이것은 MyISAM 스토리지 엔진에는 맞는 이야기지만 InnoDB 스토리지 엔진에서는 틀린 말이다. 

InnoDB 스토리지 엔진은 특정 테이블의 연속된 데이터 페이지가 읽히면 백그라운드 스레드에 의해 Read ahead 작업이 자동으로 시작된다. 
Read ahead란 어떤 영역의 데이터가 앞으로 필요해지리라는 것을 예측해서 요청이 오기 전에 미리 디스크에서 읽어 InnoDB의 버퍼 풀에 가져다 두는 것을 의미한다.
풀 테이블 스캔이 실행되면 처음 몇 개의 데이터 페이지는 포그라운드 스레드가 페이지 읽기를 실행하지만 특정 시점부터는 읽기 작업을 백그라운드 스레드로 넘긴다.
백그라운드 스레드가 읽기를 넘겨받는 시점부터는 한 번에 4개 또는 8개씩의 페이지를 읽으면서 계속 그 수를 증가시킨다. 이때 한 번에 최대 64개의 데이터 페이지까지 
읽어서 버퍼 풀에 저장해둔다. 포그라운드 스레드는 미리 버퍼 풀에 준비된 데이터를 가져다 사용하기만 하면 되므로 쿼리가 상당히 빨리처리되는 것이다.

**
innodb_read_ahead_threshold 를 이용해 InnoDB 스토리지 엔진이 언제 Read ahead를 시작할지 임계값을 설정할 수 있다. 설정값 만큼 읽힐 시 그다음 페이지들을 읽어 버퍼풀에 적재
일반적으로 default도 충분하지만 데이터 웨어하우스용으로 운영된다면 더 낮은 값을 설정하여 Read ahead가 더 빨리 시작되게 유도하는 것도 좋은 방법이다. 

풀 인덱스 스캔은 인덱스를 처음부터 끝까지 스캔하는 것을 의미한다. Read ahead는 풀 인덱스 스캔에서도 동일하게 사용된다.

SELECT COUNT(*) FROM employees; // 풀 인덱스 스캔을 할 가능성이 높다 
SELECT * FROM employees;        // 풀 테이블 스캔

병렬 처리



