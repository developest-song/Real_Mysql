옵티마이저와 힌트
Mysql에서는 EXPLAIN이라는 명령으로 쿼리의 실행 계획을 확인할 수 있는데, EXPLAIN 명령의 결과에는 상당히 많은 정보가 출력된다.
실행계획에 표시되는 내용을 제대로 이해하려면 Mysql 서버 옵티마이저가 실행하는 최적화에 대해 어느 정도 지식을 갖추고 있어야 한다.

어떤 DBMS든지 쿼리의 실행 계획을 수립하는 옵티마이저는 가장 복잡한 부분으로 알려져 있으며, 옵티마이저가 만들어 내는 실행 계획을
이해하는 것 또한 상당히 어려운 부분이다. 하지만 실행 계획을 이해할 수 있어야만 실행 계획의 불합리한 부분을 찾아내고, 더 최적화된
방법으로 실행 계획을 수립하도록 유도할 수 있다.

쿼리 실행 절차
Mysql의 쿼리 실행 과정
1. 사용자로부터 요청된 SQL 문장을 잘게 쪼개서 Mysql 서버가 이해할 수 있는 수준으로 분리(파스 트리)한다.
2. SQL의 파싱 정보(파스 트리)를 확인하면서 어떤 테이블부터 읽고 어떤 인덱스를 이용해 테이블을 읽을지 선택한다.
3. 두 번째 단계에서 결정된 테이블의 읽기 순서나 선택된 인덱스를 이용해 스토리지 엔진으로부터 데이터를 가져온다.

1의 단계를 SQL 파싱이라 하며, SQL 파서라는 모듈로 처리한다.
SQL 문장이 문법적으로 잘못됐다면 이 단계에서 걸러진다. 또한 이 단계에서 SQL 파스 트리가 만들어진다.
Mysql 서버는 SQL 문장 그 자체가 아니라 SQL 파스 트리를 이용해 쿼리를 실행한다.

2의 단계는 1의 단계에서 만들어진 SQL 파스 트리를 참조하면서 다음과 같은 내용을 처리한다.
- 불필요한 조건 제거 및 복잡한 연산의 단순화
- 여러 테이블의 조인이 있는 경우 어떤 순서로 테이블을 읽을지 결정
- 각 테이블에 사용된 조건과 인덱스 통계 정보를 이용해 사용할 인덱스를 결정
- 가져온 레코드들을 임시 테이블에 넣고 다시 한번 가공해야 하는지 결정
2의 단계는 최적화 및 실행 계획 수립 단계 이며, 옵티마이저에서 처리한다

3의 단계는 수립된 실행 계획대로 스토리지 엔진에 레코드를 읽어오도록 요청하고, Mysql 엔진에서는 스토리지 엔진으로부터 받은
레코드를 조인하거나 정렬하는 작업을 수행한다. 

1, 2의 단계는 거의 Mysql 엔진에서 처리하며 3의 단계는 Mysql 엔진과 스토리지 엔진이 동시에 참여해서 처리한다.

옵티마이저의 종류
현재 대부분의 DBMS가 선택하고 있는 비용 기반 최적화(CBO) 방법과 예전 초기 버전의 오라클 DBMS에서 많이 사용했던 규칙 기반 최적화 방법(RBO)으로 크게 나눌 수 있다.

- RBO는 기본적으로 대상 테이블의 레코드 건수나 선택도 등을 고려하지 않고 옵티마이저에 내장된 우선순위에 따라 실행 계획을 수립하는 방식을 의미한다. 이 방식에서는
통계 정보(테이블의 레코드 건수나 칼럼값의 분포도)를 조사하지 않고 실행 계획이 수립되기 때문에 같은 쿼리에 대해서는 거의 항상 같은 실행 방법을 만들어 낸다.
하지만 사용자의 데이터는 분포도가 매우 다양하기 때문에 RBO는 이미 오래전부터 많은 DBMS에서 거의 사용되지 않는다.
- CBO는 쿼리를 처리하기 위한 여러 가지 가능한 방법을 만들고 ,각 단위 작업의 비용(부하) 정보와 대상 테이블의 예측된 통계 정보를 이용해 실행 계획별 비용을 산출한다.
이렇게 산출된 실행 방법별로 비용이 최소로 소요되는 처리 방식을 선택해 최종적으로 쿼리를 실행한다.

대부분의 RDBMS가 CBO를 채택한다.

기본 데이터 처리
결과물은 동일하더라도 RDBMS별로 그 결과를 만들어 내는 과정은 천차만별이다.

풀 테이블 스캔과 풀 인덱스 스캔
풀 테이블 스캔은 인덱스를 사용하지 않고 테이블의 데이터를 처음부터 끝까지 읽어서 요청된 작업을 처리하는 작업을 의미한다.

- 조건
1. 테이블의 레코드 건수가 너무 작아서 인덱스를 통해 읽는 것보다 풀 테이블 스캔을 하는 편이 더 빠른 경우(일반적으로 테이블이 페이지 1개로 구성된 경우)
2. WHERE 절이나 ON 절에 인덱스를 이용할 수 있는 적절한 조건이 없는 경우
3. 인덱스 레인지 스캔을 사용할 수 있는 쿼리라고 하더라도 옵티마이저가 판단한 조건 일치 레코드 건수가 너무 많은 경우(인덱스의 B-Tree를 샘플링해서 조사한 통계 정보 기준)

일반적으로 테이블의 전체 크기는 인덱스보다 훨ㅆ니 크기 때문에 테이블을 처음부터 끝까지 읽는 작업은 상당히 많은 디스크 읽기가 필요하다. 그래서 대부분 DBMS는 풀 테이블 스캔을 
실행할 때 한꺼번에 여러 개의 블록이나페이지를 읽어노느 긴으을 내장하고 있다. 하지만 Mysql에는 풀 테이블 스캔을 실행할 때 한꺼번에 몇 개씩 페이지를 읽어올지 설정하는 
시스템 변수는 없다. 그래서 많은 사람들이 Mysql은 풀 테이블 스캔을 실행할 때 디스크로부터 페이지를 하나씩 읽어 오는 것으로 생각한다.
이것은 MyISAM 스토리지 엔진에는 맞는 이야기지만 InnoDB 스토리지 엔진에서는 틀린 말이다. 

InnoDB 스토리지 엔진은 특정 테이블의 연속된 데이터 페이지가 읽히면 백그라운드 스레드에 의해 Read ahead 작업이 자동으로 시작된다. 
Read ahead란 어떤 영역의 데이터가 앞으로 필요해지리라는 것을 예측해서 요청이 오기 전에 미리 디스크에서 읽어 InnoDB의 버퍼 풀에 가져다 두는 것을 의미한다.
풀 테이블 스캔이 실행되면 처음 몇 개의 데이터 페이지는 포그라운드 스레드가 페이지 읽기를 실행하지만 특정 시점부터는 읽기 작업을 백그라운드 스레드로 넘긴다.
백그라운드 스레드가 읽기를 넘겨받는 시점부터는 한 번에 4개 또는 8개씩의 페이지를 읽으면서 계속 그 수를 증가시킨다. 이때 한 번에 최대 64개의 데이터 페이지까지 
읽어서 버퍼 풀에 저장해둔다. 포그라운드 스레드는 미리 버퍼 풀에 준비된 데이터를 가져다 사용하기만 하면 되므로 쿼리가 상당히 빨리처리되는 것이다.

**
innodb_read_ahead_threshold 를 이용해 InnoDB 스토리지 엔진이 언제 Read ahead를 시작할지 임계값을 설정할 수 있다. 설정값 만큼 읽힐 시 그다음 페이지들을 읽어 버퍼풀에 적재
일반적으로 default도 충분하지만 데이터 웨어하우스용으로 운영된다면 더 낮은 값을 설정하여 Read ahead가 더 빨리 시작되게 유도하는 것도 좋은 방법이다. 

풀 인덱스 스캔은 인덱스를 처음부터 끝까지 스캔하는 것을 의미한다. Read ahead는 풀 인덱스 스캔에서도 동일하게 사용된다.

SELECT COUNT(*) FROM employees; // 풀 인덱스 스캔을 할 가능성이 높다 
SELECT * FROM employees;        // 풀 테이블 스캔

병렬 처리
8.0부터는 용도가 한정돼 있긴 하지만 처음으로 쿼리의 병렬 처리가 가능해졌다(하나의 쿼리를 여러 스레드가 작업)
innodb_parallel_read_threads 

SET SESSION innodb_parallel_read_threads=4; 
SELECT COUNT(*) FROM salaries;
-> 아무런 WHERE 조건 없이 단순히 테이블의 전체 건수를 가져오는 쿼리만 병렬로 처리할 수 있다.

ORDER BY 처리(Using filesort)
1. 인덱스 이용
장 - INSERT, UPDATE, DELETE 쿼리가 실행될 때 이미 인덱스가 정렬돼 있어서 순서대로 읽기만 하면 되므로 매우 빠르다.
단 - INSERT, UPDATE, DELETE 작업 시 부가적인 인덱스 추가/삭제 작업이 필요하므로 느리다.
 인덱스 때문에 디스크 공간이 더 많이 필요하다. 인덱스의 개수가 늘어날수록 InnoDB의 버퍼 풀을 위한 메모리가 많이 필요하다.
2. Filesort 이용
장 - 인덱스를 생성하지 않아도 되므로 인덱스르 이용할 때의 단점이 장점으로 바뀐다.
 정렬해야 할 레코드가 많지 않으면 메모리에서 Filesort가 처리되므로 충분히 빠르다.
단 - 정렬 작업이 쿼리 실행 시 처리되므로 레코드 대상 건수가 많아질수록 쿼리의 응답 속도가 느리다.

레코드의 정렬을 위해 항상 Filesort를 해야 하는 것은 아니며, 인덱스의 정렬로 인해 처리가 가능하다.
하지만 여러가지의 이유로 모든 정렬이 인덱스를 이용하도록 튜닝하기란 거의 불가능하다.

Mysql 서버에서 인덱스를 이용하지 않고 별도의 정렬 처리를 수행했는지는 실행 계획의 Extra 컬럼 Using filesort 메시지가 표시되는지 여부로 판단가능하다.
정렬 특성을 이해하면 쿼리를 튜닝할 때 어떻게 하면 조금이라도 더 빠른 쿼리가 될지 쉽게 판단할 수 있을 것이다.

소트 퍼버
Mysql은 정렬을 수행하기 위해 별도의 메모리 공간인 소트 버퍼(Sort buffer)를 할당 받아 사용한다.
소트버퍼는 정렬이 필요한 경우에만 할당되며, 버퍼의 크기는 정렬해야 할 레코드의 크기에 따라 가변적으로 증가하지만 최대 사용 가능한 소트 버퍼의 공간은
sort_buffer_size라는 시스템 변수로 설정할 수 있다. 소트 버퍼를 위한 메모리 공간은 쿼리의 실행이 완료되면 즉시 시스템으로 반납된다.

정렬해야 할 레코드의 건수가 소트 버퍼로 할당된 공간보다 크다면? 정렬해야 할 레코드를 여러 조각으로 나눠서 처리하며, 이 과정에서 임시 저장을 위해 디스크를 사용한다.
정렬된 레코드를 다시 병합하면서 정렬을 수행한다. 이 병합 작업을 멀티 머지라고 표현하며, 수행된 멀티 머지 횟수는 Sort_merge_passes라는 상태 변수에 누적해서 집계된다.
이 작업들은 모두 디스크의 읽기/쓰기를 유발하며, 레코드 건수의 증가와 비례한다.

소트 버퍼의 크기는 실제 벤치마크결과 큰 차이가 없었으며, 개인용 PC에서의는 256KB, 8MB사이에서 최적의 성능을 보였다. (그림 p290)

일반적인 트랜잭션 처리용 Mysql 서버의 소트 버퍼 크기는 56KB, 1MB미만이 적절해 보인다.
정렬을 위해 할당하는 소트 버퍼는 세션 메모리 영역에 해당하며, 소픝 버퍼는 여러 클라이언트가 공유해서 사용할 수 있는 영역이 아니니, 커넥션이 많으면 많을수록
정렬 작업이 많으면 많을수록 소트 버퍼로 소비되는 메모리 공간이 커짐을 의미한다.
과한 크기설정과 여러 커넥션에서의 동시 실행으로 메모리가 부족할 경우 OOM-Killer가 여유 메모리 확보를 위해 프로세스를 강제로 종료하게 된다.
그런데 OOM-Killer는 메모리를 가장 많이 사용하는 프로세스를 강제 종료하기 때문에 일반적으로 Mysql서버가 강제 종료 1순위가 된다.

정렬 알고리즘
레코드를 정렬할 때 레코드 전체를 소트 버퍼에 담을지 또는 정렬 기준 칼럼만 소트 버퍼에 담을지에 따라 '싱글 패스'와 '투 패스' 2가지 정렬 모드로 나눌 수 있다
정렬을 수행하는 쿼리가 어떤 정렬 모드를 사용하는지는 옵티마이저 트레이스 기능으로 확인할 수 있다.

// 옵티마이저 트레이스 활성화
SET OPTIMIZER_TRACE="enabled=on",END_MARKERS_IN_JSON=on;
SET OPTIMIZER_TRACE_MAX_MEM_SIZE=1000000;

// 쿼리 실행
SELECT * FROM employees ORDER BY last_name LIMIT 100000,1;

// 트레이스 내용 확인
SELECT * FROM INFORMATION_SCHEMA.OPTIMIZER_TRACE \G;

출력 결과
filesort_summary - sort_algorithm : 정렬 알고리즘 표시 "std::stable_sort" // 실제 정렬을 수행할 때 사용한 라이브러리 함수 이름
                 - sort_mode : "<fixed_sort_key, packed_additional_fields>"
Mysql 서버 정렬 방식
1. <sort_key, rowid > : 정렬 키와 레코드의 로우 아이디만 가져와서 정렬하는 방식
2. <sort_key, additiona_fields> : 정렬 키와 레코드 전체를 가져와서 정렬하는 방식으로, 레코드의 칼럼들은 고정 사이즈로 메모리 저장
3. <sort_key, packed_additional_fields > : 정렬 키와 레코드 전체를 가져와서 정렬하는 방식으로, 레코드의 칼럼들은 가변 사이즈로 메모리 저장

1을 투 패스 정렬 방식, 2,3을 싱글 패스 정렬 방식이라 명명 (책에서)
3은 Mysql 5.7부터 도입 ( 정렬을 위한 메모리 공간의 효율적인 사용을 위해서 추가로 도입된 방식이다. )

싱글 패스 정렬 방식
소트 버퍼에 정렬 기준 칼럼을 포함해 SELECT 대사잉 되는 칼럼 전부를 담아서 정렬을 수행하는 정렬 방식이다. (그림 p293)

투 패스 정렬 방식
정렬 대상 칼럼과 프라이머리 키 값만 소트 버퍼에 담아서 정렬을 수행하고, 정렬된 순서대로 다시 프라이머리 키로 테이블을 읽어서 SELECT할 칼럼을 가져오는 정렬 방식으로,
싱글 패스 정렬 방식이 도입되기 이전부터 사용하던 방식이다. 하지만 Mysql 8.0에서도 여전히 특정 조건에서는 투 패스 정렬 방식을 사용한다. (그림 p294)

예전 정렬 방식인 투 패스 방식은 테이블을 두번 읽어야 하기 때문에 상당히 불합리하지만, 새로운 정렬 방식인 싱글 패스는 이러한 불합리가 없다.
하지만 싱글 패스 정렬 방식은 더 많은 소트 버퍼 공간이 필요하다. 즉 대략 128KB의 정렬 버퍼를 사용한다면 이 쿼리는 투 패스 정렬ㄹ 방식에서는 대략 7,000건의
레코드를 정렬할 수 있지만 싱글 패스 정렬 방식에서는 그것의 반 정도밖에 정렬할 수 없다. 물론 이것은 소트 버퍼 공간의 크기와 레코드의 크기에 의존적이다.

최신 버전에서는 일반적으로 싱글 패스 정렬 방식을 주로 사용한다. 하지만 최신 버전의 Mysql 서버라고 해서 항상 싱글 패스 정렬 방식을 사용하는 것은 아니다.
1. 레코드의 크기가 max_length_for_sort_data 시스템 변수에 설정된 값보다 클 때
2. BLOB이나 TEXT 타입의 칼럼이 SELECT 대상에 포함할 때
위의 경우 투 패스 정렬 방식을 사용한다.

싱글 패스 방식은 정렬 대상 레코드의 크기나 건수가 작은 경우 빠른 성능을 보이며, 
투 패스 방식은 정렬 대상 레코드의 크기나 건수가 상당히 많은 경우 효율적이라고 볼 수 있다.

* 정렬이 필요한 SELECT는 불필요한 칼럼을 SELECT하지 않게 쿼리를 작성하는 것이 효율적이다 ( *의 사용 )

정렬 처리 방법
쿼리에 ORDER BY가 사용될 경우 (아래로 갈수록 처리 속도가 더 떨어짐)
- 인덱스를 사용한 정렬                               별도 표기 없음
- 조인에서 드라이빙 테이블만 정렬                     Using filesort 메시지 표시
- 조인에서 조인 결과를 임시 테이블로 저장 후 정렬      Using temporary; Using filesort 메시지 표시
인덱스를 이용할 경우 Filesort 과정 없이 인덱스를 순서대로 읽어서 결과를 반환.
사용 할 수 없을 경우 where 조건에 일치하는 레코드를 검색해 정렬 버퍼에 저장하면서 정렬을 처리할 것이다.
이때 옵티마이저는 정렬 대상 레코드를 최소화하기 위해 2가지 방법 중 하나를 선택한다. (1의 방법이 더 효율적)
1. 조인의 드라이빙 테이블만 정렬한 다음 조인을 수행
2. 조인이 끝나고 일치하는 레코드를 모두 가져온 후 정렬을 수행

인덱스를 이용한 정렬            *드라이빙 테이블 : 결합하기 위해 기준이 되는 테이블(outer테이블) index가 올라감
인덱스를 이용한 정렬을 위해서는 반드시 ORDER BY에 명시된 칼럼이 제일 먼저 읽는 테이블(조인이 사용된 경우 드라이빙 테이블)에 속하고, ORDER BY의
순서대로 생성된 인덱스가 있어야 한다.* 또한 WHERE절에 첫 번째로 읽는 테이블의 칼럼에 대한 조건이 있다면 그 조건과 ORDER BY는 같은 인덱스를 사용할 수 있어야 한다.*
그리고 B-Tree 계열의 인덱스가 아닌 해시 인덱스나 전문 검색 인덱스 등에서는 인덱스를 이용한 정렬을 사용할 수 없다. 예외적으로 R-Tree도 B-Tree 계열이지만,
특성상 이 방식을 사용할 수 없다. 여러 테이블이 조인되는 경우에는 Nested-loop 방식의 조인에서만 이 방식을 사용할 수 있다. 

인덱스를 이용해 정렬이 처리되는 경우에는 실제 인덱스의 값이 정렬돼 있기 때문에 인덱스의 순서대로 읽기만 하면 된다. 실제로 Mysql
엔진에서 별도의 정렬을 위한 추가 작업을 수행하지는 않는다. (그림 p296)

인덱스로 정렬이 처리될 때는 ORDER BY가 쿼리에 명시된다고 해서 작업량이 더 늘지는 않는다. 
하지만, 어떠한 이유로 쿼리의 실행 계획이 조금 변경 될 수 있으니 예외 상황에서 버그로 연결되지 않기 위해 ORDER BY 절을 명시해두는 것이 좋다

인덱스를 사용한 정렬이 가능한 이유는 B-Tree 인덱스가 키 값으로 정렬돼 있기 때문이다. 또한 조인이 Nested-loop 방식으로 실행되기 때문에 
조인 때문에 드라이빙 테이블의 인덱스 읽기 순서가 흐트러지지 않는다. 하지만 조인이 사용된 쿼리의 실행 계획에 조인 버퍼*가 사용되면 순서가
흐트러질 수 있기 때문에 주의해야 한다.

조인의 드라이빙 테이블만 정렬
일반적으로 조인이 수행되면 결과 레코드의 건수가 몇 배롤 불어나고, 레코드 하나하나의 크기도 늘어난다. 그래서 조인을 실행하기 전에 첫 번째 테이블의
레코드를 먼저 정렬한 다음 조인을 실행하는 것이 정렬의 차선책이 될 것이다. 이 방법으로 정렬이 처리되려면 조인에서 첫 번째로 읽히는 테이블(드라이빙 테이블)의
칼럼만으로 ORDER BY 절을 작성해야 한다.
예제)
SELECT * 
  FROM employees e, salaries s
 WHERE s.emp_no = e.emp_no
   AND e.emp_no BETWEEN 100002 AND 100010
 ORDER BY e.last_name;
 
2가지 조건을 갖추고 있기 때문에 옵티마이저는 employees 테이블을 드라이빙 테이블로 선택한다.
1) WHERE 절의 검색 조건 (BETWEEN ...)은 employees 테이블의 프라이머리 키를 이용해 검색하면 작업량을 줄일 수 있다.
2) 드리븐 테이블(salaries)의 조인 칼럼인 emp_no 칼럼에 인덱스가 있다.

검색은 인덱스 레인지 스캔으로 처리할 수 있지만 ORDER BY 절에 명시된 칼럼은 employees 테이블의 프라이머리 키와 전혀 연관이 없으므로 인덱스를 이용한 정렬은 불가능하다.
그런데 ORDER BY 절의 정렬 기준 칼럼이 드라이빙 테이블에 포함된 칼럼임을 알 수 있다. 옵티마이저는 드라이빙 테이블만 검색해서 정렬을 먼저 수행하고, 
그 결과와 salaries 테이블을 조인한 것이다. (그림 p298)

임시 테이블을 이용한 정렬
쿼리가여러테이블을 조인하지않고, 하나의 테이블로부터 SELECT해서 정렬하는 경우라면 임시 테이블이 필요하지 않다. 하지만 2개 이상의 테이블을 조인해서 그 결과를 정렬해야
한다면 임시 테이블이 필요할 수도 있다. 앞에서 살펴본 "조인의 드라이빙 테이블만 정렬"은 2개 이상의 테이블이 조인되면서 정렬이 실행되지만 임시 테이블을 사용하지 않는다.
하지만 그 외 패턴의 쿼리에서는 항상 조인의 결과를 임시 테이블에 저장하고, 그 결과를 다시 정렬하는 과정을 거친다. 이 방법은 정렬의 3가지 방법 가운데 정렬해야 할 
레코드 건수가 가장 많기 때문에 가장 느린 정렬 방법이다.
예제)
SELECT * 
  FROM employees e, salaries s
 WHERE s.emp_no = e.emp_no
   AND e.emp_no BETWEEN 100002 AND 100010
 ORDER BY s.salary;
 
이번 쿼리에서는 ORDER BY 절의 정렬 기준 칼럼이 드라이빙 테이블이 아니라 드리븐 테이블에 있는 칼럼이다 .즉 정렬이 수행되기 전에 salaries 테이블을 읽어야 하므로
이 쿼리는 조인된 데이터를 가지고 정렬할 수밖에 없다.
explain의 Extra를 보면 Using temporary; Using filesort 라는 코멘트가 표시된다.
이는 조인의 결과를 임시 테이블에 저장하고, 그 결과를 다시 정렬 처리했음을 의미한다. (그림 p300)

정렬 처리 방법의 성능 비교
주로 웹 서비스용 쿼리에서는 ORDER BY와 함께 LIMIT이 거의 필수로 사용되는 경향이 있다. 일반적으로 LIMIT은 테이블이나 처리 결과의 일부만 가져오기 때문에 Mysql 서버가
처리해야 할 작업량을 줄이는 역할을 한다. 그런데 ORDER BY나 GROUP BY 같은 작업은 WHERE 조건을 만족하는 레코드를 LIMIT 건수만큼만 가져와서는 처리할 수 없다.
우선 조건을 만족하는 레코드를 모두 가져와서 정렬을 수행하거나 그루핑 작업을 실행해야만 비로소 LIMIT으로 건수를 제한할 수 있다.

스트리밍 방식
서버 쪽에서 처리할 데이터가 얼마인지에 관계없이 조건에 일치하는 레코드가 검색될 때마다 바로바로 클라이언트로 전송해주는 방식을 의미한다. 이 방식으로 쿼리를 처리할 경우
클라이언트는 쿼리를 요청하고 곧바로 원했던 첫 번째 레코드를 전달받는다. 마지막 레코드는 언제 받을지 알 수 없다.
즉시 전달 받은 레코드를 동시에 데이터의 가공 작업을 시작할 수 있다. 웹 서비스 같은 OLTP 환경에서는 쿼리의 요청에서부터 첫 번째 레코드를 전달받게 되기까지의 
응답 시간이 중요하다. 스트리밍 방식의 쿼리 처리는 조회의 양과 상관없이 빠른 응답 시간을 보장해준다.
또한 스트리밍 방식으로 처리되는 쿼리에서 LIMIT처럼 결과 건수를 제한하는 조건들은 쿼리의 전체 실행 시간을 상당히 줄여줄 수 있다. 

버퍼링 방식
ORDER BY나 GROUP BY 같은 처리는 쿼리의 결과가 스트리밍 되는 것을 불가능하게 한다. 조건에 맞는 레코드를 모두 가져온 후 정렬하거나 그루핑해서 차례대로 보내야하기 때문이다.

버퍼링 방식으로 처리되는 쿼리는 먼저 결과를 모아서 Mysql 서버에서 일괄 가공해야 하므로 모든 결과를 스토리지 엔진으로부터 가져올 때까지 기다려야 한다. 그래서 버퍼링 방식으로
처리되는 쿼리는 LIMIT처럼 결과 건수를 제한하는 조건이 있어도 성능 향상에 별로 도움이 되지 않는다. 네트워크로 전송되는 레코드의 건수를 중리 수는 있지만 Mysql 서버가 
해야 하는 작업량에는 그다지 변화가 없기 때문이다. (그림 p302)

스트리밍 처리는 어떤 클라이언트 도구나 API를 사용하느냐에 따라 그 방식에 차이가 있을 수도 있다. JDBC는 Mysql 서버로부터 받는 레코드를 일단 내부 버퍼에 모두 담아둔다.
그리고 마지막 레코드가 전달될 때까지 기다렸다가 모든 결과를 전달받으면 그때서야 비로소 클라이언트의 애플리케이션에 반환한다. 
JDBC 라이브러리가 자체적으로 레코드를 버퍼링하는 이유는 이 방식이 전체 처리 시간이 짧고 Mysql 서버와의 통신 횟수가 적어 자원 소모가 줄어들기 때문이다.
이 방식은 JDBC 라이브러리와 Mysql 서버가 대화형으로 데이터를 주고받는 것이 아니라 Mysql 서버는 데이터의 크기에 관계없이 무조건 보내고, JDBC Mysql 서버로부터 전송되는
데이터를 받아서 저장만 하므로 불필요한 네트워크 요청이 최소화되기 때문에 전체 처리량이 뛰어나다.
이 방식은 JDBC의 기본 작동 방식이며, 아주 대량의 데이터를 가져와야 할 때는 스트리밍 방식으로 변경할 수 있다.

예제)
SELECT *
 FROM tb_test1 t1, tb_test2 t2
WHERE t1.col1=t2.col1
ORDER BY t1.col2
LIMIT 10;
전제 - tb_test1 테이블의 레코드가 100건이고, tb_test2 테이블의 레코드가 1,000건(tb_test1의 레코드 1건 당 tb_test2의 레코드가 10건씩 존재한다고 가정)이며, 두 테이블의
조인 결과는 전체 1,000건이라고 가정

tb_test1이 드라이빙 되는 경우
정렬 방법                      읽어야 할 건수                          조인 횟수               정렬해야 할 대상 건수
인덱스 사용                    tb_test1: 1건 / tb_test2: 10건           1번                        0건
조인의 드라이빙 테이블만 정렬   tb_test1: 100건 / tb_test2: 10건         1번                       100건(tb_test1 만큼)
임시테이블 사용 후 정렬         tb_test1: 100건 / tb_test2: 1000건       100번(tb_test1 만큼)     1000건(조인된 결과 레코드 건수 전부 정렬)

tb_test2이 드라이빙 되는 경우
정렬 방법                      읽어야 할 건수                          조인 횟수               정렬해야 할 대상 건수
인덱스 사용                    tb_test1: 10건 / tb_test2: 10건           10번                        0건
조인의 드라이빙 테이블만 정렬   tb_test1: 10건 / tb_test2: 1000건         10번                       1000건(tb_test2 만큼)
임시테이블 사용 후 정렬         tb_test1: 100건 / tb_test2: 1000건       1000번(tb_test2 만큼)     1000건(조인된 결과 레코드 건수 전부 정렬)

* 어느 테이블이 먼저 드라이빙되어 조인되는지도 중요하지만 어떤 정렬 방식으로 처리되는지는 더 큰 성능 차이는 만든다. 가능하다면 인덱스를 사용한 정렬로 유도하고, 
그렇지 못하다면 최소한 드라이빙 테이블만 정렬해도 되는 수준으로 유도하는 것도 좋은 튜닝 방법이라고 할 수 있다.

정렬 관련 상태 변수
Sort_merge_passes - 멀티 머지 처리 횟수 ( 단위 정렬 작업 )
Sort_range        - 인덱스 레인지 스캔을 통해 검색된 결과에 대한 정렬 작업 횟수
Sort_rows         - 지금까지 정렬한 전체 레코드 건수
Sort_scan         - 풀 테이블 스캔을 통해 검색된 결과에 대한 정렬 작업 횟수

GROUP BY 처리
GROUP BY 또한 ORDER BY와 같이 쿼리가 스트리밍된 처리를 할 수 없게 하는 처리 중 하나이며, GROUP BY에 사용된 조건은 인덱스를 사용해서 처리될 수 없으므로
HAVING 절을 튜닝하려고 인덱스를 생성하거나 다른 방법을 고민할 필요는 없다. 

GROUP BY 작업도 인덱스를 이용할 때는 인덱스를 차례대로 읽는 인덱스 스캔 방법과 인덱스를 건너뛰면서 읽는 루스 인덱스 스캔으로 나뉜다.
그리고 인덱스를 사용하지 못하는 쿼리에서 GROUP BY 작업은 임시 테이블을 사용한다.

인덱스 스캔을 이용하는 GROUP BY(타이트 인덱스 스캔)
ORDER BY의 경우와 마찬가지로 조인의 드라이빙 테이블에 속한 칼럼만 이용해 그루핑할 때 GROUP BY 칼럼으로 이미 인덱스가 있다면 그 인덱스를 차례때로 읽으면서
그루핑 작업을 수행하고 그 결과로 조인을 처리한다. 인덱스를 사용해서 처리된다 하더라도 그룹 함수 등의 그룹값을 처리해야 해서 임시 테이블이 필요할 때도 있다.
이러한(인덱스 스캔) 그루핑 방식을 사용하는 쿼리의 실행 계획에서는 Extra 칼럼에 별도로 GROUP BY 관련 코멘트나 임시 테이블 사용 또는 정렬 관련 코멘트가
표시되지 않는다.

루스 인덱스 스캔을 이용하는 GROUP BY
루스 인덱스 스캔 방식은 인덱스의 레코드를 건너뛰면서 필요한 부분만 읽어서 가져오는 것을 의미하는데, 옵티마이저가 루스 인덱스 스캔을 사용할 때는 실행 계획의
Extra 칼럼에 Using index for group-by가 표시된다. (p306 예제 참조)
Mysql의 루스 인덱스 스캔 방식은 단일 테이블에 대해 수행되는 GROUP BY 처리에만 사용할 수 있다. 또한 프리픽스 인덱스는 루스 인덱스 스캔을 사용할 수 없다.
인덱스 레인지 스캔에서는 유니크한 값의 수가 많을수록 성능이 향상되는 반면 루스 인덱스 스캔에서는 인덱스의 유니크한 값의 수가 적을수록 성능이 향상된다.
즉 루스 인덱스 스캔은 분포도가 좋지 않은 인덱스일수록 더 빠른 결과를 만들어 낸다. 또한 이로 처리되는 쿼리에서는 별도의 임시 테이블이 필요하지 않다.

루스 인덱스 스캔을 사용할 수 없는 쿼리 패턴 
index (col1, col2, col3)
SELECT col1, SUM(col2) FROM tb_test GROUP BY col1;
-- MIN()과 MAX() 이외의 집합 함수가 사용됐기 때문에 사용불가

SELECT col1, col2 FROM tb_test GROUP BY col2, col3;
-- GROUP BY에 사용된 칼럼이 인덱스 구성 칼럼의 왼쪽부터 일치하지 않기 때문에 사용불가

SELECT col1, col3 FROM tb_test GROUP BY col1, col2;
-- SELECT 절의 칼럼이 GROUP BY와 일치하지 않기 때문에 사용불가

임시 테이블을 사용하는 GROUP BY
GROUP BY의 기준 칼럼이 드라이빙 테이블에 있든 드리븐 테이블에 있든 관계없이 인덱스를 전혀 사용하지 못할 때는 이 방식으로 처리된다. 
해당 쿼리들의 실행계획에는 Extra 칼럼에 Using temporary 메시지가 표시된다. 이 실행 계획에서 임시 테이블이 사용된 것은 employees 테이블을 풀 스캔하기 때문이 아니라
인덱스를 전혀 사용할 수 없는 GROUP BY이기 때문이다. 중요한 것은 Using firesort는 표시되지 않았다는 것이다. 
8.0전까지는 GROUP BY가 사용된 쿼리는 그루핑되는 칼럼을 기준으로 묵시적인 정렬까지 함께 수행됐다.
하지만 8.0부터는 이 같은 묵시적인 정렬을 더 이상 실행되지 않게 바뀌었다.

Mysql 8.0에서는 GROUP BY가 필요한 경우 내부적으로 GROUP BY 절의 칼럼들로 구성된 유니크 인덱스를 가진 임시 테이블을 만들어서 중복 제거와 집합 함수 연산을 수행한다.
하지만 8.0에서도 GROUP BY 와 ORDER BY가 같이 사용되면 명시적으로 정렬 작업을 실행한다. ( Using firesort 추가 )

* 5.7까지는 GROUP BY가 사용되면 자동으로 그루핑 칼럼을 기준으로 정렬이 수행되는데 이때 ORDER BY NULL을 사용 시 크진 않지만 성능 향상을 볼 수 있다.

DISTINCT 처리

SELECT DISTINCT ... 
이 경우 GROUP BY와 동일한 방식으로 처리된다. 특히 8.0이후부터는 GROUP BY 쿼리에 ORDER BY가 없으면 정렬을 사용하지 않기 떄문에 내부적으로 같은 작업을 수행한다.
DISTINCT 키워드는 조회되는 모든 칼럼에 영향을 미친다
SELECT DISTINCT(first_name), last_name FROM employees; 
-> 보이기엔 first_name만 영향이 있어보이지만 last_name에도 영향이 미친다.

집합 함수와 함께 사용된 DISTINCT
COUNT() 또는 MIN(), MAX() 같은 집합 함수 내에서 DISTINCT 키워드가 사용될 수 있는데 ,이 경우에는 일반적으로 SELECT DISTINCT와 다른 형태로 해석된다.
집합 함수가 없는 SELECT 쿼리에서 DISTINCT는 조회 하는 모든 칼럼의 조합이 유니크한 것들만 가져온다. 하지만 집함 함수 내에서 사용된 DISTINCT는 그 집합 함수의 인자로 
전달된 칼럼 값이 유니크한 것들을 가져온다.
ex)
EXPLAIN SELECT COUNT(DISTINCT s.salary)
          FROM employees e, salaries s
         WHERE e.emp_no=s.emp_no
           AND e.emp_no BETWEEN 100001 AND 100100;
이 쿼리는 내부적으로 COUNT(DISTINCT s.salary)를 처리하기 위해 임시 테이블을 사용한다. 하지만 extra엔 Using temporary를 표시하지 않고 있다. 
-> 이때 임시 테이블의 salary 칼럼에는 유니크 인덱스가 생성되기 때문에 레코드 건수가 많아진다면 상당히 느려질 수 있는 형태의 쿼리이다.

ex)
SELECT COUNT(DISTINCT emp_no) FROM dept_emp GROUP BY dept_no;
위의 경우 인덱스된 칼럼에 대해 DISTINCT 처리를 수행할 때는 인덱스를 풀 스캔하거나 레인지 스캔하면서 임시 테이블 없이 최적화된 처리를 수행할 수 있다.

내부 임시 테이블 
Mysql 엔진이 스토리지 엔진으로부터 받아온 레코드를 정렬하거나 그루핑할 때는 내부적인 임시 테이블을 사용한다 내부적이라는 단어가 포함된 이유는
여기서 이야기하는 임시 테이블은 "CREATE TEMPORARY TABLE" 명령으로 만든 임시 테이블과는 다르기 때문이다.
일반적으로 Mysql 엔진이 사용하는 임시 테이블은 처음에는 메모리에 생성됐다가 테이블의 크기가 커지면 디스크로 옮겨진다 물론 특정 예외 케이스에서는 메모리를 거치지
않고 바로 디스크에 임시 테이블이 만들어지기도 한다.
Mysql 엔진이 내부적인 가공을 위해 생성하는 임시 테이블은 다른 세션이나 다른 쿼리에서는 볼 수 없으며 사용하는 것도 불가능하다. 사용자가 생성한 임시 테이블과는
달리 내부적인 임시 테이블은 쿼리의 처리가 완료되면 자동으로 삭제된다.

메모리 임시 테이블과 디스크 임시 테이블
8.0 이전 버전까지는 원본 테이블의 스토리지 엔진과 관계없이 임시 테이블이 메모리를 사용할 때는 MEMORY 스토리지 엔진을 사용하며, 
디스크에 저장될 때는 MyISAM 스토리지 엔진을 이용한다. 하지만 8.0 부터는 메모리는 TempTable이라는 스토리지 엔진을 사용하고, 디스크에 저장되는 임시 테이블을 
InnoDB 스토리지 엔진을 사용하도록 개선됐다.

기존 MEMORY 스토리지 엔진은 VARBINARY나 VARCHAR 같은 가변 길이 타입을 지원하지 못하기 때문에 임시 테이블이 메모리에 만들어지면 가변 길이 타입의 경우
최대 길이만큼 메모리를 할당해서 사용했다. 이는 메모리 낭비가 심했고, MyISAM 스토리지 엔진은 트랜잭션을 지원하지 못했다. 
그로인해 가변 길이 타입을 지원하는 TempTable, 트랜잭션 지원 가능한 InnoDB 스토리지 엔진이 사용되도록 개선된 것이다.

8.0부터는 internal_tmp_mem_storage_engine 시스템 변수를 이용해 메모리용 임시 테이블을 MEMORY와 TempTable 중에서 선택할 수 있고, 기본값은 TempTable이다.
그리고 TempTable이 최대 사용 가능 메모리 크기는 temptable_max_ram으로 제어할 수 있고, 기본값은 1GB이다. 임시 테이블의 크기가 1GB보다 커지는 경우
Mysql 서버는 이를 디스크로 기록하게 되는데, 2가지 중 하나를 선택한다. 
1) MMAP 파일로 디스크에 기록
2) InnoDB 테이블로 기록

MMAP파일로 기록할지 InnoDB 테이블로 전환할지는 temptable_user_mmap으로 설정할 수 있고 기본값은 ON(MMAP파일 전환)이다. 
메모리의 TempTable을 MMAP 파일로 전환하는 것은 InnoDB 테이블로 전환하는 것보다 오버헤드가 적기 때문에 기본값이 ON으로 선택된 것이다. 
이때 디스크에 생성되는 임시 테이블은 tmpdir 시스템 변수에 정의된 디렉터리에 저장된다. 
(디스크의 임시테이블 생성과 검색 관련 주의 p315)

내부 임시 테이블이 메모리에 생성되지 않고 처음부터 디스크 테이블로 생성되는 경우도 있다. 이 경우에는 internal_tmp_disk_storage_engine 시스템 변수에 설정된
스토리지 엔진이 사용된다. 기본값은 InnoDB이다. 

임시 테이블이 필요한 쿼리
다음과 같은 패턴의 쿼리는 Mysql 엔진에서 별도의 데이터 가공 작업을 필요로 하므로 대표적으로 내부 임시 테이블을 생성하는 케이스다. 
물론 이 밖에도 인덱스를 사용하지 못할 때는 내부 임시 테이블을 생성해야 할 때가 많다.
- ORDER BY와 GROUP BY에 명시된 칼럼이 다른 쿼리
- ORDER BY나 GROUP BY에 명시된 칼럼이 조인의 순서상 첫 번째 테이블이 아닌 쿼리
- DISTINCT와 ORDER BY가 동시에 쿼리에 존재하는 경우 또는 DISTINCT가 인덱스로 처리되지 못하는 쿼리
- UNION이나 UNION DISTINCT가 사용된 쿼리(select_type 칼럼이 UNION RESULT인 경우)
- 쿼리의 실행 계획에서 select_type이 DERIVED인 쿼리

Using temporary가 표시되지 않을 때도 임시 테이블을 사용할 수 있는데, 위의 예에서 마지막 3개 패턴이 그러한 예다.
첫 번째 부터 네 번째까지의 쿼리 패턴은 유니크 인덱스를 가지는 내부 임시 테이블이 만들어진다. 그리고 마지막 쿼리 패턴은 유니크 인덱스가 없는 내부 임시 테이블이 생성된다.
일반적으로 유니크 인덱스가 있는 내부 임시 테이블은 그렇지 않은 쿼리보다 처리 성능이 상당히 느리다.

8.0전까지는 UNION ALL이 사용된 쿼리도 항상 내부 임시 테이블을 사용해서 결과를 모은 후결과를 반환했지만, 8.0부터는 UNION ALL을 사용하는 쿼리는 더 이상
임시 테이블을 사용하지 않게 개선됐다.

임시 테이블일 디스크에 생성되는 경우
내부 임시 테이블은 기본적으로는 메모리상에 만들어지지만 다음과 같은 조건을 만족하면 메모리 임시 테이블을 사용할 수 없게 된다. 그래서 디스크 기반 임시 테이블을 사용한다.
- UNION이나 UNION ALL에서 SELECT되는 칼럼 중에서 길이가 512바이트 이상인 크기의 칼럼이 있는 경우
- GROUP BY나 DISTINCT 칼럼에서 512바이트 이상인 크기의 칼럼이 있는 경우
- 메모리 임시 테이블의 크기가(MEMORY 스토리지 엔진에서) tmp_table_size 또는 max_heap_table_size 시스템 변수보다 크거나 
  (TempTable 스토리지 엔진에서) temptable_max_ram 시스템 변수 값보다 큰 경우

임시 테이블 관련 상태 변수
실행 계획상에서 Using temporary가 표시되면 임시 테이블을 사용했다는 사실을 알 수 있다. 하지만 메모리나 디스크에서 처리됐는지, 몇 개의 임시 테이블이 사용됐는지는
알 수 없다. 이 때는 SHOW SESSION STATUS LIKE 'Created_tmp%'; 를 확인하면 된다.
- Created_tmp_tables : 쿼리의 처리를 위해 만들어진 내부 임시 테이블의 개수를 누적하는 상태 값이다. 이 값은 내부 임시 테이블이 메모리, 디스크에 만들어졌는지
  구분하지 않고 모두 누적한다.
- Created_tmp_disk_tables : 디스크에 내부 임시 테이블이 만들어진 개수만 누적해서 가지고 있는 상태 값이다.

고급 최적화
Mysql 서버의 옵티마이저가 실행 계획을 수립할 때 통계 정보와 옵티마이저 옵션을 결합해서 최적의 실행 계획을 수립하게 된다.
옵티마이저 옵션은 크게 조인 관련된 옵티마이저 옵션과 옵티마이저 스위치로 구분할 수 있다. 
조인 관련된 옵티마이저 옵션은 Mysql 서버 초기 버전부터 제공되던 옵션이지만, 많은 사람이 그다지 신경 쓰지 않는 편이다. 하지만 조인이 많이 사용될 경우 알아야 한다.
옵티마이저 스위치는 Mysql 5.5 버전부터 지원되기 시작했는데, 이들은 Mysql 서버의 고급 최적화 기능들을 활성화할지를 제어하는 용도로 사용된다.

옵티마이저 스위치 옵션
optimizer_switch 시스템 변수에 여러 개의 옵션을 세트로 묶어서 설정하는 방식으로 사용한다.
옵티마이저 스위치 이름                   기본값   설명
batched_key_access                      off     BKA 조인 알고리즘을 사용할지 여부 설정
block_nested_loop                       on      Block Nested Loop 조인 알고리즘을 사용할지 여부 설정
engine_condition_pushdown               on      Engine Condition Pushdown 기능을 사용할지 여부 설정
index_condition_pushdown                on      Index Condition Pushdown 기능을 사용할지 여부 설정
use_index_extensions                    on      Index Extension 최적화를 사용할지 여부 설정
index_merge                             on      Index Merge 최적화를 사용할지 여부 설정
index_merge_intersection                on      Index Merge Intersection 최적화를 사용할지 여부 설정
index_merge_sort_union                  on      Index Merge Sort Union 최적화를 사용할지 여부 설정
index_merge_union                       on      Index Merge Union 최적화를 사용할지 여부 설정
mrr                                     on      MRR 최적화를 사용할지 여부 설정
mrr_cost_based                          on      비용 기반의 MRR 최적화를 사용할지 여부 설정
semijoin                                on      세미 조인 최적화를 사용할지 여부 설정
firstmatch                              on      FirstMatch 세미 조인 최적화를 사용할지 여부 설정
loosescan                               on      LooseScan 세미 조인 최적화를 사용할지 여부 설정
materialization                         on      Materialization 최적화를 사용할지 여부 설정
subquery_materialization_cost_based     on      비용 기반의 Materialization 최적화를 사용할지 여부 설정

각각의 옵티마이저 스위치 옵션은 default와 on, off 중에서 하나를 설정 
설정 예제)
SET GLOBAL optimizer_switch='index_merge=on,index_merge_union=on,...'; // Mysql 서버 전체적
SET SESSION optimizer_switch='index_merge=on,index_merge_union=on,...'; // 현재 커넥션
SELECT /*+ SET_VAR(optimizer_switch='condition_fanout_filter=off') */    // 옵티마이저 힌트 - 현재 쿼리에만 설정

MRR과 배치 키 액세스
MRR(Multi-Range Read), 매뉴얼에서는 DS-MRR(Disk Sweep MRR)이라고도 한다. Mysql 서버에서 지금까지 지원하던 조인 방식은 드라이빙 테이블의 
레코드를 한 건 읽어서 드리븐 테이블의 일치하는 레코드를 찾아서 조인을 수행하는 것이다. 이를 네스티드 루프 조인이라고 한다.
Mysql 서버의 내부 구조상 조인 처리는 Mysql 엔진이 처리하지만, 실제 레코드를 검색하고 읽는 부분은 스토리지 엔진이 담당한다.
이때 드라이빙 테이블의 레코드 건별로 드리븐 테이블의 레코드를 찾으면 레코드를 찾고 읽는 스토리지 엔진에서는 아무런 최적화를 수행할 수가 없다.

이 같은 단점을 보완하기 위해 Mysql 서버는 조인 대상 테이블 중 하나로부터 레코드를 읽어서 조인 버퍼에 버퍼링한다. 
즉, 드라이빙 테이블의 레코드를 읽어서 드리븐 테이브로가의 조인을 즉시 실행하지 않고 조인 대상을 버퍼링하는 것이다. 조인 버퍼에 레코드가 
가득 차면 비로소 Mysql 엔진은 버퍼링된 레코드를 스토리지 엔진으로 한 번에 요청한다. 이렇게 함으로써 스토리지 엔진은 읽어야 할 레코드들을 
데이터 페이지에 정렬된 순서로 접근해서 디스크의 데이터 페이지 읽기는 최소화할 수 있는 것이다. 물론 데이터 페이지가 메모리(InnoDB 버퍼 풀)에
있다고 하더라도 버퍼 풀의 접근을 최소화할 수 있는 것이다.

이러한 읽기 방식을 MRR이라고 하며, MRR을 응용해서 실행되는 조인 방식을 BKA(Batched Key Access)조인이라고 한다. BKA 조인 최적화는 기본적으로
비활성화돼 있는데, * 이는 BKA조인의 단점이 있기 때문이다. 쿼리의 특성에 따라 BKA 조인이 큰 도움이 되는 경우도 있지만, 
* BKA 조인을 사용하게 되면 부가적인 정렬 작업이 필요해지면서 오히려 성능에 안 좋은 영향을 미치는 경우도 있다. 

블록 네스티드 루프 조인
대부분 사용되는 네스티드 루프 조인은 조인의 연결 조건이 되는 칼럼에 모두 인덱스가 있는 경우 사용되는 조인 방식이다. 
아래 형태의 조인은 다음과 같이 프로그래밍 언어에서 마치 중첩된 반복 명령을 사용하는 것처럼 작동한다고 해서 네스티드 루프 조인이라고 한다.
예제) employees 테이블에서 first_name 조건에 일치하는 레코드 1건을 찾아서 salaries 테이블의 일치하는 레코드를 찾는 형태의 조인을 실행
EXPLAIN
 SELECT *
   FROM * employees e INNER JOIN salaries s 
     ON s.emp_no = e.emp_no
    AND s.from_date<=NOW()
    AND s.to_date>=NOW()
  WHERE e.first_name='Amor';
 
네스티드 루프 조인과 블록 네스티드 루프 조인의 가장 큰 차이는 조인 버퍼가 사용되는지 여부와 조인에서 드라이빙 테이블과 드리븐 테이블이 어떤 순서로
조인되느냐다. 조인 알고리즘에서 "Block"이라는 단어가 사용되면 조인용으로 별도의 버퍼가 사용됐다는 것을 의미하는데, 조인 쿼리의 실행 계획에서
Extra 칼럼에 "Using Join buffer"라는 문구가 표시되면 그 실행 계획은 조인 버퍼를 사용한다는 것을 의미한다.

조인은 드라이빙 테이블에서 일치하는 레코드의 건수만큼 드리븐 테이블을 검색하면서 처리된다. 즉 드라이빙 테이블은 한 번에 쭉 읽지만, 드리븐 테이블은
여러 번 읽는다는 것을 의미한다. 예를 들어, 드라이빙 테이블에서 일치하는 레코드가 1,000건이었는데, 드리븐 테이블의 조인 조건이 인덱스를 이용할 수 
없었다면 드리븐 테이블에서 연결되는 레코드를 찾기 위해 1,000번의 풀 테이블 스캔을 해야한다. 그래서 드리븐 테이블을 검색할 때 인덱스를 사용할 수
없는 쿼리는 상당히 느려지며, 옵티마이저는 최대한 드리븐 테이블의 검색이 인덱스를 사용할 수 있게 실행 계획을 수립한다.

그런데 어떤 방식으로도 드리븐 테이블의 풀 테이블 스캔이나 인덱스 풀 스캔을 피할 수 없다면 옵티마이저는 드라이빙 테이블에서 읽은 레코드를 메모리에
캐시한 후 드리븐 테이블과 이 메모리 캐시를 조인하는 형태로 처리한다.* 이때 사용되는 메모리의 캐시를 조인 버퍼라고 한다. 
조인 버퍼는 join_buffer_size라는 시스템 변수로 크기를 제한할 수 있으며, 조인이 완료되면 조인 버퍼는 바로 해제된다.

예제)
두 테이블이 조인되는 다음 예제 쿼리에서 각 테이블에 대한 조건은 WHERE 절에 있지만, 두 테이블 간의 조인 조건은 없다. 그래서 dept_emp 테이블에서 
from_date>'2000-01-01'인 레코드(10,616건)와 employees 테이블에서 emp_no<109004 조건을 만족하는 레코드(99,003건)는 카테시안 조인을 수행한다.
  SELECT * FROM dept_emp de, employees e WHERE de.from_date>'1995-01-01' AND e.emp_no<109004;
실행계획)
1 SIMPLE de range ix_fromdate Using index condition
1 SIMPLE e  range PRIMARY     Using join buffer (block nested loop)
de가 드라이빙 테이블, e 테이블을 읽을때 조인 버퍼를 이용 블록 네스티드 루프 조인을 한다는 것을 알 수 있다. (그림 p323)

실제 이 쿼리의 실행 계획상으로는 dept_emp 테이블이 드라이빙 테이블이 되고, employees 테이블이 드리븐 테이블이 된다. 하지만 실제 드라이빙 테이블의
결과는 조인 버퍼에 담아두고, 드리븐 테이블을 먼저 읽고 조인 버퍼에서 일치하는 레코드를 찾는 방식으로 처리된다. 
* 일반적으로 조인이 수행된 후 가져오는 결과는 드라이빙 테이블의 순서에 의해 결정되지만, 
조인 버퍼가 사용되는 조인에서는 결과의 정렬 순서가 흐트러질 수 있음을 기억해야 한다.
** 8.0.18부터 해시 조인 알고리즘 도입, 8.0.20부터 블록 네스티드 루프 조인 사용 되지 않고 해시 조인 알고리즘이 대체되어 사용 

인덱스 컨디션 푸시다운
5.6부터 인덱스 컨디션 푸시다운 기능이 도입됐다. (SET optimizer_switch='index_condition_pushdown=off')
예제) (그림 p325)
ALTER TABLE employees ADD INDEX ix_lastname_firstname (last_name, first_name);
SELECT * FROM employees WHERE last_name='Acton' AND first_name LIKE '%sal';
last_name 조건은 인덱스의 특정 범위만 조회할 수 있는 조건이며, first_name 조건은 데이터를 모두 읽은 후 하나씩 비교해보는 조건으로만 사용된다.
인덱스 컨디션 푸시다운을 off로 사용할 경우 ix_lastname_firstname 인덱스로 last_name으로 읽은 후 다시 테이블의 레코드를 first_name으로 읽는다
인덱스를 비교하는 작업은 실제 InnoDB 스토리지 엔진이 수행하지만 테이블의 레코드에서 first_name 조건을 비교하는 작업은 Mysql 엔진이 수행하는 작업이다.
그런데 Mysql 5.5 버전까지는 인덱스를 범위 제한 조건으로 사용하지 못하는 first_name 조건은 Mysql 엔진이 스토리지 엔진으로 아예 전달해주지 않았다.
그래서 스토리지 엔진에서는 불필요한 2건의 테이블 읽기를 수행할 수 밖에 없었던 것이다.
5.6부터는 이렇게 인덱스를 범위 제한 조건으로 사용하지 못한다고 하더라도 인덱스에 포함된 칼럼의 조건이 있다면 모두 같이 모아서 스토리지 엔진으로
전달할 수 있게 핸들러 API가 개선됐다. ( Extra에서 Using index condition )


인덱스 확장
use_index_extensions 옵티마이저 옵션은 InnoDB 스토리지 엔진을 사용하는 테이블에서 세컨더리 인덱스에 자동으로 추가된 프라이머리 키를 활용할 수 있게
할지를 결정하는 옵션이다.
"세컨더리 인덱스에 자동으로 추가된 프라이머리 키" 
ex) PRIMARY KEY (dept_no, emp_no), KEY ix_fromdate (from_date) 일 경우 
세컨더리 인덱스는 데이터 레코드를 찾아가기 위해 프라이머리 키인 dept_no, emp_no 칼럼을 (프라이머리 키에 명시된 순서)순서대로 포함한다. 
그래서 최종적으로 ix_fromdate 인덱스는 (from_date, dept_no, emp_no) 조합으로 인덱스를 생성한 것과 흡사하게 작동할 수 있게 된다.

인덱스 머지
인덱스를 이용해 쿼리를 실행하는 경우, 대부분 옵티마이저는 테이블별로 하나의 인덱스만 사용하도록 실행 계획을 수립한다.
하지만 인덱스 머리 실행 계획을 사용하면 하나의 테이블에 대해 2개 이상의 인덱스를 이용해 쿼리를 처리한다.
쿼리에 사용된 각각의 조건이 서로 다른 인덱스를 사용할 수 있고 그 조건을 만족하는 레코드 건수가 많을 것으로 예상될 때 인덱스 머지 실행 계획을 선택한다.
index_merge_intersection, index_merge_sort_union, index_merge_union
index_merge 위의 옵션을 한 번에 모두 제어 가능한 옵션

인덱스 머지 - 교집합
예제) EXPLAIN SELECT  * FROM employees WHERE first_name='Georgi' AND emp_no BETWEEN 10000 AND 20000;
Extra - Using intersect라고 표시된 것은 쿼리가 2개의 인덱스를 각각 검색해서 그 결과의 교집합만 반환했다는 것을 의미한다.
2개의 인덱스 중 하나라도 효율적으로 쿼리를 처리할 수 있었다면 옵티마이저는 2개를 사용하는 실행 계획을 사용하지 않았을 것이다. 
즉, 옵티마이저가 두 조건에 일치하는 레코드 건수를 예측해 본 결과 조건들 모두 상대적으로 많은 레코드를 가져와야 한다는 것을 알게 된 것이다.

인덱스 머지 실행 계획이 아니었을 경우 처리해야하는 2가지 방식
- 1번째 조건만 인덱스를 사용했다면 일치하는 레코드 253건을 검색한 다음 데이터 페이지에서 레코드를 찾고 emp_no 칼럼의 조건에 일치하는 레코드들만 반환하는 형태
- 2번째 조건만 인덱스를 사용했다면 프라이머리 키를 이용해 10,000건을 읽고 1번째 조건에 일치하는 레코드만 반환하는 형태
--> 위의 두 경우 비효율이 매우 큰 상황이어서 옵티마이저는 각 인덱스를 검색해 두 결과의 교집합만 찾아서 반환한 것이다.

그런데 ix_firstname 인덱스는 프라이머리 키인 emp_no 칼럼을 자동으로 포함하고 있기 때문에 그냥 ix_firstname 인덱스만 사용하는 것이 더 성능이 좋을 것으로
생각할 수도 있다 .그렇다면 index_merge_intersection 최적화를 비활성화하면 된다.

set [GLOBAL | SESSION] optimizer_switch='index_merge_intersection=off';

현재 쿼리에서만 비활성화 할 경우
EXPLAIN 
 SELECT /*+ SET_VAR(optimizer_switch='index_merge_intersection=off') */ * 
   FROM employees WHERE first_name='Georgi' AND emp_no BETWEEN 10000 AND 20000;

인덱스 머지 - 합집합
Using union은 where 절에 사용된 2개 이상의 조건이 각각의 인덱스를 사용하되 OR 연산자로 연결된 경우에 사용되는 최적화다.
예제) SELECT * FROM employees WHERE first_name='Matt' OR hire_date='1987-03-31'; -> Extra : Using union(ix_firstname, ix_hiredate)
이는 인덱스 머지 최적화가 ix_firstname 인덱스의 검색 결과와 ix_hiredate 인덱스 검색 겨과를 Union 알고리즘으로 병합했다는 것을 의미한다. (두 집합의 합집합)
예제에서 두 조건의 결과는 서로 중복되었을 것이지만 실제 실행 계획에서는 정렬했다는 표시는 없다. (그림 p333)
예제 쿼리를 각각의 쿼리로 분리해서 실행 계획이나 쿼리 결과를 살펴보면 인덱스 검색을 통한 두 결과 집합이 모두 프라이머리 키로 정렬돼 있다는 것을 알 수 있다.
이 때 우선순위 큐 알고리즘을 사용하여 프라이머리 키인 emp_no 칼럼의 중복 레코드를 걸러내는 것이다.
* 2개의 where 조건이 or 연산자로 연결된 경우에는 둘 중 하나롣 제대로 인덱스를 사용하지 못하면 항상 풀 테이블 스캔으로밖에 처리하지 못한다.

인덱스 머지 - 정렬 후 합집합
만약 인덱스 머지 작업을 하는 도중에 결과의 정렬이 필요한 경우 Mysql 서버는 인덱스 머지 최적화의 'Sort Union' 알고리즘을 사용한다.
예제)SELECT * FROM employees WHERE first_name='Matt' OR hire_date between'1987-03-01' and '1987-03-31';
OR 기준으로 2개의 쿼리로 나눴을때 1번째 쿼리는 pk로 정렬 되어있고, 2번째 쿼리는 pk로 정렬되어있지 않다.
즉, 중복제거를 위해 우선순위 큐를 사용할 수 없고 이에 따라 2번째 쿼리 부분을 pk로 정렬하고 중복 제거를 수행한다.
위의 예와 같이 인덱스 머지 최적화에서 중복 제거를 위해 강제로 정렬을 수행해야 하는 경우 Extra에 Using sort_union 문구가 표시된다.

세미 조인
다른 테이블과 실제 조인을 수행하지는 않고, 단지 다른 테이블에서 조건에 일치하는 레코드가 있는지 없는지만 체크하는 형태의 쿼리를 세미 조인이라고 한다.
5.7서버는 전통적으로 세미 조인 형태의 쿼리를 최적화하는 부분이 상당히 취약했다.
예제) SELECT * 
        FROM employees e
       WHERE e.emp_no IN (SELECT de.emp_no 
                            FROM dept_emp de 
                           WHERE de.from_date='1995-01-01');
       
Mysql 서버에서 세미 조인 최적화 기능이 없었을 때는 위의 세미 조인 쿼리의 실행 계획은 다음과 같았다.
일반적으로 다른 RDBMS에 익숙한 사용자였다면 dept_emp 테이블을 조회하는 서브쿼리 부분이 먼저 실행되고 그다음 employees 테이블에서 일치하는 레코드만
검색할 것으로 기대했을 것이다. 하지만 Mysql서버는 employees 테이블을 풀 스캔하면서 한 건 한 건 서브쿼리의 조건에 일치하는지 비교했다. **** 

세미 조인 형태의 쿼리와 안티 세미 조인 형태의 쿼리는 최적화 방법이 조금 차이가 있다.
1. "= (subquery)", "IN (subquery)" 세미 조인 쿼리
- 세미 조인 최적화
- IN-to-EXISTS 최적화
- MATERIALIZATION 최적화
2. "<> (subquery)", "NOT IN (subquery)" 안티 세미 조인 쿼리
- IN-to-EXISTS 최적화
- MATERIALIZATION 최적화
최근 도입된 세미 조인 최적화에 대해서만 작성한다.
8.0부터 도입된 최적화 전략으로 
- Table Pull-out : 사용 가능하면 항상 세미 조인보다는 좋은 성능을 내기 때문에 별도로 제어하는 옵티마이저 옵션을 제공하지 않는다.
- Duplicate Weed-out : materialization 옵티마이저 스위치 
- First Match : First Match 옵티마이저 옵션
- Loose Scan : Loose Scan 옵티마이저 옵션
- Materialization : materialization 옵티마이저 스위치

semijoin 옵티마이저 옵션은 firstmatch, loosescan, materialization 옵티마이저 옵션을 한 번에 활성화하거나 비활성화할 때 사용한다.

테이블 풀-아웃
Table pullout 최적화는 세미 조인의 서브쿼리에 사용된 테이블을 아우터 쿼리로 끄집어낸 후에 쿼리를 조인 쿼리로 재작성하는 형태의 최적화이다.
이는 서브쿼리 최적화가 도입되기 이전에 수동으로 쿼리를 튜닝하던 대표적인 방법이었다. 
예제) 
EXPLAIN 
 SELECT * FROM employees e
  WHERE e.emp_no IN ( SELECT de.emp_no FROM dept_emp de WHERE de.dept_no='d009');
8.0 버전에서 이 쿼리의 실행 계획은 둘다 id가 1이다. id가 동일한 값을 가진다는 것은 두 테이블이 서브쿼리 형태가 아닌 조인으로 처리됐음을 의미한다.
Table pullout 최적화는 별도로 실행 계획의 Extra 칼럼에 Using table pullout과 같은 문구가 출력되지 않는다. 
사용여부를 확인하는 방법은 실행 계획에서 해당 테이블들의 id 칼럼 값이 같은지(Extra에 아무것도 없을 경우) 확인하는 것이 가장 간단한 방법이다.
더 정확한 방법은 EXPLAIN 명령을 실행한 후 SHOW WARNINGS 명령으로 Mysql 옵티마이저가 재작성한 쿼리를 살펴보는 것이다.
Table pullout이 적용된 쿼리를 SHOW WARNINGS\G 로 확인해볼 경우 IN(subquery) 형태는 사라지고 JOIN으로 쿼리가 재작성된 것을 확인할 수 있다.

Table pullout 최적화의 몇 가지 제한 사항과 특성
- 세미 조인 서브쿼리에서만 사용 가능하다.
- 서브쿼리 부분이 UNIQUE 인덱스나 프라이머리 키 룩업으로 결과가 1건인 경우에만 사용 가능하다.
- 적용된다고 하더라고 기존 쿼리에서 가능했던 최적화 방법이 사용 불가능한 것은 아니므로 Mysql에서 가능하다면 Table pullout 최적화를 최대한 적용한다.
- 서브쿼리의 테이블을 아우터 쿼리로 가져와서 조인으로 풀어쓰는 최적화를 수행하는데, 만약 서브쿼리의 모든 테이블이 아우터 쿼리로 끄집어 낼 수 있다면
  서브쿼리 자체는 없어진다.
- Mysql에서는 "최대한 서브쿼리를 조인으로 풀어서 사용해라"라는 튜닝 가이드가 많은데, Table pullout 최적화는 사실 이 가이드를 그대로 실행하는 것이다.
  이제부터는 서브쿼리를 조인으로 풀어서 사용할 필요가 없다.

퍼스트 매치
First Match 최적화 전략은 IN(subquery) 형태의 세미 조인을 EXISTS(subquery) 형태로 튜닝한 것과 비슷한 방법으로 실행된다.
예제) 
EXPLAIN
 SELECT * 
   FROM employees e WHERE e.first_name='Matt'
    AND e.emp_no IN ( SELECT t.emp_no FROM titles t
                       WHERE t.from_date BETWEEN '1995-01-01' AND '1995-01-30');
이 쿼리의 실행계획은 id칼럼이 1로 표시되고 Extra칼럼에는 FirstMatch(e)라는 문구가 출력됐다. id칼럼이 1인것은 서브쿼리 패턴으로 실행한 것이 아닌
조인으로 처리된 것이고, FirstMatch(e) 문구는 employees 테이블의 레코드에 대해 titles 테이블에 일치하는 레코드 1건만 찾으면 더이상의 titles 테이블 검색을
하지 않는다는 것을 의미한다. 실제 의미론적으로는 EXISTS(subquery)와 동일하게 처리된 것이다. 하지만 FirstMatch 서브쿼리가 아니라 조인으로 풀어서 실행하면서
일치하는 첫번째 레코드만 검색하는 최적화를 실행한 것이다. (그림 p340)

First Match 최적화는 5.5에서 수행했던 최적화 방법인 IN-to-EXISTS변환과 거의 비슷한 처리 로직을 수행한다.

IN-to-EXISTS에 비한 FirstMatch최적화 전략의 장점
- 가끔은 여러 테이블이 조인되는 경우 원래 쿼리에는 없던 동등 조건을 옵티마이저가 자동으로 추가하는 형태의 최적화가 실행되기도 한다. 
  기존의 IN-to-EXISTS 최적화에서는 이러한 동등 조건 전파가 서브쿼리 내에서만 가능했지만 FirstMatch에서는 조인 형태로 처리되기 때문에 서브쿼리뿐만 아니라
  아우터 쿼리의 테이블까지 전파될 수 있다. 최종적으로는 FirstMatch 최적화로 실행되면 더 많은 조건이 주어지는 것이므로 더 나은 실행 계획을 수립할 수 있다.
- IN-to-EXISTS 변환 최적화 전략에서는 아무런 조건 없이 변환이 가능한 경우에는 무조건 그 최적화를 수행했다.
  하지만 FirstMatch 최적화에서는 서브쿼리의 모든 테이블에 대해 FirstMatch 최적화를 수행할지 아니면 일부 테이블에 대해서만 수행할지 
  취사선택할 수 있다는 것이 장점이다.

FirstMatch 최적화의 몇 가지 제한 사항과 특성
- FirstMatch는 서브쿼리에서 하나의 레코드만 검색되면 더이상의 검색을 멈추는 단축 실행 경로이기 때문에 FirstMatch 최적화에서 서브쿼리는 그 서브쿼리가
  참조하는 모든 아우터 테이블이 먼저 조회된 이후에 실행된다.
- 최적화가 사용되면 실행 계획의 Extra 칼럼에는 FirstMatch(table-N) 문구가 표시된다.
- 상관 서브쿼리(Correlated subquery)에서도 사용될 수 있다.
- GROUP BY나 집합 함수가 사용된 서브쿼리의 최적화에는 사용될 수 없다.

optimizer_switch 시스템 변수의 semijoin, firstmatch 옵션이 모두 ON이어야 사용 가능하다.

루스 스캔
세미 조인 서브쿼리 최적화의 LooseScan은 인덱스의 레코드를 건너뛰면서 필요한 부분만 읽어서 가져오는 "Using index for group-by"의 루스 인덱스 스캔과
비슷한 읽기 방식을 사용한다.
예제) 
EXPLAIN
 SELECT * FROM departments d WHERE  d.dept_no IN(
    SELECT de.dept_no FROM dept_emp de);
(그림 p342)
서브쿼리에 사용된 dept_emp 테이블이 드라이빙 테이블로 실행되며, dept_emp 테이블의 프라이머리 키를 dept_no 부분에서 유니크하게 한 건씩만 읽는다.

Extra칼럼엔 "LooseScan"이라는 문구가 표시된다.
또한 실행 계획의 각 테이블에 할당된 id 칼럼의 값이 동일하게 1이라는 것은 Mysql 내부적으로는 조인처럼 처리됐다는 것을 말해준다.

특성 
LooseScan 최적화는 루스 인덱스 스캔으로 서브쿼리 테이블을 읽고, 그다음으로 아우터 테이블을 드리븐으로 사용해서 조인을 수행한다.
그래서 서브쿼리 부분이 루스 인덱스 스캔을 사용할 수 있는 조건이 갖춰져야 사용할 수 있는 최적화다.
mysql> SET optimizer_switch='loosecan=off'; (비활성화)

구체화(Materialization)
Materialization 최적화는 세미 조인에 사용된 서브쿼리를 통째로 구체화해서 쿼리를 최적화한다는 의미다.
여기서 Materialization는 쉽게 표현하면 내부 임시 테이블을 생성한다는 것을 의미한다.
예제) 
EXPLAIN
 SELECT *
   FROM employees e
  WHERE e.emp_no IN
       (SELECT de.emp_no FROM dept_emp de
         WHERE de.from_date ='1995-01-01');
이 쿼리는 FirstMatch 최적화를 사용하면 employees 테이블에 대한 조건이 서브쿼리 이외에는 아무것도 없기 때문에 employees 테이블을 풀 스캔해야 할것이다.
그래서 이런 형태의 세미 조인에서는 FirstMatch 최적화가 성능 향상에 별로 도움이 되지 않는다.

옵티마이저는 이런 형태의 쿼리를 위해 서브쿼리 구체화라는 최적화를 도입했다.
실행계획)
id select_type   table        type   key          ref
1  SIMPLE        <subquery2>  ALL    NULL         NULL
1  SIMPLE        e            eq_ref PRIMARY      <subquery2>.emp_no
2  MATERIALIZED  de           ref    ix_fromdate  const
-> 테이블은 2개인데 실행계획이 3개 라인 = 어디선가 임시 테이블 생성

구체화 최적화는 다른 서브쿼리 최적화와는 달리, 같이 서브쿼리 내에 GROUP BY절이 있어도 이 최적화 전략을 사용할 수 있다.

제한 사항과 특성
IN(subquery)에서 서브쿼리는 상관 서브쿼리가 아니어야 한다.
서브쿼리는 GROUP BY나 집합 함수들이 사용돼도 구체화를 사용할 수 있다.
구체화가 사용된 경우에는 내부 임시 테이블이 사용된다.

semijoin, materialization 옵션 둘다 ON이어야 사용가능.

중복 제거(Duplicated Weed_out)
세미 조인 서브쿼리를 일반적인 INNER JOIN 쿼리로 바꿔서 실행하고 마지막에 중복된 레코드를 제거하는 방법으로 처리되는 최적화 알고리즘이다.
예제)
EXPLAIN
 SELECT * FROM employees e
  WHERE e.emp_no IN (SELECT s.emp_no FROM salaries s WHERE s.salary>150000);
-> salaries 테이블의 프라이머리 키가(emp_no + from_date)이므로 salary가 150000 이상인 레코드를 salaries 테이블에서 조회하면 그 결과에는 중복된
emp_no가 발생할 수 있다.

SELECT e.*
  FROM employees e, salaries s
 WHERE e.emp_no=s.emp_no AND s.salary>150000
 GROUP BY e.emp_no;
Duplicate Weedout 최적화 알고리즘은 원본 쿼리를 위와 같이 INNER JOIN + GROUP BY 절로 바꿔서 실행하는 것과 동일한 작업으로 쿼리를 처리한다.

Extra에는 Start temporary나 End temporary 문구가 포함된다.

장점과 제약사항
서브쿼리가 상관 서브쿼리라고 하더라도 사용할 수 있는 최적화다.
서브쿼리가 GROUP BY나 집합 함수가 사용된 경우에는 사용될 수 없다.
Duplicate Weedout은 서브쿼리의 테이블을 조인으로 처리하기 때문에 최적화할 수 있는 방법이 많다.

컨디션 팬아웃(condition_fanout_filter)
조인을 실행할 때 테이블의 순서는 쿼리의 성능에 매우 큰 영향을 미친다. 예를 들어 A table과 B tablㄷ을 조인할때 A의 조건일치 레코드가 1만건
B의 조건일치 레코드가 10건이고, A 테이블을 조인의 드라이빙 테이블로 결정하면 B 테이블을 1만번 읽어야 한다.
그래서 Mysql 옵티마이저는 ㅕㅇ러 테이블이 조인되는 경우 가능하다면 일치하는 레코드 건수가 적은 순서대로 조인을 실행한다.
예제1) SET optimizer_switch='condition_fanout_filter=off';
EXPLAIN
 SELECT
   FROM * employees e INNER JOIN salaries s 
     ON s.emp_no = e.emp_no
  WHERE e.first_name='Matt'
    AND e.hire_date BETWEEN '1985-11-21' AND '1986-11-21';
id  table        type   key          rows  filtered   Extra
1   e            ref    ix_firstname 233     100.00   Using where
1   s            ref    PRIMARY      10      100.00   NULL

1. employees 테이블에서 ix_firstname 인덱스르 이용해 Matt 조건에 일치하는 233건의 레코드를 검색
2. 검색된 233 레코드중 hire_date 조건에 맞는 레코드를 걸러내는데, 실행 계획에서는 filtered 칼럼의 값이 100인 것은 옵티마이저가 233건 모두
   hire_date 조건을 만족할 것으로 예측했다는 것을 의미
3. 233건에 대해 salaries 테이블의 pk를 이용해 salaries 레코드를 읽는다. 
   이때 Mysql 옵티마이저는 employees 레코드 한 건당 salaries 테이블의 레코드 10건이 일치할 것으로 예상했다.
** 여기서 중요한 것은 employees 테이블의 rows 칼럼의 값이 233이고, filtered 칼럼의 값이 100%라는 것
   
예제2) SET optimizer_switch='condition_fanout_filter=on';
-- 동일 Query --

id  table        type   key          rows  filtered   Extra
1   e            ref    ix_firstname 233      23.20   Using where
1   s            ref    PRIMARY      10      100.00   NULL

filtered 칼럼의 값이 100% -> 23.2% 
최적화가 활성화되면서 Mysql 옵티마이저는 인덱스를 사용할 수 있는 first_name 칼럼 조건 이외의 나머지 조건(hire_date)에 대해서도 얼마나 조건을 
충족할지를 고려했다는 뜻이다.

8.0에서는 condition_fanout_filter 최적화가 활성화되면 다음과 같은 조건을 만족하는 칼럼의 조건들에 대해 조건을 만족하는 레코드의 비율을 계산할 수 있다.
1. WHERE 조건절에 사용된 칼럼에 대해 인덱스가 있는 경우
2. WHERE 조건절에 사용된 칼럼에 대해 히스토그램이 존재하는 경우

쿼리가 간단하고 Mysql 8.0 이전에서도 쿼리 실행 계획이 잘못된 선택을 한 적이 별로 없다면, condition_fanout_filter 최적화는 성능 향상에 
크게 도움이 되지 않을 수도 있다. Mysql 서버가 처리하는 쿼리의 빈도가 매우 높다면 실행 계획 수립에 추가되는 오버헤드가 더 크게 보일 수 있으므로
가능하면 업그레이드를 실행하기 전에 성능 테스트를 진행하는 것이 좋다

파생 테이블 머지(derived_merge)
예전 버전의 Mysql 서버에서는 FROM 절에 사용된 서브쿼리는 먼저 실행해서 그 결과를 임시 테이블로 만든 다음 외부 쿼리 부분을 처리했다.
그러한 쿼리의 실행계획을 보면 select_type 칼럼의 값이 DERIVED라고 표시돼 있다. 이 FROM절에 사용된 서브쿼리를 파생 테이블이라고 부른다.
이러한 쿼리의 경우 내부적으로 임시 테이블을 생성하고, where 조건에 맞는 레코드를 읽어 임시 테이블로 INSERT한다. 그리고 다시 임시 테이블을 읽으므로
Mysql 서버는 레코드를 복사하고 읽는 오버헤드가 더 추가된다. 내부적으로 생성되는 임시 테이블은 처음에는 메모리에 생성되지만, 임시 테이블에 저장될
레코드 건수가 많아지면 결국 디스크로 다시 기록돼야 한다. 그래서 임시 테이블이 메모리에 상주할 만큼 크기가 작다면 성능에 큰 영향을 미치지 않겠지만
레코드가 많아진다면 임시 테이블로 레코드를 복사하고 읽는 오버헤드로 인해 쿼리의 성능은 많이 느려질 것이다.

* 예전 버전의 Mysql서버의 MEMORY 스토리지 엔진은 가변 길이 칼럼을 지원하지 않아서 메모리르 과다하게 사용,
  MyISAM 스토리지 엔진은 트랜잭션을 지원하지 않는 문제점이 있었다.
  8.0부터는 메모리에 생성되는 임시 테이블을 위해 TempTable이라는 새로운 스토리지 엔진이 도입됐고 디스크 임시 테이블에 대해서는 InnoDB 스토리지
  엔진을 사용하도록 개선됐다.

5.7부터는 이렇게 파생 테이블로 만들어지는 서브쿼리를 외부 쿼리와 병합해서 서브쿼리 부분을 제거하는 최적화가 도입됐는데, derived_merge 최적화 옵션은 
이러한 임시 테이블 최적화를 활성화할지 여부를 결정한다.

최적화 적용 시 실행 계획에서 DERIVED 라인이 사라지고 단순 실행 계획으로 바뀐다. show warnings로 확인 가능
하지만 모든 쿼리에 대해 옵티마이저가 서브쿼리를 외부 쿼리로 병합할 수 있는 것은 아니다. 

자동으로 서브쿼리를 외부 쿼리로 병합할 수 없는 경우) * 수동으로 병합하여 작성
- SUM() 또는 MIN(), MAX() 같은 집계 함수와 우니도우 함수가 사용된 서브쿼리
- GROUP BY나 HAVING이 사용된 서브쿼리
- LIMIT이 사용된 서브쿼리
- UNION 또는 UNION ALL을 포함하는 서브쿼리
- SELECT 절에 사용된 서브쿼리
- 값이 변경되는 사용자 변수가 사용된 서브쿼리

인비저블 인덱스(use_invisible_indexes)
8.0부터 인덱스의 가용 상태를 제어할 수 있는 기능이 추가됐다. 삭제하지 않고 인덱스를 사용하지 못하게 제어하는 기능을 제공한다.
-- // 옵티마이저가 ix_hiredate 인덱스를 사용하지 못하게 변경
ALTER TABLE employees ALTER INDEX ix_hiredate INVISIBLE;

-- // 옵티마이저가 ix_hiredate 인덱스를 사용할 수 있게 변경
ALTER TABLE employees ALTER INDEX ix_hiredate VISIBLE;

use_invisible_indexes 옵티마이저 옵션을 이용하면 INVISIBLE로 설정된 인덱스라 하더라도 옵티마이저가 사용하게 제어할 수 있다. 기본값은 off
SET optimizer_switch='use_invisible_indexes=on';

스킵 스캔
인덱스의 핵심은 값이 정렬돼 있다는 것이며, 이로 인해 인덱스를 구성하는 칼럼의 순서가 매우 중요하다. 예를 들어 (A, B, C) 칼럼으로 구성된 인덱스가
있을 때 쿼리의 WHERE 절에 A와 B 칼럼에 대한 조건이 있다면 이 쿼리는 A칼럼과 B칼럼까지만 인덱스를 활용할 수 있다. 그런데 WHERE 절에 B와 C 칼럼에
대한 조건을 가지고 있다면 이 쿼리는 인덱스를 활용할 수 없다. 인덱스 스킵 스캔은 제한적이긴 하지만 인덱스의 이런 제약 사항을 뛰어넘을 수 있는 최적화 기법이다.

8.0부터 도입. 이 기능은 인덱스의 선행 칼럼이 조건절에 사용되지 않더라도 후행 칼럼의 조건만으로도 인덱스를 이용한 쿼리 성능 개선이 가능하다.
그런데 인덱스의 선행 칼럼이 매우 다양한 값을 가지는 경우에는 인덱스 스킵 스캔최적화가 비효율적일 수 있다. 
그래서 옵티마이저는 인덱스의 선행 칼럼이 소수의 유니크한 값을 가질때만 인덱스 스킵 스캔 최적화를 사용한다. (8.3.4.4절 '인덱스 스킵 스캡' 참고)
사용예제)
SELECT /*+ SKIP_SCAN(employees ix_gender_birthdate)*/ COUNT(*)
  FROM employees
 WHERE birth_date>='1965-02-01';
 
해시 조인 (8.0.18 버전부터 지원) 
많은 사용자가 해시 조인 기능을 기대하는 이유가 기존의 네스티드 루프 조인보다 해시 조인이 빠르다고 생각하기 때문이다. 
하지만 이는 항상 옳은 이야기는 아니다.(그림 p356)

해시 조인은 첫 번째 레코드를 찾는 데는 시간이 많이 걸리지만 최종 레코드를 찾는 데까지는 시간이 많이 걸리지 않음을 알 수 있다.
그리고 네스티드 루프 조인은 마지막 레코드를 찾는 데까지는 시간이 많이 걸리지만 첫 번째 레코드를 찾는 것은 상대적으로 훨씬 빠르다는 것을 알 수 있다.
즉, 해시 조인 쿼리는 최고 스루풋(Best Throughput) 전략에 적합하며, 네스티드 루프 조인은 최고 응답 속도(Best Response-time) 전략에 적합하다는 것을
알 수 있다. 일반적인 웹 서비스는 온라인 트랜잭션(OLTP)서비스이기 때문에 스루풋도 중요하지만 응답 속도가 더 중요하다. 그리고 분석과 같은 서비스는
사용자의 응답 시간보다는 전체적으로 처리 소요 시간이 중요하기 때문에 응답 속도보다는 전체 스루풋이 중요하다.

Mysql 서버는 범용 RDBMS이며, 여기에서 범용이라 함은 온라인 트랜잭션 처리를 위한 데이터베이스 서버를 지칭하는 것이다. 아마도 대용량 데이터
분석을 위해서 Mysql 서버를 사용하지는 않을 것이다. 이 관점으로 본다면 Mysql 서버가 응답 속도와 스루풋 중 어디에 집중해서 최적화할 것인지 명확해진다.
이런 이유로 Mysql 서버는 주로 조인 조건의 칼럼이 인덱스가 없다거나 조인 대상 테이블 중 일부의 레코드 건수가 매우 적은 경우 등에 대해서만 해시 조인
알고리즘을 사용하도록 설계돼 있다. 즉 Mysql 서버의 해시 조인 최적화는 네스티드 루프 조인이 사용되기에적합하지 않은 경우를 위한 차선책 같은
기능으로 생각하는 것이 좋다. 그래서 해시 조인이 빠르다고 하니까 옵티마이저 힌트를 사용해서 강제로 쿼리의 실행 계획을 해시 조인으로 유도하는 것은 좋지 않다.

Mysql 8.0.17까지는 해시 조인 기능이 없었기 때문에 조인 조건이 좋지 않은 경우 블록 네스티드 루프 조인이라는 조인 알고리즘을 사용했다. 
블록 네스티드 루프 조인 또한 쿼리의 조인 조건이 인덱스를 제대로 활용할 수 없는 경우에만 사용되는 최적화 방법 수준으로 사용됐다. 그래서 인덱스가
잘 설계된 데이터베이스에서는 블록 네스티드 루프 조인 실행 계획은 거의 볼 수 없었다. 블록 기반의 네스티드 루프 조인에서 "블록"은 join_buffer_size라는
시스템 변수로 크기를 조정할 수 있는 메모리 공간을 의미한다. 하지만 이 조인 버퍼를 무한정 크게 설정할 수는 없으며, 조인 대상 테이블의 레코드의 크기가
조인 버퍼보다 큰 경우에는 드라이빙 테이블을 여러 번 반복해서 스캔해야 하는 문제점이 있다.

그래서 Mysql 8.0.18과 19 버전에서는 동등 조인을 위해서는 해시 조인이 사용됐지만, 안티 조인이나 세미 조인을 위해서는 블록 네스티드 루프 조인이 사용됐다.
하지만 8.0.20부터는 블록 네스티드 루프 조인은 더 이상 사용되지 않고, 네스티드 루프 조인을 사용할 수 없는 경우에는 항상 해시 조인이 사용되도록
바뀌었다. 그리고 20버전부터는 block_nested_loop 같은 optimizer_switch 또는 BNL, NO_BNL과 같은 힌트들도 블록 네스티드 루프가 아닌 해시 조인을
유도하는 목적으로 사용된다.

예제) 해시 조인의 최적화 방식
EXPLAIN
 SELECT *
   FROM employees e IGNORE INDEX(PRIMARY, ix_hiredate)  //네스티드 루프 조인이 사용되지 못하게 하기 위한 IGNORE INDEX
        INNER JOIN dept_emp de IGNORE INDEX(ix_empno_fromdate, ix_fromdate)
     ON de.emp_no=e.emp_no AND de.from_date=e.hire_date;
id select_type   table        type   Extra
1  SIMPLE        de           ALL    NULL
1  SIMPLE        e            ALL    Using where; Using join buffer (hash join)

일반적으로 해시 조인은 빌드 단계와 프로브 단계로 나뉘어 처리된다.
빌드 단계에서는 조인 대상 테이블 중에서 레코드 건수가 적어서 해시 테이블로 만들기에 용이한 테이블을 골라서 메모리에 해시 테이블을 생성하는 작업을
수행한다. 빌드 단계에서 해시 테이블을 만들 때 사용되는 원본 테이블을 빌드 테이블이라고도 한다.
그리고 프로브 단계는 나머지 테이블의 레코드를 읽어서 해시 테이블의 일치 레코드를 찾는 과정을 의미한다. 이때 읽는 나머지 테이블을 프로브 테이블이라고도
한다. 하지만 위의 실행 계획에서는 어느 테이블이 빌드 테이블이고 어느 테이블이 프로브 테이블인지 식별하기 어렵다. 
이러한 경우에는 EXPLAIN FORMAT=TREE 또는 EXPLAIN ANALYZE 명령을 사용하면 조금 더 쉽게 구분할 수 있다.

EXPLAIN: 
-> Inner hash join (e.hire_date = de.from_date), (e.emp_no = de.emp_no)  (cost=9917028209.26 rows=331143)
    -> Table scan on e  (cost=0.07 rows=299477)
    -> Hash
         -> Table scan on de  (cost=33851.30 rows=331143)
dept_emp de 테이블이 빌드 테이블로 선정. de 테이블의 레코드를 읽어 메모리에 해시 테이블을 생성.
프로브 테이블인 e 테이블을 스캔하면서 메모리에 생성된 해시 테이블에서 레코드를 찾아서 결과를 사용자에게 반환 (그림 359 위)

해시 테이블을 메모리에 저장할 때 Mysql 서버는 join_buffer_size 시스템 변수로 크기를 제어할 수 있는 조인 버퍼를 사용한다.
조인 버퍼의 기본 크기는 256KB인데, 해시 테이블의 레코드 건수가 많아서 조인 버퍼의 공간이 부족할 수도 있다.
이 경우 빌드 테이블과 프로브 테이블을 적당한 크기의 청크로 분리한 다음, 청크별로 동일 방식으로 해시 조인을 처리한다. (그림 p359 아래)
(빌드 테이블 청크, dept_emp) (프로브 테이블 청크, employees)로 구분하여 저장.  1차 조인 결과 생성
1차 조인이 완료될 경우 "빌드 테이블 청크"에서 첫 번째 청크를 읽어 다시 메모리 해시 테이블을 구축하고 "프로브 테이블 청크"에서 첫 번째 청크를 읽으면서
새로 구축된 메모리 해시 테이블과 조인을 수행해 2차 결과를 가져온다. 디스크에 저장된 청크 개수만큼 과정 반복하여 조인 결과 반환
이렇게 청크 단위로 조인을 수행하기 위해 Mysql 서버는 2차 해시 함수를 이용해 빌드 테이블과 프로브 테이블을 동일 개수의 청크로 쪼개어 디스크에 저장한다.
* 여기서 2차 해시 함수는 특정 해시 함수가 아닌 키 생성용 해시 함수와 다른 캐시 함수를 사용하여 청크를 분리한다는 뜻이다.

Mysql 옵티마이저는 빌드 테이블의 크기에 따라 "클래식 해시 조인 알고리즘", "그레이스 해시 조인 알고리즘"을 하이브리드하게 활용하도록 구현돼 있다.
Mysql 해시 조인에서 해시키를 만들 때 xxHash64 해시 함수를 사용하는데, 매우 빠르고 해시된 값의 분포도도 훌륭한 해시 알고리즘이다.

인덱스 정렬 선호(prefer_ordering_index)
Mysql 옵티마이저는 ORDER BY 또는 GROUP BY에 인덱스를 사용해 처리 가능한 경우 쿼리의 실행 꼐획에서 이 인덱스의 가중치를 높이 설정해서 실행된다.
예제)
EXPLAIN
 SELECT *
   FROM employees
  WHERE hire_date BETWEEN '1985-01-01' AND '1985-02-01'
  ORDER BY emp_no;
-> type : index key : PRIMARY
1. ix_hiredate 인덱스를 이용해 hire_date BETWEEN " " 조건에 일치하는 레코드를 찾은 다음, emp_no로 정렬해서 결과를 반환
2. employees 테이블의 프라이머리 키가 emp_no이므로 프라이머리 키를 정순으로 읽으면서 hire_date 칼럼의 조건에 일치하는지 비교 후 결과를 반환

상황에 따라 1, 2번이 효율적일 수 있다. 일반적으로는 hire_date 칼럼의 조건에 부합되는 레코드 건수가 많지 않다면 1번이 효율적일 것이다.
그런데 가끔 Mysql 옵티마이저가 예제 쿼리의 실행 계획과 같이 2번 실행 계획을 선택하는 경우가 있을 수도 있다. 실행 계획에서는 PRIMARY 키를 
풀 스캔하면서 hire_date 칼럼의 값이 1985년 1월인 건만 필터링하도록 쿼리를 처리하고 있다. 이렇게 체크해야 하는 레코드 건수가 상당히 많음에도
불구하고 정렬된 인덱스 활용으로 실행 계획이 수립되는 것은 옵티마이저가 실수로 잘못된 실행 계획을 선택한 것일 가능성이 높다.

8.0.20 까지는 이 같은 옵티마이저의 실수가 자주 발생하면 다른 실행 계획을 사용하게 하기 위해 IGNORE INDEX 힌트를 사용하거나 했다.
8.0.21 부터는 Mysql 서버 옵티마이저가 ORDER BY를 위한 인덱스에 너무 가중치를 부여하지 않도록 prefer_ordering_index 옵티마이저 옵션이 추가됐다.
기본값은 ON으로 설정돼 있지만 옵티마이저가 자주 실수를 한다면 OFF로 변경하면 된다.

현재 쿼리에 대해서만 prefer_ordering_index 옵션을 비활성화 할 경우
SELECT /*+ SET_VAR(optimizer_switch='prefer_ordering_index=OFF') */
   ...
  FROM
  
조인 최적화 알고리즘
Mysql에는 조인 쿼리의 실행 계획 최적화를 위한 알고리즘이 2개 있다. Mysql의 조인 최적화는 나름 많이 개선됐다고 이야기한다. 하지만 사실 테이블의
개수가 많아지면 최적화된 실행 계획을 찾는 것이 상당히 어려워지고, 하나의 쿼리에서 조인되는 테이블의 개수가 많아지면 실행 계획을 수립하는 데만 
몇 분이 걸릴 수도 있다. 테이블의 개수가 특정 한계를 넘어서면 그때부터는 실행 계획 수립에 소요되는 시간만 몇 시간이나 며칠로 늘어날 수도 있다.
여기서는 왜 그런 현상이 생기고, 어떻게 그런 현상을 피할 수 있는지 살펴보겠다.
    
예제)
SELECT *
  FROM t1, t2, t3, t4
 WHERE ...

Exhaustive 검색 알고리즘
FROM절에 명시된 모든 테이블의 조합에 대해 실행 계획의 비용을 계산해서 최적의 조합 1개를 찾는 방법이다. 4개라면 4! = 24개의 조합

Greedy 검색 알고리즘 (그림 p366) optimizer_search_depth 시스템 변수의 값은 2로 가정
1. 전체 N개의 테이블 중에서 optimizer_search_depth 시스템 설정 변수에 정의된 개수의 테이블로 가능한 조인 조합을 생성
2. 1번에서 생성된 조인 조합 중에서 최소 비용의 실행 계획 하나를 선정
3. 2번에서 선정된 실행 계획의 첫 번째 테이블을 "부분 실행 계획"의 첫 번째 테이블로 선정
4. 전체 N-1개의 테이블 중에서 optimizer_search_depth 시스템 설정 변수에 정의된 개수의 테이블로 가능한 조인 조합을 생성
5. 4번에서 생성된 조인 조합들을 하나씩 3번에서 생성된 "부분 실행 계획"에 대입해 실행 비용을 계산
6. 5번의 비용 계산 결과, 최적의 실행 계획에서 두 번째 테이블을 3번에서 생성된 "부분 실행 계획"의 두 번째 테이블로 선정
7. 남은 테이블이 모두 없어질 때까지 4~6번까지의 과정을 반복 실행하면서 "부분 실행 계획"에 테이블의 조인 순서를 기록
8. 최종적으로 "부분 실행 계획"이 테이블의 조인 순서로 결정됨

optimizer_search_depth의 기본값은 62다.
optimizer_search_depth이 0으로 설정될 경우 Greedy 검색을 위한 최적의 조인 검색 테이블의 개수를 Mysql 옵티마이저가 자동으로 결정한다.
optimizer_search_depth 설정 값과 쿼리의 조인 테이블 개수에 따라 Exhaustive 검색만 사용되거나 Greedy 검색과 Exhaustive 검색이 동시에 사용된다.
조인에 사용된 테이블의 개수가 optimizer_search_depth 설정 값보다 크다면 optimizer_search_depth만큼의 테이블은 Exhaustive 검색이 사용되고
나머지 테이블은 Greedy 검색이 사용된다. 그리고 조인에 사용된 테이블의 개수가 optimizer_search_depth 설정 값보다 작다면 Exhaustive 검색만
사용된다. 특히 optimizer_prune_level 시스템 변수가 0으로 설정된 경우에는 optimizer_search_depth의 설정값이 쿼리의 성능에 심각한
영향을 미칠 수 있으니 optimizer_search_depth를 4~5 정도로 설정하는 것이 좋다. **

optimizer_prune_level 시스템 변수는 Mysql 5.0부터 추가된 Heuristic 검색이 작동하는 방식을 제어한다. 우리가 Exhaustive 검색 알고리즘과
Greedy 검색 알고리즘 중에서 어떤 알고리즘을 사용하더라도 Mysql 옵티마이저는 여러 테이블의 조인 순서를 결정하기 위해 상당히 많은 조인 경로를
비교한다. Heuristic 검색의 가장 핵심적인 내용은 다양한 조인 순서의 비용을 계산하는 도중 이미 계산했던 조인 순서의 비용보다 큰 경우에는
언제든지 중간에 포기할 수 있다는 것이다. 예를 들어 첫 번째 조인 순서의 비용이 100이라고 가정하면 그 이후에 비교되는 조인 순서의 비용이 100보다
크면 그 조인 순서는 끝까지 비교해 볼 필요가 없는 것이다. 그리고 아우터 조인으로 연결되는 테이블은 우선순위에서 제거하는 등 경험 기반의 최적화도 
Heuristic 검색 최적화에는 포함돼 있다. optimizer_prune_level이 "1"로 설정되면 옵티마이저는 조인 순서 최적화에 경험 기반의 Heuristic 알고리즘을
사용한다. 그리고 이 값이 "0"으로 설정되면 경험 기반의 Heuristic 최적화가 적용되지 않는다.
실제 Heuristic 조인 최적화는 조인 대상 테이블이 몇 개 되지 않더라도 상당한 성능 차이를 낸다. 
그러므로 특별한 요건이 없다면 optimizer_prune_level을 "0"으로 설정하지 말자. ** 

다음과 같이 컬럼 2개와 프라이머리 키, 그리고 보조 인덱스를 가진 테이블을 tab01부터 tab30까지 생성하고, 레코드를 2000건 정도 INSERT한다.
테이블의 구조와 인덱스 구조를 좀 더 다양화하기 위해 몇 개의 테이블은 fd1 칼럼과 INT와 BIGINT 타입으로 생성했고, 몇 개의 테이블은 
일부러 보조 인덱스를 제거했다. 그리고 테이블당 2000여 건 정도의 테스터 데이터를 INSERT 했다.

예제)
CREATE TABLE tab01 (
   fd1 char(20) NOT NULL,
   fd2 char(20) DEFAULT NULL,
   PRIMARY KEY (fd1),
   KEY ix_fd2 (fd2)
   );

SET SESSION optimizer_prune_level = { 0 | 1 };
SET SESSION optimizer_search_depth = { 1 | 5 | 10 | ... | 35 | 40 | 62 } ;
EXPLAIN 
 SELECT *
   FROM tab01, tab02, ... tab29, tab30
  WHERE tab01.fd1=tab02.fd1 AND tab02.fd1 = tab03.fd2 ... tab28.fd2=tab29.fd1 AND tab29.fd1 = tab30.fd2;

먼저 optimizer_prune_level 시스템 변수를 1로 고정하고, optimizer_search_depth을 1부터 5씩 증가시켜서 62까지 변화시켜가면서 위 쿼리의
실행 계획 수립에 걸린 시간을 확인한 결과, 거의 시간 차이 없이 0.01초 이내에 완료됐다. 
Mysql 5.1버전에서는 optimizer_prune_level을 1로 설정해서 조인 순서 결정에 Heuristic 최적화를 적용해도 optimizer_search_depth 세션 
변숫값이 증가하면 실행 계획 수립에 1초 넘는 시간이 걸렸다. 지금처럼 optimizer_search_depth 값 변화와 관계없이 실행 계획 수립이 아주 빠르게
처리되는 것은 Mysql 서버의 조인 최적화나 딕셔너리 정보 검색 성능이 버전이 올라감에 따라 많이 개선됐기 때문이다.

이번에는 optimizer_prune_level 세션 변수를 0으로 고정하고, optimizer_search_depth 세션 변수의 값을 1부터 5씩 증가시켜먼서 실행 계획 수립에
걸리는 시간을 확인해봤다. (그림 p369) -> 5 이후 부터 수립 소요 시간이 급증한다.

Mysql 8.0 버전의 조인 최적화는 많이 개선되어 optimizer_search_depth 변수의 값에는 크게 영향받지 않는 것으로 보인다. 
하지만 optimizer_prune_level을 0으로 설정하면 optimizer_search_depth 값 변화에 따라 실행 꼐획 수립에 소요되는 시간이 급증하는 것을 확인할 수 있다.
예전 버전의 Mysql 서버에서는 조인 최적화와 관련된 Heuristic의 문제점이 있었지만 8.0에서는 이런 조인 최적화 관련된 휴리스틱을 비활성화할 필요가
거의 없어졌다. optimizer_prune_level 시스템 변수의 기본값이 1이므로 조인 관련된 시스템 변수의 조정은 더이상 필요치 않을 것으로 보인다.
    
쿼리 힌트 
Mysql의 버전이 업그레이드 되고 통계 정보나 옵티마이저의 최적화 방법들이 더 다양해지면서 쿼리의 실행 계획 최적화가 많이 성숙하고 있다. 하지만 여전히
Mysql 서버는 우리가 서비스하는 비즈니스를 100% 이해하지는 못한다. 그래서 서비스 개발자나 DBA보다 Mysql 서버가 부족한 실행 계획을 수립할 때가 있을 수 있다.
이런 경우에는 옵티마이저에게 쿼리의 실행 계획을 어떻게 수립해야 할지 알려줄 수 있는 방법이 필요하다. 일반적인 RDBMS에서는 이런 목적으로 힌트가 제공되며,
Mysql에서도 다양한 옵티마이저 힌트를 제공한다.
- 인덱스 힌트 : 예전 버전의 Mysql 서버에서 사용되어 오던 USE INDEX 같은 힌트를 의미한다.
- 옵티마이저 힌트 : Mysql 5.6 버전부터 새롭게 추가되기 시작한 힌트들을 지칭한다. 
- 그 외의 힌트 : ex) STRAIGHT_JOIN

인덱스 힌트 
STRAIGHT_JOIN, USE INDEX 등을 포함한 인덱스 힌트들은 모두 Mysql 서버에 옵티마이저 힌트가 도입되기 전에 사용되던 기능들이다. 이들은 모두 SQL의
문법에 맞게 사용해야 하기 때문에 사용하게 되면 ANSI_SQL 표준 문법을 준수하지 못하게 되는 단점이 있다.
Mysql 5.6 부터 추가되기 시작한 옵티마이저 힌트들은 모두 Mysql 서버를 제외한 다른 RDBMS에서는 주석으로 해석하기 때문에 ANSI-SQL 표준을 준수한다고
볼 수 있다. 그래서 가능하다면 인덱스 힌트보다는 옵티마이저 힌트를 사용할 것을 추천한다. 또한 인덱스 힌트는 SELECT 명령과 UPDATE 명령에서만 사용할 수 있다.

STRAIGHT_JOIN
STRAIGHT_JOIN은 옵티마이저 힌트인 동시에 조인 키워드이기도 하다. SELECT, UPDATE, DELETE 쿼리에서 여러 개의 테이블이 조인되는 경우 조인순서를
고정하는 역할을 한다. 
ex) EXPLAIN
    SELECT
      FROM employees e, dept_emp de, departments d
     WHERE e.emp_no=de.emp_no AND d.dept_no=de.dept_no;
-> 3개의 테이블을 조인하지만 어느 테이블이 드라이빙 테이블이 되고, 드리븐 테이블이 되는지 알 수 없다. 
   옵티마이저가 그때그때 각 테이블의 통계 정보와 쿼리의 조건을 기반으로 가장 최적이라고 판단되는 순서로 조인한다.

일반적으로 조인을 하기 위한 칼럼들의 인덱스 여부로 조인의 순서가 결정되며, 조인 칼럼의 인덱스에 아무런 문제가 없는 경우에는(WHERE 조건이 있는 경우, 조건을 만족하는)
레코드가 적은 테이블을 드라이빙으로 선택한다. 이 쿼리의 경우에는 departments 테이블이 레코드 건수가 가장 적어서 드라이빙으로 선택됐을 것으로 보인다.

하지만 이 쿼리의 조인 순서를 변경하려는 경우에는 STRAIGHT_JOIN 힌트를 사용할 수 있다.
1.  SELECT STRAIGHT_JOIN e.first_name, e.last_name, d.dept_name
      FROM employees e, dept_emp de, departments d
     WHERE e.emp_no=de.emp_no AND d.dept_no=de.dept_no;
2.  SELECT /*! STRAIGHT_JOIN */ e.first_name, e.last_name, d.dept_name
      FROM employees e, dept_emp de, departments d
     WHERE e.emp_no=de.emp_no AND d.dept_no=de.dept_no;
SELECT 키워드 바로 뒤에 사용됐으며, 인덱스 힌트는 사용해야 하는 위치가 이미 결정됐으므로 그 이외의 다른 위치에서의 사용을 주의해야 한다.

STRAIGHT JOIN 힌트는 옵티마이저가 FROM 절에 명시된 테이블의 순서대로 조인을 수행하도록 유도하는데, 이 쿼리의 실행 계획을 보면 FROM 절에 명시된 테이블의 순서대로
조인을 수행한다는 것을 알 수 있다. (employees -> dept_emp -> departments)

주로 다음 기준에 맞게 조인 순서가 결정되지 않는 경우에만 STRAIGHT_JOIN 힌트로 조인 순서를 조정하는 것이 좋다.
- 임시 테이블(인라인 뷰 또는 파생된 테이블)과 일반 테이블의 조인: 이 경우에는 거의 일반적으로 임시 테이블을 드라이빙 테이블로 선정하는 것이 좋다. 일반 테이블의 
조인 칼럼에 인덱스가 없는 경우에는 레코드 건수가 작은 쪽을 먼저 읽도록 드라이빙으로 선택하는 것이 좋은데, 대부분 옵티마이저가 적절한 조인 순서를 선택하기 때문에
쿼리를 작성할 때부터 힌트를 사용할 필요는 없다. 옵티마이저가 실행 계획을 제대로 수립하지 못해서 심각한 성능 저하가 있는 경우에는 힌트를 사용하면 된다. **
- 임시 테이블끼리 조인: 임시 테이블(서브쿼리로 파생된 테이블)은 항상 인덱스가 없기 때문에 어느 테이블을 먼저 드라이빙으로 읽어도 무관하므로 크기가 작은 테이블을
드라이빙으로 선택해주는 것이 좋다.
- 일반 테이블끼리 조인: 양쪽 테이블 모두 조인 카럶에 인덱스가 있거나 양쪽 테이블 모두 조인 칼럼에 인덱스가 없는 경우에는 레코드 건수가 적은 테이블을 드라이빙으로
선택해주는 것이 좋으며, 그 이외의 경우에는 조인 칼럼에 인덱스가 없는 테이블을 드라이빙으로 선택하는 것이 좋다.  **
* 여기서 언급한 레코드 건수라는 것은 인덱스를 사용할 수 있는 WHERE 조건까지 포함해서 그 조건을 만족하는 레코드 건수를 의미한다.
** A테이블의 건수가 많지만 WHERE 조건으로 인해 데이터 건수가 적어질 경우 STRAIGHT_JOIN을 이용해 A테이블을 드라이빙되게 하는 것이 좋다.
STRAIGHT_JOIN과 비슷한 역할을 하는 옵티마이저 힌트
- JOIN_FIXED_ORDER : STRAIGHT_JOIN과 동일한 효과
- JOIN_ORDER
- JOIN_PREFIX     나머지 힌트는 일부 테이블의 조인 순서에 대해서만 제안하는 힌트.
- JOIN_SUFFIX

USE INDEX/ FORCE INDEX/ IGNORE INDEX
조인의 순서를 변경하는 것과 달리, 사용하려는 인덱스를 가지는 테이블 뒤에 힌트를 명시해야 한다.
Mysql 옵티마이저는 인덱스를 잘 선택하는 편, but 3~4개 이상의 칼럼을 포함하는 비슷한 인덱스가 여러 개 존재하는 경우 가끔 실수를 함. 이 때 사용

인덱스 힌트는 크게 다음과 같이 3종류가 있다. 3종류의 인덱스 힌트 모두 키워드 뒤에 사용할 인덱스의 이름을 괄호로 묶어서 사용하며, 괄호 안에 아무것도 없거나
존재하지 않는 인덱스 이름을 사용할 경우에는 쿼리의 문법 오류로 처리된다. 또한 프라이머리 키는 PRIMARY라고 명시하면 된다.

- USE INDEX : 가장 자주 사용되는 인덱스 힌트로, Mysql 옵티마이저에게 특정 테이블의 인덱스를 사용하도록 권장하는 힌트 정도. 대부분의 경우 인덱스 힌트가 주어지면
옵티마이저는 사용자의 힌트를 채택하지만 항상 그 인덱스를 사용하는 것은 아니다.
- FORCE INDEX : USE INDEX와 비교해 다른 점은 없으며, USE INDEX보다 옵티마이저에게 미치는 영향이 더 강한 힌트다.
+ 대체로 USE INDEX 힌트를 부여했는데도 그 인덱스를 사용하지 않는 경우라며 FORCE INDEX 힌트를 사용해도 그 인덱스를 사용하지 않았다.
- IGNORE INDEX : 반대로 특정 인덱스를 사용하지 못하게 하는 용도로 사용하는 힌트. 때로는 옵티마이저가 풀 테이블 스캔을 사용하도록 유도하기 위해 사용할 수도 있다.

용도 명시(3개 다 가능)
USE INDEX FOR JOIN : 여기서 JOIN이라는 키워드는 테이블 간의 조인뿐만 아니라 레코드를 검색하기 위한 용도까지 포함하는 용어. 
   (Mysql 서버에서는 하나의 테이블로부터 데이터를 검색하는 작업도 JOIN이라고 표현)
USE INDEX FOR ORDER BY : 명시된 인덱스를 ORDER BY 용도로만 사용할 수 있게 제한한다.
USE INDEX FOR GROUP BY : 명시된 인덱스를 GROUP BY 용도로만 사용할 수 있게 제한한다.

예제) 사용법 
1. SELECT * FROM employees WHERE emp_no=10001;
2. SELECT * FROM employees FORCE INDEX(primary) WHERE emp_no=10001;
3. SELECT * FROM employees USE INDEX(primary) WHERE emp_no=10001;
4. SELECT * FROM employees IGNORE INDEX(primary) WHERE emp_no=10001;
5. SELECT * FROM employees FORCE INDEX(ix_firstname) WHERE emp_no=10001;

예제 중 1~3까지의 쿼리는 모두 employees 테이블의 프라이머리 키를 이용해 동일한 실행 계획으로 쿼리를 처리한다.
기본적으로 인덱스 힌트가 주어지지 않아도 "emp_no=10001" 조건이 있기 때문에 프라이머리 키를 사용하는 것이 최적이라는 것을 옵티마이저도 인식하기 때문이다.
4의 쿼리는 primary 인덱스를 사용하지 못하도록 힌트를 추가했다. (풀 테이블 스캔으로 유도하는 힌트) 실제로 실행 계획에 풀 테이블 스캔으로 실행된다.
5의 쿼리도 전혀 관계없는 인덱스를 사용하도록 FORCE INDEX 힌트를 사용하니 풀 테이블 스캔을 하는 형태로 실행 계획이 출력된다.

전문 검색(Full Text search) 인덱스가 있는 경우에는 Mysql 옵티마이저는 다른 일반 보조 인덱스(B-Tree 인덱스)를 사용할 수 있는 상황이라고 하더라도 
전문 검색 인덱스를 선택하는 경우가 많다. 옵티마이저는 프라이머리 키나 전문 검색 인덱스와 같은 인덱스에 대해서는 선택 시 가중치를 두고 실행 계획을 수립하기 때문이다.

인덱스의 사용법이나 좋은 실행 계획이 어떤 것인지 판단하기 힘든 상황이라면 힌트를 사용해 강제로 옵티마이저의 실행 계획에 영향을 미치는 것은 피하는 것이 좋다.
최적의 실행 계획은 데이터의 성격에 따라서 시시각각 변하므로, 지금 프라이머리 키를 사용하는 것이 좋은 계획이었다고 하더라도 내일은 달라질 수 있기 때문에
가능하다면 그때그때 옵티마이저가 당시 통계 정보를 가지고 선택하게 하는 것이 가장 좋다. 가장 훌륭한 최적화는 ** 그 쿼리를 서비스에서 없애 버리거나 튜닝할
필요가 없게 데이터를 최소화하는 것이며, 그것이 어렵다면 데이터 모델의 단순화를 통해 쿼리를 간격하게 만들고 힌트가 필요치 않게 하는 것이다.
일반적으로 실무에서는 앞쪽의 작업들에 상당한 시간과 작업 능력이 필요하기 때문에 항상 이런 힌트에 의존하는 경우가 많다.

SQL_CALC_FOUND_ROWS
Mysql의 LIMIT을 사용하는 경우, 조건을 만족하는 레코드가 LIMIT에 명시된 수보다 더 많다고 하더라도 LIMIT에 명시된 수만큼 만족하는 레코드를 찾으면 즉시 검색 작업을
멈춘다. 하지만 SQL_CALC_FOUND_ROWS 힌트가 포함된 쿼리의 경우에는 LIMIT을 만족하는 수만큼의 레코드를 찾았다고 하더라도 끝까지 검색을 수행한다. 
최종적으로 사용자에게는 LIMIT에 제한된 수만큼의 결과 레코드만 반환됨에도 불구하고 말이다. SQL_CALC_FOUND_ROWS 힌트가 사용된 쿼리가 실행된 경우에는
FOUND_ROWS()라는 함수를 이용해 LIMIT을 제외한 조건을 만족하는 레코드가 전체 몇 건이었는지를 알아낼 수 있다.
ex)
SELECT SQL_CALC_FOUND_ROWS * FROM employees LIMIT 5;
SELECT FOUND_ROWS() AS total_record_count; // 직전 쿼리의 대한 결과

SQL_CALC_FOUND_ROWS 힌트를 사용하면 안되는 경우
SELECT SQL_CALC_FOUND_ROWS * FROM employees WHERE first_name='Georgi' LIMIT 0, 20;





